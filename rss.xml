<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>远行者回忆录——人类往事</subtitle>
        <icon>https://aristotlednzk.github.io.com/images/favicon.ico</icon>
        <link>https://aristotlednzk.github.io.com</link>
        <author>
          <name>Sean Barrett</name>
        </author>
        <description>思及我域</description>
        <language>zh-CN</language>
        <pubDate>Tue, 29 Nov 2022 13:28:41 +0800</pubDate>
        <lastBuildDate>Tue, 29 Nov 2022 13:28:41 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/29/cpp/%E9%A1%B9%E7%9B%AE/%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
            <title>定时器</title>
            <link>https://aristotlednzk.github.io.com/2022/11/29/cpp/%E9%A1%B9%E7%9B%AE/%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Tue, 29 Nov 2022 13:28:41 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbW1YTHFoX055d2hCWEp2STQ1aGNoQQ==&#34;&gt;https://mp.weixin.qq.com/s/mmXLqh_NywhBXJvI45hchA&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础知识&#34;&gt;#&lt;/a&gt; 基础知识&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;非活跃&lt;/code&gt; ，是指客户端（这里是浏览器）与服务器端建立连接后，&lt;strong&gt;长时间不交换数据&lt;/strong&gt;，一直占用服务器端的文件描述符，导致连接资源的浪费。&lt;/li&gt;
&lt;li&gt;定时事件：是指固定一段时间之后触发某段代码，由该段代码处理一个事件，如从内核事件表删除事件，并关闭文件描述符，释放连接资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定时器&lt;/code&gt; ，是指利用结构体或其他形式，** 将多种定时事件进行封装起来。** 具体的，这里只涉及一种定时事件，即定期检测非活跃连接，这里将该定时事件与连接资源封装为一个结构体定时器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定时器容器&lt;/code&gt; ，是指使用某种容器类数据结构，将上述多个定时器组合起来，便于对定时事件统一管理。具体的，项目中使用升序链表将所有定时器串联组织起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础 API&lt;/strong&gt;，描述 &lt;code&gt;sigaction&lt;/code&gt;  结构体、 &lt;code&gt;sigaction&lt;/code&gt;  函数、 &lt;code&gt;sigfillset&lt;/code&gt;  函数、 &lt;code&gt;SIGALRM&lt;/code&gt;  信号、 &lt;code&gt;SIGTERM&lt;/code&gt;  信号、 &lt;code&gt;alarm&lt;/code&gt;  函数、 &lt;code&gt;socketpair&lt;/code&gt;  函数、 &lt;code&gt;send&lt;/code&gt;  函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;alarm函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#alarm函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;alarm 函数&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;unistd.h&amp;gt;;
unsigned int alarm(unsigned int seconds);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置信号传送闹钟，即用来设置信号 SIGALRM 在经过参数 seconds 秒数后发送给目前的进程。如果未设置信号 SIGALRM 的处理函数，那么 alarm () 默认处理终止进程.&lt;/p&gt;
&lt;h4 id=&#34;sigfillset函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sigfillset函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;sigfillset 函数&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;1#include &amp;lt;signal.h&amp;gt;
2int sigfillset(sigset_t *set);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用来将参数&lt;strong&gt; set 信号集初始化&lt;/strong&gt;，然后&lt;strong&gt;把所有的信号加入到此信号集&lt;/strong&gt;里。&lt;/p&gt;
&lt;h4 id=&#34;sigalrm-sigterm信号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sigalrm-sigterm信号&#34;&gt;#&lt;/a&gt; &lt;strong&gt;SIGALRM、SIGTERM 信号&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;1#define SIGALRM  14     //**由alarm系统调用产生timer时钟信号**
2#define SIGTERM  15     //终端发送的终止信号
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;alarm函数-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#alarm函数-2&#34;&gt;#&lt;/a&gt; &lt;strong&gt;alarm 函数&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;1#include &amp;lt;unistd.h&amp;gt;;
2unsigned int alarm(unsigned int seconds);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置信号传送闹钟，即用来&lt;strong&gt;设置信号 SIGALRM 在经过参数 seconds 秒数后发送给目前的进程&lt;/strong&gt;。如果未设置信号 SIGALRM 的处理函数，那么 alarm () 默认处理终止进程.&lt;/p&gt;
&lt;h4 id=&#34;socketpair函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socketpair函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;socketpair 函数&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在 linux 下，使用 socketpair 函数能够&lt;strong&gt;创建一对套接字进行通信，项目中使用管道通信&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
int socketpair(int domain, int type, int protocol, int sv[2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;domain 表示协议族，PF_UNIX 或者 AF_UNIX&lt;/li&gt;
&lt;li&gt;type 表示协议，可以是 SOCK_STREAM 或者 SOCK_DGRAM，SOCK_STREAM 基于 TCP，SOCK_DGRAM 基于 UDP&lt;/li&gt;
&lt;li&gt;protocol 表示类型，只能为 0&lt;/li&gt;
&lt;li&gt;sv [2] 表示&lt;strong&gt;套节字柄对，该两个句柄作用相同，均能进行读写双向操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;返回结果， 0 为创建成功，-1 为创建失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;send函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#send函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;send 函数&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当套接字发送缓冲区变满时，send 通常会阻塞，除非套接字设置为非阻塞模式，当缓冲区变满时，返回 EAGAIN 或者 EWOULDBLOCK 错误，此时可以调用 select 函数来监视何时可以发送数据。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;整体流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整体流程&#34;&gt;#&lt;/a&gt; 整体流程&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;   如果某一用户`connect()`到服务器之后，长时间不交换数据，一直占用服务器端的文件描述符，导致连接资源的浪费。这时候就应该利用定时器把这些超时的非活动连接释放掉，关闭其占用的文件描述符。这种情况也很常见，当你登录一个网站后长时间没有操作该网站的网页，再次访问的时候你会发现需要重新登录。

   本项目中，**服务器主循环为每一个连接创建一个定时器**，并对每个连接进行定时。另外，利用**升序时间链表容器**将所有定时器**串联**起来，若主循环接收到定时通知，则在链表中依次执行定时任务。
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;项目中使用的是 ** &lt;code&gt;SIGALRM信号&lt;/code&gt; &lt;strong&gt;&lt;em&gt; * 来实现定时器 *&lt;/em&gt;，利用&lt;/strong&gt; &lt;code&gt;alarm&lt;/code&gt; &lt;em&gt;&lt;strong&gt; * 函数周期性的触发 *&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;SIGALRM&lt;/code&gt; &lt;strong&gt;&lt;em&gt; * 信号 *&lt;/em&gt;，*&lt;em&gt; 信号处理函数利用管道通知主循环 *&lt;/em&gt;，当主循环在读端 &lt;code&gt;pipefd[0]&lt;/code&gt;  读到这个信号的的时候，就会将 &lt;code&gt;timeout&lt;/code&gt;  变量置为 &lt;code&gt;true&lt;/code&gt;  并跳出循环，让 &lt;code&gt;timer_handler()&lt;/code&gt;  函数取出来定时器容器上的到期任务，该定时器容器是通过升序链表来实现的，*&lt;em&gt; 从头到尾对检查任务是否超时，若超时则调用定时器的回调函数 *&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;cb_func()&lt;/code&gt; &lt;em&gt;&lt;strong&gt;*，关闭该 socket 连接，并删除其对应的定时器 *&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;del_timer&lt;/code&gt; **，释放所占用的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;执行自定义的信号函数 addsig：其中定义了信号捕获函数（当捕获到 SIGALRM 和 SIGTERM 信号则执行信号处理函数：传递给主循环的信号值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/29/cpp/%E9%A1%B9%E7%9B%AE/%E5%AE%9A%E6%97%B6%E5%99%A8/%E5%AE%9A%E6%97%B6%E5%99%A8.png&#34; class=&#34;&#34; title=&#34;定时器&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alarm&lt;/code&gt;  函数会定期触发 &lt;code&gt;SIGALRM&lt;/code&gt;  信号，这个信号交由 &lt;code&gt;sig_handler&lt;/code&gt;  来处理，每当监测到有这个信号的时候，都会将这个信号写到 &lt;code&gt;pipefd[1]&lt;/code&gt;  里面，传递给主循环：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定时器优化&lt;/strong&gt;这个基于升序双向链表实现的定时器存在着其固有缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次遍历添加和修改定时器的效率偏低 (O (n))，使用&lt;strong&gt;最小堆结构可以降低时间复杂度降至 (O (logn))。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每次以固定的时间间隔触发 &lt;code&gt;SIGALRM&lt;/code&gt;  信号，调用 &lt;code&gt;tick&lt;/code&gt;  函数处理超时连接会造成一定的触发浪费，举个例子，若当前的 &lt;code&gt;TIMESLOT=5&lt;/code&gt; ，即每隔 5ms 触发一次 &lt;code&gt;SIGALRM&lt;/code&gt; ，跳出循环执行 &lt;code&gt;tick&lt;/code&gt;  函数，这时如果当前即将超时的任务距离现在还有 &lt;code&gt;20ms&lt;/code&gt; ，那么在这个期间， &lt;code&gt;SIGALRM&lt;/code&gt;  信号被触发了 4 次， &lt;code&gt;tick&lt;/code&gt;  函数也被执行了 4 次，可是在这 4 次中，前三次触发都是无意义的。对此，我们可以动态的设置 &lt;code&gt;TIMESLOT&lt;/code&gt;  的值，每次将其值设置为&lt;strong&gt;当前最先超时的定时器与当前时间的时间差&lt;/strong&gt;，这样每次调用 &lt;code&gt;tick&lt;/code&gt;  函数，超时时间最小的定时器必然到期，并被处理，然后在从时间堆中取一个最先超时的定时器的时间与当前时间做时间差，更新 &lt;code&gt;TIMESLOT&lt;/code&gt;  的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定时器处理非活动连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器处理非活动连接&#34;&gt;#&lt;/a&gt; 定时器处理非活动连接&lt;/h4&gt;
&lt;p&gt;由于非活跃连接占用了连接资源，严重影响服务器的性能，通过实现一个服务器定时器，处理这种非活跃连接，释放连接资源。利用 alarm 函数周期性地触发 SIGALRM 信号，该信号的信号处理函数利用管道通知主循环执行定时器链表上的定时任务.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一事件源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于升序链表的定时器&lt;/li&gt;
&lt;li&gt;处理非活动连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sort_timer_lst 是一个升序链表，其核心函数 tick 每隔一段时间就执行一次，以检测并处理到期的任务。判断定时器到期的依据是定时器的 expire 值小于当前的系统时间。&lt;/p&gt;
&lt;h4 id=&#34;处理非活跃连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理非活跃连接&#34;&gt;#&lt;/a&gt; 处理非活跃连接&lt;/h4&gt;
&lt;p&gt;在应用层实现 KEEPALIVE 机制，以管理所有长期处于非活跃状态的连接。&lt;/p&gt;
&lt;p&gt;利用 alarm 函数周期性地触发 SIGALRM 信号，该信号的信号处理函数利用管道通知主循环执行定时器链表上的定时任务→&lt;strong&gt;关闭非活跃连接&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;信号通知逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号通知逻辑&#34;&gt;#&lt;/a&gt; &lt;strong&gt;信号通知逻辑&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建管道，其中管道写端写入信号值，&lt;strong&gt;管道读端通过 I/O 复用系统监测读事件&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置&lt;/p&gt;
&lt;p&gt;信号处理函数&lt;/p&gt;
&lt;p&gt;SIGALRM（时间到了触发）和 SIGTERM（kill 会触发，Ctrl+C）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 struct sigaction 结构体和 sigaction 函数注册信号捕捉函数&lt;/li&gt;
&lt;li&gt;在结构体的 handler 参数设置信号处理函数，具体的，从管道写端写入信号的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 I/O 复用系统监听管道读端文件描述符的可读事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息值传递给主循环，主循环再根据接收到的信号值执行目标信号对应的逻辑代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于升序链表的定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于升序链表的定时器&#34;&gt;#&lt;/a&gt; 基于升序链表的定时器&lt;/h2&gt;
&lt;p&gt;定时器至少包含：超时时间和任务回调函数 使用链表作为容器串联所有定时器，则每个定时器还要包含下一个和上一个定时器的指针成员。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;  下提供了三种定时的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socket 选项 SO_RECVTIMEO 和 SO_SNDTIMEO&lt;/li&gt;
&lt;li&gt;SIGALRM 信号&lt;/li&gt;
&lt;li&gt;I/O 复用系统调用的超时参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目中使用的是 &lt;code&gt;SIGALRM&lt;/code&gt;  信号：&lt;/p&gt;
&lt;p&gt;具体的，利用 &lt;code&gt;alarm&lt;/code&gt;  函数周期性地触发 &lt;code&gt;SIGALRM&lt;/code&gt;  信号，信号处理函数利用管道通知主循环，主循环接收到该信号后对升序链表上所有定时器进行处理，若该段时间内没有交换数据，则将该连接关闭，释放所占用的资源。&lt;/p&gt;
&lt;p&gt;从上面的简要描述中，可以看出定时器处理非活动连接模块，主要分为两部分，其一为定时方法与信号通知流程，其二为定时器及其容器设计与定时任务的处理。&lt;/p&gt;
&lt;h3 id=&#34;信号通知流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号通知流程&#34;&gt;#&lt;/a&gt; 信号通知流程&lt;/h3&gt;
&lt;p&gt;介绍&lt;strong&gt;统一事件源&lt;/strong&gt;和信号处理机制。&lt;/p&gt;
&lt;p&gt;Linux 下的&lt;strong&gt;信号采用的异步处理机制&lt;/strong&gt;，信号处理函数和当前进程是两条不同的执行路线。具体的，当进程收到信号时，&lt;strong&gt;操作系统会中断进程当前的正常流程&lt;/strong&gt;，转而进入&lt;strong&gt;信号处理函数&lt;/strong&gt;执行操作，完成后再返回中断的地方继续执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为避免信号竞态现象发生，信号处理期间系统不会再次触发它&lt;/strong&gt;。所以，为确保该信号不被屏蔽太久，信号处理函数需要尽可能快地执行完毕。&lt;/p&gt;
&lt;p&gt;一般的信号处理函数需要处理该信号对应的逻辑，当该逻辑比较复杂时，信号处理函数执行时间过长，会导致信号屏蔽太久。&lt;/p&gt;
&lt;p&gt;这里的解决方案是，信号处理函数仅仅发送信号通知程序主循环，将信号对应的处理逻辑放在程序主循环中，由主循环执行信号对应的逻辑代码。&lt;/p&gt;
&lt;h4 id=&#34;统一事件源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一事件源&#34;&gt;#&lt;/a&gt; &lt;strong&gt;统一事件源&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;统一事件源，是指将&lt;strong&gt;信号事件与其他事件一样&lt;/strong&gt;被处理。&lt;/p&gt;
&lt;p&gt;具体的，信号处理函数使用管道将信号传递给主循环，信号处理函数往管道的写端写入信号值，主循环则从管道的读端读出信号值，&lt;strong&gt;使用 I/O 复用系统调用来监听管道读端的可读事件&lt;/strong&gt;，这样&lt;strong&gt;信号事件与其他文件描述符都可以通过 epoll 来监测&lt;/strong&gt;，从而实现统一处理。&lt;/p&gt;
&lt;h4 id=&#34;信号处理机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号处理机制&#34;&gt;#&lt;/a&gt; &lt;strong&gt;信号处理机制&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;每个进程之中，都有存着一个表，里面存着每种信号所代表的含义，内核通过设置表项中每一个位来标识对应的信号类型。&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号的接收
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接收信号的任务是由内核代理&lt;/strong&gt;的，当内核接收到信号后，会将其放到对应进程的&lt;strong&gt;信号队列&lt;/strong&gt;中，同时&lt;strong&gt;向进程发送一个中断&lt;/strong&gt;，使其陷入内核态。注意，此时信号还只是在队列中，对进程来说暂时是不知道有信号到来的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号的检测
&lt;ul&gt;
&lt;li&gt;进程从内核态返回到用户态前进行&lt;strong&gt;信号检测&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;进程在内核态中，从睡眠状态被唤醒的时候进行信号检测&lt;/li&gt;
&lt;li&gt;进程陷入内核态后，有两种场景会对信号进行检测：&lt;/li&gt;
&lt;li&gt;当发现有新信号时，便会进入下一步，信号的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号的处理&lt;/li&gt;
&lt;li&gt;( &lt;strong&gt;内核&lt;/strong&gt; ) 信号处理函数是运行在用户态的，调用处理函数前，内核会将&lt;strong&gt;当前内核栈的内容备份拷贝到用户栈上&lt;/strong&gt;，并且修改指令寄存器（eip）将其指向信号处理函数。&lt;/li&gt;
&lt;li&gt;( &lt;strong&gt;用户&lt;/strong&gt; ) 接下来进程返回到用户态中，执行相应的信号处理函数。&lt;/li&gt;
&lt;li&gt;( &lt;strong&gt;内核&lt;/strong&gt; ) 信号处理函数执行完成后，还需要返回内核态，检查是否还有其它信号未处理。&lt;/li&gt;
&lt;li&gt;( &lt;strong&gt;用户&lt;/strong&gt; ) 如果所有信号都处理完成，就会&lt;strong&gt;将内核栈恢复（从用户栈的备份拷贝回来）&lt;/strong&gt;，同时恢复指令寄存器（eip）将其指向中断前的运行位置，最后回到用户态继续执行进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，一个完整的信号处理流程便结束了，如果同时有多个信号到达，上面的处理流程会在第 2 步和第 3 步骤间重复进行。&lt;/p&gt;
&lt;h3 id=&#34;代码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码分析&#34;&gt;#&lt;/a&gt; 代码分析&lt;/h3&gt;
&lt;h4 id=&#34;信号处理函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号处理函数&#34;&gt;#&lt;/a&gt; &lt;strong&gt;信号处理函数&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;自定义信号处理函数，创建 sigaction 结构体变量，设置信号函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号处理函数中仅仅通过管道发送信号值，不处理信号对应的逻辑，缩短异步执行时间，减少对主程序的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;1//信号处理函数 
2void sig_handler(int sig) 
3&amp;#123; 
4    //为保证函数的可重入性，保留原来的errno 
5    //可重入性表示中断后再次进入该函数，环境变量与之前相同，不会丢失数据 6    int save_errno = errno; 
7    int msg = sig; 
8 
9    //将信号值从管道写端写入，传输字符类型，而非整型
10    send(pipefd[1], (char *)&amp;amp;msg, 1, 0);
11
12    //将原来的errno赋值为当前的errno
13    errno = save_errno;
14&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;项目中设置信号函数，仅关注 SIGTERM 和 SIGALRM 两个信号。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void Utils::addsig(int sig, void(handler)(int), bool restart)
&amp;#123;//创建sigaction结构体变量
    struct sigaction sa;
    memset(&amp;amp;sa, &#39;\0&#39;, sizeof(sa));//memset是一个初始化函数，作用是将某一块内存中的全部设置为指定的值。
    //信号处理函数中仅仅发送信号值，不做对应信号处理逻辑
    sa.sa_handler = handler;
    if (restart)
    sa.sa_flags |= SA_RESTART;
    //将所有信号添加到信号集中
    sigfillset(&amp;amp;sa.sa_mask);
    //执行sigaction函数
    assert(sigaction(sig, &amp;amp;sa, NULL) != -1);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;小根堆定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小根堆定时器&#34;&gt;#&lt;/a&gt; 小根堆定时器&lt;/h1&gt;
&lt;p&gt;该定时器容器的思路是：将&lt;strong&gt;所有定时器中超时时间最小的一个定时器的超时值作为&lt;/strong&gt;触发 &lt;code&gt;SIGALRM&lt;/code&gt;  信号的时间间隔，这样，一旦心搏函数 tick 被调用，&lt;strong&gt;超时时间最小的定时器必然到期&lt;/strong&gt;，我们就可以在 tick 函数中处理该定时器。然后，&lt;strong&gt;再从剩余的定时器中找到超时时间最小的一个，并将这段最小时间设置为下一次心搏间隔&lt;/strong&gt;，如此反复，就实现了较为精确的定时。&lt;/p&gt;
&lt;p&gt;Linux 下的 3 组 I/O 复用系统调用（select、poll、epoll）都带有定时参数，因此他们不仅能统一处理信号和 I/O 事件，也能统一处理定时事件。我们可以使用定时容器和 I/O 复用系统调用来共同实现定时器的触发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这三个系统调用都有一个 timeout 的参数，当发生 I/O 事件时，这三个系统调用将会返回； 当指定的时间到达时，如果没有 I/O 事件发生，这三个系统调用也会返回&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/</guid>
            <title>Linux多线程开发</title>
            <link>https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="Linux高性能服务器编程" scheme="https://aristotlednzk.github.io.com/categories/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="Linux高性能服务器编程" scheme="https://aristotlednzk.github.io.com/tags/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/" />
            <pubDate>Tue, 15 Nov 2022 11:28:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;线程概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程概念&#34;&gt;#&lt;/a&gt; 线程概念&lt;/h2&gt;
&lt;p&gt;与进程 (process）类似，线程 (thread) 是允许应用程序并发执行多个任务的一种机制。一个进程可以包含多个线程。同一个程序中的所有线程均会独立执行相同程序，且共享同一份全局内存区域，其中包括初始化数据段、未初始化数据段，以及堆内存段。(传统意义上的 UNIX 进程只是多线程程序的一个特例，该进程只包含一个线程)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程是 CPU 分配资源的最小单位，线程是操作系统调度执行的最小单位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程是轻量级的进程（LWP: Light weight Process)，在 Linux 环境下线程的本质仍是进程。&lt;/p&gt;
&lt;p&gt;查看指定进程的 LWP 号：ps -Lf pid&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程之间的信息难以共享&lt;/li&gt;
&lt;li&gt;fork（）创建进程的代价相对较高 —— 写时复制&lt;/li&gt;
&lt;li&gt;创建线程是共用原来的虚拟地址空间，只是&lt;strong&gt;栈空间和代码段.text&lt;/strong&gt; 细分给不同线程，而堆空间都是共享的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B.png&#34; class=&#34;&#34; title=&#34;多线程&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程创建&#34;&gt;#&lt;/a&gt; 线程创建&lt;/h2&gt;
&lt;p&gt;main 函数所在线程称为主线程。 程序默认只有一个进程和线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;pthread_t tid;
int ret=pthread_create(&amp;amp;tid,NULL,callback,NULL);

int pthread_create(pthread_t *thread,const pthread_attr_t *attr,void *(start_routine) (void *),void *arg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;thread: 传出参数，线程创建成功后，子线程的线程 ID 被写到该变量中 attr：设置线程的属性，默认值 NULL start_routine：函数指针，&lt;strong&gt;这个函数是子线程需要处理的逻辑代码&lt;/strong&gt; arg：第三个参数使用，传参&lt;/p&gt;
&lt;p&gt;返回值：成功返回 0，失败返回错误号&lt;/p&gt;
&lt;h2 id=&#34;线程同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程同步&#34;&gt;#&lt;/a&gt; 线程同步&lt;/h2&gt;
&lt;p&gt;线程优势：能够通过全局变量来共享信息。但必须确保线程安全&lt;/p&gt;
&lt;p&gt;临界区：访问共享资源的代码片段，并且这段代码的执行应该为原子操作 —— 同时访问同一个共享资源的线程不能执行该区域代码到一半中断。&lt;/p&gt;
&lt;p&gt;线程同步：当有一个线程在对内存进行操作的时候，其他线程都不能对这个内存地址进行操作，知道该线程完成操作，其他线程都处于等待状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终止线程&lt;/strong&gt;：在哪个线程中调用就终止哪个线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;pthread_exit(void* retval);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;retval：需要传递一个指针作为返回值，可以在 pthread_join () 中获取到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;pthread_t pthread_self(void);
pthread_self();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取当前的线程的线程 ID&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;pthread_exit(NULL);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于 return 0 会让进程退出，那所有线程资源都会被释放，因此可以在主线程中调用，让其他线程继续执行，单独&lt;strong&gt;让主线程退出，当主线程退出时，不会影响其他正常运行的线程&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;互斥量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#互斥量&#34;&gt;#&lt;/a&gt; 互斥量&lt;/h2&gt;
&lt;p&gt;确保同时仅有一个线程可以访问某共享资源，保证对共享资源的原子访问。&lt;/p&gt;
&lt;p&gt;互斥量有两种状态：已锁定和未锁定。至多只有一个线程可以锁定该互斥量。只有所有者才能给互斥量解锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建互斥量类型 pthread_mutex_t&lt;/strong&gt;：一般在全局创建，在主函数 main 中初始化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化互斥量&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_mutex_init(pthread_mutex_init *restrict mutex, const pthread_mutexattr_t attr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mutex：需要初始化的互斥量变量 attr：互斥量相关的属性，默认 NULL&lt;/p&gt;
&lt;p&gt;restrict：C 语言修饰符，被修饰的指针不能由另外的一个指针进行操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;释放互斥量的资源&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_mutex_destroy(pthread_mutex_init * mutex);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;加锁：阻塞的&lt;/strong&gt;：如果已经有一个线程加锁了，那么其他线程只能阻塞等待&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_mutex_lock(pthread_mutex_init * mutex);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解锁&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_mutex_unlock(pthread_mutex_init * mutex);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;条件变量互斥锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件变量互斥锁&#34;&gt;#&lt;/a&gt; 条件变量 + 互斥锁&lt;/h2&gt;
&lt;p&gt;条件变量其实就是一种通知机制：当线程发现资源被锁定时条件变量就会将其阻塞，让出 CPU 的控制权给其他线程，当资源被释放时，那些阻塞线程被唤醒，线程重新检查资源可用性，从而获得资源并上锁或是重新阻塞。因此条件变量是一种通知模型的同步方式。&lt;/p&gt;
&lt;p&gt;条件变量一般是用于&lt;strong&gt;让生产者线程和消费者线程之间以及消费者线程之间互斥的访问临界资源&lt;/strong&gt;（临界资源指的是&lt;strong&gt;同时只允许一个线程访问的共享资源&lt;/strong&gt;）。条件变量的使用一般是需要结合互斥锁来进行（条件变量相关函数的输入参数就是互斥锁），从而使得各个线程能够互斥的访问该临界资源。&lt;/p&gt;
&lt;p&gt;想办法：当资源上的锁被释放时就通知等待该资源的线程，当有线程正在使用资源时就将其他想访问该资源的线程阻塞呢&lt;/p&gt;
&lt;h3 id=&#34;二-条件变量的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-条件变量的使用&#34;&gt;#&lt;/a&gt; 二 条件变量的使用&lt;/h3&gt;
&lt;p&gt;条件变量在 pthread.h 头文件中。&lt;/p&gt;
&lt;h4 id=&#34;21-条件变量的初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-条件变量的初始化&#34;&gt;#&lt;/a&gt; 2.1 条件变量的初始化&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_cond_init(pthread_cond_t* *cond,const pthread_condattr_t* *cond_attr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数功能：用于初始化一个条件变量。&lt;/p&gt;
&lt;p&gt;函数参数：&lt;/p&gt;
&lt;p&gt;1.cond：用于指向目标条件变量。&lt;/p&gt;
&lt;p&gt;2.cond_attr：用于设置条件变量属性，置 NULL 表示条件变量属性为默认值。&lt;/p&gt;
&lt;h4 id=&#34;22-条件变量的销毁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-条件变量的销毁&#34;&gt;#&lt;/a&gt; 2.2 条件变量的销毁&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_cond_destroy(pthread_cond_t*cond);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数功能：用于销毁条件变量。&lt;/p&gt;
&lt;h4 id=&#34;23-条件变量的通知机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-条件变量的通知机制&#34;&gt;#&lt;/a&gt; 2.3 条件变量的通知机制&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_cond_signal(pthread_cond_t**cond);
int pthread_cond_broadcast(pthread_cond_t**cond);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;函数功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;条件变量的通知方法有两种：&lt;/p&gt;
&lt;p&gt;1. 根据线程的优先级和调度策略唤醒一个等待条件变量的线程的 pthread_cond_signal () 函数&lt;/p&gt;
&lt;p&gt;2. 唤醒所有等待条件变量的线程的 pthread_cond_broadcast () 函数。&lt;/p&gt;
&lt;h4 id=&#34;24-条件变量的等待&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-条件变量的等待&#34;&gt;#&lt;/a&gt; 2.4 条件变量的等待&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int pthread_cond_wait(pthread_cond_t**cond，pthread_mutex_t* *mutex);
int pthread_cond_timedwait(pthread_cond_t*cond，pthread_mutex_t *mutex,const struct timespec *abstime);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;pthread_cond_wait&lt;/strong&gt; 函数功能：调用该函数的线程会阻塞等待&lt;/p&gt;
&lt;p&gt;当没有容器内数据了，用于&lt;strong&gt;阻塞等待生产者生产数据，直到符合某个条件变量&lt;/strong&gt;即被其他线程调用 pthread_cond_signal 唤醒才继续执行。函数的内部实现机制是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1. 当调用该函数前，一般会判断某个临界资源是否满足要求，如果不满足，则调用该函数，函数内部实现：&lt;strong&gt;将该线程挂起放在条件变量的请求队列，然后解除互斥锁&lt;/strong&gt;（以便生产者拿到锁去生产数据）；&lt;/li&gt;
&lt;li&gt;2. 当该&lt;strong&gt;线程被唤醒不阻塞时，会再次对互斥锁加锁&lt;/strong&gt;，然后返回，从而继续判断临界资源是否满足条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pthread_cond_timedwait 函数功能：等待多长时间，调用了这个函数，线程会阻塞，直到指定时间结束&lt;/p&gt;
&lt;h4 id=&#34;25-条件变量为什么要和互斥锁结合使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-条件变量为什么要和互斥锁结合使用&#34;&gt;#&lt;/a&gt; 2.5 条件变量为什么要和互斥锁结合使用&lt;/h4&gt;
&lt;p&gt;我个人的理解是，&lt;strong&gt;条件变量主要是使用一种通知机制来让各个线程来处理临界资源，但是为了保证线程安全，需要使得各个线程来互斥的访问临界资源&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;如果没有互斥锁，则：&lt;/p&gt;
&lt;p&gt;1. 调用条件变量通知函数唤醒所有的等待线程的话，很有可能导致临界资源被多个线程重复处理，甚至导致错误的发生，因此为了方便，每个线程被唤醒返回 pthread_cond_wait () 函数时，一般会对互斥锁加锁，这样其他被唤醒的线程只能阻塞等待此线程释放该互斥锁，从而实现互斥的对于临界资源的访问。&lt;/p&gt;
&lt;p&gt;2. 当此&lt;strong&gt;线程处理完临界资源后&lt;/strong&gt;会在此调用 pthread_cond_wait () 函数，&lt;strong&gt;将该线程挂起至等待条件变量队列&lt;/strong&gt;，然后释放互斥锁，让其他线程被唤醒继续处理该临界资源。&lt;/p&gt;
&lt;h3 id=&#34;问题集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题集&#34;&gt;#&lt;/a&gt; 问题集：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;pthread_cond_wait内部为什么要解锁？&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果 while 或者 if 判断的时候，满足执行条件，线程便会调用 pthread_cond_wait 阻塞自己，此时它还在持有锁，如果他不解锁，那么其他线程将会无法访问公有资源。&lt;/p&gt;
&lt;p&gt;具体到 pthread_cond_wait 的内部实现，当 pthread_cond_wait 被调用线程阻塞的时候，pthread_cond_wait 会自动释放互斥锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;为什么要把调用线程放入条件变量的请求队列后再解锁？&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程是并发执行的，如果在把调用线程 A 放在等待队列之前，就释放了互斥锁，这就意味着其他线程比如线程 B 可以获得互斥锁去访问公有资源，这时候线程 A 所等待的条件改变了，但是它&lt;strong&gt;没有被放在等待队列上，导致 A 忽略了等待条件被满足的信号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;倘若在线程 A 调用 pthread_cond_wait 开始，到把 A 放在等待队列的过程中，都持有互斥锁，其他线程无法得到互斥锁，就不能改变公有资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;为什么最后还要加锁？&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将线程放在条件变量的请求队列后，将其解锁，此时等待被唤醒，若成功竞争到互斥锁，再次加锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;为什么判断线程执行的条件用while而不是if？&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，在多线程资源竞争的时候，在一个使用资源的线程里面（消费者）判断资源是否可用，不可用，便调用 pthread_cond_wait，在另一个线程里面（生产者）如果判断资源可用的话，则调用 pthread_cond_signal 发送一个资源可用信号。&lt;/p&gt;
&lt;p&gt;在 wait 成功之后，资源就一定可以被使用么？答案是否定的，如果同时有两个或者两个以上的线程正在等待此资源，wait 返回后，资源可能已经被使用了。&lt;/p&gt;
&lt;p&gt;再具体点，&lt;strong&gt;有可能多个线程都在等待这个资源可用的信号，信号发出后只有一个资源可用&lt;/strong&gt;，但是有 A，B 两个线程都在等待，B 比较速度快，获得互斥锁，然后加锁，消耗资源，然后解锁，&lt;strong&gt;之后 A 获得互斥锁，但 A 回去发现资源已经被使用了&lt;/strong&gt;，它便有两个选择，一个是去访问不存在的资源，另一个就是继续等待，那么&lt;strong&gt;继续等待下去的条件就是使用 while&lt;/strong&gt;，要不然使用 if 的话 pthread_cond_wait 返回后，就会顺序执行下去。&lt;/p&gt;
&lt;p&gt;所以，在这种情况下，应该使用 while 而不是 if:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;while(resource == FALSE)  
pthread_cond_wait(&amp;amp;cond, &amp;amp;mutex);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果只有一个消费者，那么使用 if 是可以的。&lt;/p&gt;
&lt;h2 id=&#34;信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号量&#34;&gt;#&lt;/a&gt; 信号量&lt;/h2&gt;
&lt;p&gt;本身不能保证线程安全，需要和互斥锁一起使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号量初始化&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int sem_init(sem_t *sem,int pshared,unsigned int value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;value：设置信号量中的值，表示可用的资源个数。类比灯泡用一个灭一个 sem：信号量变量的地址 pshared：代表这个变量是用在线程之间（0）还是进程之间（非 0）&lt;/p&gt;
&lt;p&gt;** 加锁一个信号量：**&lt;strong&gt; 阻塞函数 - 对信号量值减一&lt;/strong&gt;：当调用的信号量 sem 中的值 value 为 0 时才阻塞，&lt;strong&gt; 调用一次 wait，value 值 - 1&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int sem_wait(sem_t *sem);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解锁一个信号量&lt;/strong&gt;：&lt;strong&gt;增加信号量的值&lt;/strong&gt;：&lt;strong&gt;调用一次 value+1&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int sem_post(sem_t *sem);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;释放资源&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int sem_destroy(sem_t *sem);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/%E5%8D%8A%E5%90%8C%E6%AD%A5-%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
            <title>半同步/半反应堆线程池</title>
            <link>https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/%E5%8D%8A%E5%90%8C%E6%AD%A5-%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Tue, 15 Nov 2022 11:17:40 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;两种高效的事件处理事件分发模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两种高效的事件处理事件分发模式&#34;&gt;#&lt;/a&gt; 两种高效的事件处理（事件分发）模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reactor 模式（反应堆）—— 依赖同步 IO，主线程中处理 IO，监听就绪事件的发生，然后通知工作线程进行读写数据（IO 操作）+ 读写完成后的处理逻辑&lt;/li&gt;
&lt;li&gt;Proactor 模式（前摄器）—— 依赖异步 IO，主线程和内核处理全部的 IO（包括读写数据），监听完成事件（异步 IO 产生的是完成信号，即信号产生时读写已经完成）的发生，然后通知工作线程进行读写完成后的处理逻辑&lt;/li&gt;
&lt;li&gt;模拟 Proactor 模式 —— Linux 中没有真正的异步 IO，AIO（aio_read 等）内部是用 pthread 模拟的（多线程 + 请求队列 + 信号等）。故使用同步 IO 来模拟 Proactor 的模式，即称为模拟 Proactor。
&lt;ul&gt;
&lt;li&gt;模拟 Proactor 与 Proactor 的区别是：前者的数据读写由用户完成，后者的数据读写由内核完成；&lt;/li&gt;
&lt;li&gt;模拟 Proactor 与 Proactor 的共同点是：通知给工作线程的都是完成事件，以此避免了工作线程中的读写操作（IO 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;两种高效的并发模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两种高效的并发模式&#34;&gt;#&lt;/a&gt; 两种高效的并发模式：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;半同步 / 半异步模式&lt;/li&gt;
&lt;li&gt;领导者 / 追随者模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并发模式：多个逻辑单元和 IO 处理单元之间协调完成任务的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IO 模型中：同步 / 异步
&lt;ul&gt;
&lt;li&gt;同步 / 异步区分的是内核向应用程序通知的是何种 IO 事件（就绪 / 完成事件），以及该由谁来完成 IO 读写（应用程序还是内核）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并发模式中：同步 / 异步
&lt;ul&gt;
&lt;li&gt;同步是指程序完全按照&lt;strong&gt;代码序列的顺序&lt;/strong&gt;执行&lt;/li&gt;
&lt;li&gt;异步是指程序的执行需要由&lt;strong&gt;系统事件来驱动&lt;/strong&gt;（中断、信号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;服务器适合半同步 / 半异步模式！ 同步线程：按照同步方式运行的线程 异步线程效率更高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;半同步半异步模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半同步半异步模式&#34;&gt;#&lt;/a&gt; 半同步 / 半异步模式&lt;/h2&gt;
&lt;p&gt;同步线程用于处理客户逻辑&lt;/p&gt;
&lt;p&gt;异步线程用于处理 IO 事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步线程监听到客户请求就将其封装成请求对象插入到请求队列&lt;/li&gt;
&lt;li&gt;请求队列通知某个工作在同步模式的工作进程来读取并处理该请求对象&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;具体选择哪个工作线程取决于请求队列的设计：轮流选取 Round Robin、条件变量 + 信号量随机选取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;半同步 / 半异步模式 —— 同步线程与异步线程结合的模式&lt;/li&gt;
&lt;li&gt;Reactor 和 Proactor 都属于半同步 / 半异步模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;半同步 / 半异步模式中异步线程怎么分发任务给同步线程呢？（即怎么协同处理事件呢）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 Reactor 模式分发 —— 半同步 / 半反应器模式&lt;/li&gt;
&lt;li&gt;用模拟 Proactor 模式分发 —— 半同步 / 半模拟前摄器模式（这个模式是我自己造的，为了分清楚概念而已）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从游双老师书上的描述来看，Reactor 和 Proactor 模式应该都是属于半同步 / 半异步模式的（Reactor 和 Proactor 都是一个异步线程分发任务给其他同步线程，与不分发任务的领导者 / 追随者模式有着本质上的不同，它们显然都是半同步 / 半异步的模式）。&lt;/li&gt;
&lt;li&gt;因此，Reactor 和 Proactor 模式又像是 “半同步 / 半异步模式” 的子分类。书上是这样描述的：“结合考虑两种事件处理模式… 半同步 / 半异步模式就存在多种变体，其中一种就是半同步 / 半反应堆模式”，意思就是 “半同步 / 半异步模式 + Reactor 模式 = 半同步 / 半反应堆模式（half-sync/half-reactive）”&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;半同步半反应堆模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半同步半反应堆模式&#34;&gt;#&lt;/a&gt; 半同步 / 半反应堆模式&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/%E5%8D%8A%E5%90%8C%E6%AD%A5-%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/image.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;异步线程只有一个由主线程充当，负责监听所有 socket 上的事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果监听 socket 上有&lt;strong&gt;可读事件发生&lt;/strong&gt;，即有新的连接请求到来，接收连接并向 epoll 内核事件表注册该 socket 上的读写事件。&lt;/li&gt;
&lt;li&gt;如果&lt;strong&gt;连接&lt;/strong&gt; socket 上有&lt;strong&gt;读写事件发生&lt;/strong&gt;，即有新的客户请求到来或有数据要发送至客户端。 模拟 Proactor 中：主线程首先循环读取数据完毕，随后将读取的数据封装成请求对象&lt;strong&gt;插入请求队列&lt;/strong&gt;中。&lt;/li&gt;
&lt;li&gt;所有工作线程睡眠在请求队列上，当有任务到来时它们将通过竞争获取任务的接管权，从请求队列中取出任务对象直接处理无需读写操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;半同步 / 半反应堆模式缺点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;主线程和工作线程共享请求队列，因此主线程往请求队列中添加任务或工作线程从请求队列中取出任务都需要对请求队列加锁保护。浪费 CPU 时间&lt;/li&gt;
&lt;li&gt;每个工作线程在同一时间只能处理一个客户请求，如果客户数量 &amp;gt; 工作线程数→导致请求队列中任务堆积，客户端响应速度会越来越慢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;改进方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主线程只负责监听 socket，连接 socket 由工作线程管理&lt;/p&gt;
&lt;p&gt;当有新连接到来时，主线程接收，并通过&lt;strong&gt;向管道写数据的方式&lt;/strong&gt;将新返回的连接发给某个工作线程，该连接 socket 上的任何 IO 操作都由工作线程处理。工作线程检测到有数据可读就将连接 socket 上的读写事件注册到&lt;strong&gt;自己的 epoll 内核事件表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/%E5%8D%8A%E5%90%8C%E6%AD%A5-%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-16684823541241.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;领导者追随者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#领导者追随者模式&#34;&gt;#&lt;/a&gt; 领导者 / 追随者模式&lt;/h3&gt;
&lt;p&gt;含义：多个工作线程轮流获得事件源集合，轮流监听、分发并处理事件的一种模式。 包含组件：句柄集、线程集、事件处理器、具体事件处理器&lt;/p&gt;
&lt;p&gt;任意时间点都只有一个领导者线程：负责监听 IO 事件，其他线程都是追随者，它们休眠在线程池等待成为新的领导者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前领导者如果检测到 IO 事件，首先从线程池推选出新的领导者线程，然后处理 IO 事件&lt;/li&gt;
&lt;li&gt;此时新领导者等待新的 IO 事件，旧领导者处理 IO 事件，二者形成并发&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;有限状态机用于http请求的读取和分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有限状态机用于http请求的读取和分析&#34;&gt;#&lt;/a&gt; 有限状态机：用于 HTTP 请求的读取和分析&lt;/h2&gt;
&lt;p&gt;之前探讨了关于服务器的 IO 处理单元、请求队列和逻辑单元之间协调完成任务的各种模式。&lt;/p&gt;
&lt;p&gt;现在介绍逻辑单元内部高效编程方法：有限状态机：&lt;/p&gt;
&lt;p&gt;主状态机有三种可能状态：当前正在分析&lt;strong&gt;请求行&lt;/strong&gt;、当前正在分析&lt;strong&gt;头部字段&lt;/strong&gt;、当前正在分析&lt;strong&gt;消息体&lt;/strong&gt; 从状态机有三种可能状态（行的读取状态）：&lt;strong&gt;读到一个完整的行&lt;/strong&gt;、行出错、行数据尚不完整&lt;/p&gt;
&lt;p&gt;从状态机用于解析出一行内容，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断 HTTP 头部结束的一句是遇到一个空行，该空行仅包含一对回车换行符 (\r  和  \n)。&lt;/li&gt;
&lt;li&gt;如果一次读操作没有读入 HTTP 请求的整个头部，即没有遇到空行那么必须等待客户继续写数据再次读入，返回 LINE_OPEN。因此每完成一次读操作就需要分析读入的数据是否有空行。&lt;/li&gt;
&lt;li&gt;在寻找空行的过程中，我们可以同时完成对整个 HTTP 请求头部的分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主状态机在内部调用从状态机:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分析从状态机，parse_line 函数：它从 buffer 中解析出一个行。从状态机初始状态是 LINE_OK，原始驱动力来自于 buffer 中新到达的客户数据。&lt;/li&gt;
&lt;li&gt;在 main 函数中循环调用 recv 函数往 buffer 中读入客户数据，每次成功读取数据后就调用 process_read 函数来分析新读入的数据。
&lt;ul&gt;
&lt;li&gt;process_read 作为分析 http 请求的入口函数&lt;/li&gt;
&lt;li&gt;process_read 函数首先调用 parse_line 函数来获取一个行，当读取到一个完整的行后 parse_line 函数就可以将这行内容交给 process_read 函数中的主状态机来处理了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/%E5%8D%8A%E5%90%8C%E6%AD%A5-%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-16684823541242.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;parse_line&lt;strong&gt; 只是提取出一行&lt;/strong&gt;，并不解析其中内容&lt;/p&gt;
&lt;p&gt;parse_request_line&lt;strong&gt; 解析 http 请求行，获得请求方法，目标 url 及 http 版本号&lt;/strong&gt; parse_headers&lt;strong&gt; 解析 http 请求的一个头部信息&lt;/strong&gt; parse_content&lt;strong&gt; 解析 http 请求的消息体&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主状态机初始状态为 CHECK_STATE_REQUESTLINE&lt;/li&gt;
&lt;li&gt;如果主状态机当前状态为 CHECK_STATE_REQUESTLINE，说明 parse_line 解析出的行是请求行，调用 parse_request_line 函数处理，分析完请求后将主状态机设置为 CHECK_STATE_HEADER 实现状态转移&lt;/li&gt;
&lt;li&gt;如果主状态机当前状态为 CHECK_STATE_HEADER，说明 parse_line 解析出的行是请求头部，调用 parse_headers 函数处理，并将主状态机设置为 CHECK_STATE_CONTENT&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程&#34;&gt;#&lt;/a&gt; 流程：&lt;/h3&gt;
&lt;p&gt;浏览器端发出 HTTP 请求报文，服务器端接收该报文并&lt;strong&gt;调用 process_read 对其进行解析&lt;/strong&gt;，根据解析结果 HTTP_CODE 做出响应，process_write () 填写相应的回复到缓冲区。&lt;/p&gt;
&lt;h2 id=&#34;池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#池&#34;&gt;#&lt;/a&gt; 池&lt;/h2&gt;
&lt;p&gt;并发编程：进程池、线程池&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当需要一个工作线程、进程来处理新到来的客户请求时可以直接从进程池、线程池中取得一个执行实体，无序动态调用 fork 或 pthread_create 函数创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连接池&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;连接池是服务器预先和数据库程序建立的一组连接的集合。 当某个逻辑单元需要访问数据库时，它可以直接从连接池中取得一个连接的实体并使用，完成访问后逻辑单元再将该连接还给连接池&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
            <title>IO多路复用</title>
            <link>https://aristotlednzk.github.io.com/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/" />
            <category term="Linux高性能服务器编程" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Tue, 15 Nov 2022 11:16:14 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;epoll_create 创建一个新的 epoll 实例，返回指向该实例的描述符 epollfd 用来调用所有 epoll 相关接口。在&lt;strong&gt;内核中创建了一个数据&lt;/strong&gt;，这个数据中有两个比较重要的数据，一个是&lt;strong&gt;需要检测的文件描述符的信息&lt;/strong&gt;（红黑树），还有一个是&lt;strong&gt;就绪列表&lt;/strong&gt;，&lt;strong&gt;存放检测到数据发生改变的文件描述符信息&lt;/strong&gt;（双向链表）。&lt;/p&gt;
&lt;p&gt;当 epollfd 不再使用时，需要调用 close () 关闭，当指向 epoll 的文件描述符关闭后内核会摧毁 epoll 实例并释放相关资源。&lt;/p&gt;
&lt;p&gt;epoll_ctl: 将哪个客户端 fd 的哪些事件 event 交给哪个 epoll (epollfd) 来管理（增删改）&lt;/p&gt;
&lt;p&gt;什么时候将就绪的客户端 fd 添加到就绪事件链表？ 当内核监听到有&lt;strong&gt;就绪事件中断&lt;/strong&gt;时就会将就绪事件&lt;strong&gt;从红黑树迁移一份到就绪事件链表&lt;/strong&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image-16684834064061.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/11/15/cpp/%E9%A1%B9%E7%9B%AE/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image-16684834064062.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/15/computer-science/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
            <title>单例模式</title>
            <link>https://aristotlednzk.github.io.com/2022/11/15/computer-science/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/categories/computer-science/" />
            <category term="设计模式" scheme="https://aristotlednzk.github.io.com/categories/computer-science/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" />
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/tags/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/" />
            <category term="设计模式" scheme="https://aristotlednzk.github.io.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" />
            <pubDate>Tue, 15 Nov 2022 11:07:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;考察：要求实现各种变形，懒汉式、饿汉式&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprek56SXpOakk0Tnc9PSZhbXA7bWlkPTIyNDc0ODU3MjImYW1wO2lkeD0xJmFtcDtzbj1lMzE1YTlmM2U4OTNkYjk4Mjc2YTE4MTE3YTI0NjEyZSZhbXA7c291cmNlPTQxI3dlY2hhdF9yZWRpcmVjdA==&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzkzNzIzNjI4Nw==&amp;amp;mid=2247485722&amp;amp;idx=1&amp;amp;sn=e315a9f3e893db98276a18117a24612e&amp;amp;source=41#wechat_redirect&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有时候我们想让一个类能够保证自己仅仅能生成一个实例化对象  (对应上面的窗口类去保证自己创建对象时候的唯一性)  ，并提供一个访问它的全局访问点，该实例被所有程序模块共享。&lt;/p&gt;
&lt;h2 id=&#34;单例模式的设计思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单例模式的设计思路&#34;&gt;#&lt;/a&gt; &lt;strong&gt;单例模式的设计思路&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;应该怎么保证上面窗口类在按钮类的回调函数里面调用的时候&lt;br /&gt;
能够 不用 if else 判断 而由窗口类对象自己去保证唯一性呢？&lt;/p&gt;
&lt;p&gt;第一步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先应该不能让外界调用new的方式去创建他的对象 因为如果这样的话   外部还是可以产生多个对象了。
我们还是得引入if else来判断 ,
所以我们就应该阻止其他程序建立对象,   阻止的方式就是把构造函数声明为私有
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二步&lt;/p&gt;
&lt;p&gt;其次应该让这个窗口类对象应在作为静态成员对象声明在自己类的内部声明 因为这样的话 我们就可以在类里面实现对这个对象的唯一性判断 (由于它是静态的 各个类对象之间会共有这一个成员对象)&lt;/p&gt;
&lt;p&gt;第三步&lt;/p&gt;
&lt;p&gt;最后 应该在判断完这个静态成员类对象唯一以后应该有一个全局唯一接口 (静态成员函数) 让外面访问这个对象&lt;/p&gt;
&lt;p&gt;总结一下实现步骤： 1.&lt;strong&gt; 私有化构造函数，不让其他程序创建的对象初始化。&lt;/strong&gt; 2.&lt;strong&gt; 在本类中 new 一个静态本类对象。&lt;/strong&gt; 3. 定义一个静态成员函数，它的功能是让其他程序可以通过这个函数获取到本类的对象。&lt;/p&gt;
&lt;h3 id=&#34;饿汉式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#饿汉式&#34;&gt;#&lt;/a&gt; 饿汉式：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 资源的占用:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;饿汉模式 在类创建的就得 new 好它的静态成员对象 故占用空间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 类中静态成员 初始化顺序不确定所导致的异常.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是说类中的两个静态成员&lt;/p&gt;
&lt;p&gt;getInstance 和 Instance 不同编译单元中的初始化顺序是未定义的，&lt;/p&gt;
&lt;p&gt;如果在 Instance 初始化完成之前调用&lt;/p&gt;
&lt;p&gt;getInstance () 方法会返回一个未定义的实例&lt;/p&gt;
&lt;p&gt;由于要进行线程同步，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现，可以实现更好的性能。这是以空间换时间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Singleton
&amp;#123;
    //1.声明构造函数为私有
    private:
    Singleton()&amp;#123;&amp;#125;;
    //2.声明一个本类的对象
    private:
    static Singleton* instance;
    //3.对外提供本类对象的公共接口
    public:
    static Singleton* getInstance() 
    &amp;#123;
        return instance;
    &amp;#125;
&amp;#125;;
Singleton* Singleton::instance=new Singleton;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;静态成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态成员函数可以在类内直接定义也可以在类外定义（初始化 / 实现），在类外实现时不需要加 static。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;静态成员函数只能访问静态数据成员和静态成员函数，普通成员函数可以访问静态成员函数和静态数据成员&lt;/li&gt;
&lt;li&gt;静态成员函数属于类，不属于任意一个类对象&lt;/li&gt;
&lt;li&gt;静态成员函数没有 this 指针&lt;/li&gt;
&lt;li&gt;可以使用 &amp;lt;类名&amp;gt;::&amp;lt; 函数名 &amp;gt; 访问，也可由类对象使用 (./-&amp;gt;) 访问&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;第一条解释：不能在类声明中初始化静态成员变量，因为声明描述了如何分配内存，但不分配内存。静态类成员位于 ** 静态存储区，*&lt;em&gt; 并 *&lt;em&gt; 不是类对象的组成部分&lt;/em&gt;&lt;/em&gt;，所以需要在类声明之外使用单独的语句进行初始化。在类声明中不可初始化静态数据成员的一种例外情况是，静态数据成员为整型或枚举型 const。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;静态数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;对于类静态数据成员，无论有多少个该类的对象，该静态数据成员在内存中只有一份拷贝 (其他普通数据成员，每个类对象都有自己的内存拷贝)，该静态数据成员由所有该类对象共享&lt;/li&gt;
&lt;li&gt;静态数据成员存储在全局数据区，在定义时分配存储空间，程序运行结束时销毁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态数据成员不能再类中定义和初始化，只能在类中声明，在类外进行定义和初始化，默认初始化为 0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;静态数据成员的初始化为 &amp;lt;类型名&amp;gt; &amp;lt; 类名 &amp;gt;::&amp;lt; 变量名 &amp;gt; = &amp;lt; 值 &amp;gt;&lt;/li&gt;
&lt;li&gt;静态数据成员遵从 public private protected 访问规则&lt;/li&gt;
&lt;li&gt;静态数据成员可以直接使用类名加作用域运算符 (::) 直接访问 &amp;lt; 类名 &amp;gt;::&amp;lt; 变量名 &amp;gt;(访问规则允许的情况下)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;懒汉式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#懒汉式&#34;&gt;#&lt;/a&gt; 懒汉式：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Singleton
&amp;#123;
    //1.声明构造函数为私有
    private:
    Singleton()&amp;#123;&amp;#125;;
    //2.声明一个本类的对象
    private:
    static Singleton* instance;
    //3.对外提供本类对象的公共接口
    public:
    static Singleton* getInstance() 
    &amp;#123;
        if(instance==NULL)
        &amp;#123;
            instance=new Singleton;
        &amp;#125;
    return instance;
    &amp;#125;
&amp;#125;;
Singleton* Singleton::instance=NULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1. 内存泄露&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①析构函数没有被执行：&lt;/p&gt;
&lt;p&gt;程序退出时，析构函数没被执行.&lt;/p&gt;
&lt;p&gt;这在某些设计不可靠的系统上会导致资源泄漏，&lt;/p&gt;
&lt;p&gt;想一想上面的 Instance 指向的空间什么时候释放呢？&lt;/p&gt;
&lt;p&gt;更严重的问题是，该实例的析构函数什么时候执行？&lt;/p&gt;
&lt;p&gt;如果在类的析构行为中有必须的操作，&lt;/p&gt;
&lt;p&gt;比如关闭文件，释放外部资源，那么上面的代码无法实现这个要求。&lt;/p&gt;
&lt;p&gt;我们需要一种方法，正常的删除该实例。&lt;/p&gt;
&lt;p&gt;**2. 线程安全  **&lt;/p&gt;
&lt;p&gt;②线程不安全：我们注意到在 static Singleton* getInstance () 方法中，&lt;br /&gt;
是通过 if 语句判断 静态实例变量 是否被初始化来觉得是否进行初始化，&lt;br /&gt;
那么在多线程中就有可能出现多次初始化的问题。&lt;br /&gt;
比方说，有两个多线程同时进入到这个方法中，&lt;br /&gt;
同时执行 if 语句的判断，&lt;br /&gt;
那么就会出现两次两次初始化静态实例变量的情况。&lt;/p&gt;
&lt;h3 id=&#34;懒汉式线程安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#懒汉式线程安全&#34;&gt;#&lt;/a&gt; 懒汉式（线程安全）：&lt;/h3&gt;
&lt;p&gt;1.&lt;strong&gt; 用双重检测锁 DLC 解决线程安全&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Singleton 
&amp;#123; 
  public: 
  static pthread_mutex_t mutex; 
  static Singleton* getInstance(); 
  protected: //定义线程互斥锁
  Singleton() 
  &amp;#123; 
      pthread_mutex_init(&amp;amp;mutex); 
  &amp;#125; 
  private: 
  static Singleton* p; 
&amp;#125;; 
  pthread_mutex_t Singleton::mutex; //初始化互斥锁
  Singleton* Singleton::p = NULL; //类外初始化静态指针：通过作用域调用
  Singleton* Singleton::getInstance() //获取实例
  &amp;#123; 
      if (NULL == p) 
      &amp;#123; 
          pthread_mutex_lock(&amp;amp;mutex); 
          if (NULL == p) 
              p = new Singleton(); 
          pthread_mutex_unlock(&amp;amp;mutex); 
      &amp;#125; 
      return p; 
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 内部静态变量实现懒汉模式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Singleton 
&amp;#123; 
    public: 
    static pthread_mutex_t mutex; //静态成员：互斥锁变量
    static Singleton* getInstance(); //静态成员函数
    protected: 
    Singleton() 
    &amp;#123; 
        pthread_mutex_init(&amp;amp;mutex); 
    &amp;#125; 
&amp;#125;; 
pthread_mutex_t Singleton::mutex; //类外初始化
Singleton* Singleton::getInstance() //类外定义/实现
**&amp;#123; **
    pthread_mutex_lock(&amp;amp;mutex); 
**    static singleton ss; **
    pthread_mutex_unlock(&amp;amp;mutex); 
**    return &amp;amp;ss; **
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单工厂模式：&lt;/p&gt;
&lt;p&gt;1. 实现了客户端和创建对象的工厂类打交道（传入参数让工厂直到应该创建什么类型的对象），与具体实现类的解耦。&lt;br /&gt;
2. 增加新的功能是通过修改源代码实现，不符合开闭原则&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/10/cpp/%E9%A1%B9%E7%9B%AE/Tinywebserver%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</guid>
            <title>Tinywebserver项目记录</title>
            <link>https://aristotlednzk.github.io.com/2022/11/10/cpp/%E9%A1%B9%E7%9B%AE/Tinywebserver%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Thu, 10 Nov 2022 18:49:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;partimywebserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#partimywebserver&#34;&gt;#&lt;/a&gt; PartⅠ：mywebserver&lt;/h1&gt;
&lt;h2 id=&#34;一-lockerhlockercpp-与tiny相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-lockerhlockercpp-与tiny相同&#34;&gt;#&lt;/a&gt; 一、locker.h，locker.cpp （与 Tiny 相同）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;互斥锁类 locker&lt;/strong&gt;&lt;br /&gt;
&amp;lt;u&amp;gt; 用于内存池 &amp;lt;/u&amp;gt;：请求队列（工作队列）的互斥访问&lt;/p&gt;
&lt;p&gt;向工作队列中添加任务 append () 时，会访问 / 修改请求队列&lt;/p&gt;
&lt;p&gt;线程中运行的主要逻辑：从请求队列中取出请求并执行其 process () 函数，故会访问 / 修改请求队列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件变量类 cond&lt;/strong&gt;&lt;br /&gt;
 项目中没有用到&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信号量类 sem&lt;/strong&gt;&lt;br /&gt;
&amp;lt;u&amp;gt; 用于内存池 &amp;lt;/u&amp;gt;：&lt;strong&gt;请求队列 —— 生产者消费者模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;append () 向请求队列中添加请求，则信号量 ++（post ()）&lt;/p&gt;
&lt;p&gt;run () 从请求队列中取出请求，则信号量–（wait ()）&lt;/p&gt;
&lt;h2 id=&#34;二-threadpoolh-线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-threadpoolh-线程池&#34;&gt;#&lt;/a&gt; 二、threadpool.h 线程池&lt;/h2&gt;
&lt;p&gt;创建多个线程&lt;br /&gt;
创建一定数量（m_thread_number）的线程（pthread_create ()），线程的入口函数 worker () 需要是静态函数，原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5Mjc0NTAxL2FydGljbGUvZGV0YWlscy8xMTcwODMxNzU/dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLWJhaWR1anNfYmFpZHVsYW5kaW5nd29yZC0wJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNDI0Mg==&#34;&gt;https://blog.csdn.net/qq_39274501/article/details/117083175?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;amp;spm=1001.2101.3001.4242&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUEI4dk13aThzQjRKdzNXekFLcFdPUQ==&#34;&gt;https://mp.weixin.qq.com/s/PB8vMwi8sB4Jw3WzAKpWOQ&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类中调用 pthread_create () 时，类的成员函数作为 pthread_create () 的参数时，必须是静态函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为类的成员函数有一个隐藏的参数 ——this 指针，而线程的入口函数必须是接受一个 void 指针作为参数，故入口函数的参数中有一个隐藏的 this 指针是不允许的。为了解决矛盾，我们使用 static 成员函数，其独立于实例，参数中不会有 this 指针，故其可以用作线程的入口函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将线程设为脱离&lt;/strong&gt;&lt;br /&gt;
创建线程后，将线程设为脱离（pthread_detach ()），这是为了自动回收线程资源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pthread_detach()的作用——当线程终止时，线程的资源将会立即被回收，而不用等待另一个线程调用pthread_join&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;/* Indicate that the thread TH is never to be joined with PTHREAD\_JOIN.   The resources of TH will therefore be freed immediately when it   terminates, instead of waiting for another thread to perform PTHREAD\_JOIN   on it.  */&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;extern int pthread\_detach (pthread\_t \_\_th) \_\_THROW;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求队列（工作队列）&lt;/strong&gt;&lt;br /&gt;
请求队列 —— 以队列形式组织，其实现了：&lt;strong&gt;将主线程和工作线程解耦&lt;/strong&gt;（主线程向请求队列中添加任务，工作线程通过竞争来取得任务并执行任务）&lt;/p&gt;
&lt;p&gt;请求队列的访问：由于会有多个线程对其进行访问 / 修改，故通过&lt;strong&gt;互斥锁实现互斥访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作线程竞争请求队列中的任务：&lt;strong&gt;通过信号量实现生产者 / 消费者模型&lt;/strong&gt;，任务交给哪个线程执行是随机的。（也可以用 Round Robin 算法让线程轮流获取任务）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作线程们运行的函数&lt;/strong&gt;&lt;br /&gt;
 worker ()-&amp;gt;run ()&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;worker ()：只是一个桥梁，静态成员函数，用作 pthread_create () 的参数；其中只是调用线程的主要逻辑 run ()&lt;/li&gt;
&lt;li&gt;run ()：类的成员函数，需要静态成员函数 worker () 作为媒介来成为线程的工作函数。其主要逻辑：&amp;lt;u &amp;gt; 竟态获取请求队列中的任务 &amp;lt;/u&amp;gt;，通过调用请求类的 process 函数处理请求，process 函数调用 process_read 函数和 process_write 函数分别完成报文解析与报文响应两个任务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;只实现了 Proactor 模式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;run () 中只执行 process () 过程，数据的读写是在主线程 main () 中完成的&lt;/li&gt;
&lt;li&gt;reactor 模式的实现 —— 把数据读写放到工作线程中完成就行了（参考 Tinywebserver）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三-maincpp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-maincpp&#34;&gt;#&lt;/a&gt; 三、main.cpp&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;网络编程常规步骤&lt;/strong&gt;&lt;br /&gt;
略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;循环获取就绪事件并处理&lt;/strong&gt;&lt;br /&gt;
这便是主线程的主要工作逻辑。&lt;/p&gt;
&lt;p&gt;由于是 Proactor 模式，故可读可写事件发生时，main 中将数据读入 / 写出完毕，然后再通知工作线程进行后续逻辑处理&lt;/p&gt;
&lt;p&gt;由于该项目中，写完成后，没有后续的处理逻辑，故只有读完成后才会通知工作线程（将任务 append 到线程池的请求队列）&lt;/p&gt;
&lt;p&gt;项目中只实现了 LT+ONESHOT 模式。虽然是 LT 模式，但是由于是 ONESHOT，故也要用非阻塞 IO 循环读取以保证将 TCP 缓存中的数据全部读出。（在 ET 模式下，事件触发后需要将缓冲区中的数据完全读完，否则会陷入死锁，故必须要用非阻塞 IO 循环读取）。&lt;br /&gt;
为什么必须要用 ONESHOT 呢？（ONESHOT 的作用）——《Linux 高性能服务器编程》P157：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使是用 ET 模式，一个 socket 上的事件还是可能被触发多次（LT 模式则更是如此），这在并发编程中就会引起一个问题：socket 上的数据被获取后，一个线程开始处理数据（此时 HTTP 请求报文可能并不完整）；而在处理数据的过程中，又有新的数据可读（EPOLLIN 再次被触发），此时另一个线程被唤醒去处理新到来的数据。这就会出现同时有两个线程操作同一个 socket 的情况，这显然是不被期望的。&lt;/li&gt;
&lt;li&gt;正常情况应该是：数据到来–&amp;gt; 数据被读入 socket 对应的 http_conn 类对象 H 中–&amp;gt; 唤醒一个线程去操作这个类对象 H (处理数据)，数据处理过程中不应再次触发事件，避免又有另一个线程开始对该类对象 H 进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四-http_connhhttp_conncpp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-http_connhhttp_conncpp&#34;&gt;#&lt;/a&gt; 四、http_conn.h，http_conn.cpp&lt;/h2&gt;
&lt;h3 id=&#34;主要逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要逻辑&#34;&gt;#&lt;/a&gt; 主要逻辑&lt;/h3&gt;
&lt;p&gt;** 处理 HTTP 请求：** 通过主从状态机&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;process_read ()—— 正常流程下，process_read () 返回的是 do_request () 的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parse_line()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_line()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parse_request_line()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parse_hearders()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parse_content()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;do_request ()：根据 HTTP 请求的解析结果，进行处理得到后续生成响应所需的前提状态&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先对 GET 请求和不同 POST 请求（登录，注册，请求图片，视频等等）做不同的预处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取请求资源的信息，并判断请求的合法性：分析目标文件的属性，若目标文件存在、对所有用户可读且不是目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若合法：则将文件只读地打开，使用 mmap 将其映射到内存地址 m_file_address 处，并告诉调用者获取文件成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;处理 CGI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据标志判断是登录检测还是注册检测&lt;/p&gt;
&lt;p&gt;将用户名和密码提取出来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成 HTTP 响应数据并放入发送缓存&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process_write ()—— 根据 process_read ()（do_request ()）获得的文件合法性，生成响应报文放入发送缓冲区，并设置发送缓冲区的标志信息&lt;/li&gt;
&lt;li&gt;process_write () 处理完成之后，注册 EPOLLOUT 事件，等待主线程调用 write () 发送缓冲区中的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write ()—— 采用分散写 writev ()，客户请求的资源（响应体）和 process_write () 生成的报文数据（状态行和响应头），分别放在两块内存中，前者在文件映射到的内存中，后者在发送缓存中&lt;/li&gt;
&lt;li&gt;setnonblocking ()、addfd ()、removefd ()、modfd () 等 socket 编程常用函数也定义在 http_conn.cpp 中（因为类中也会用到这些函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;有限状态机 - 处理 HTTP 请求中使用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主状态机：当前解析到哪部分（请求首行、请求头部、请求体）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一行是首行，解析完直接跳到解析头部状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;头部解析时若遇到空行，则说明头部解析完毕，若有请求体则跳到解析请求体状态（头部中会有 Content-Length 来告诉你有没有请求体）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求体解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从状态机：请求数据的每一行的处理状态（完整的一行、不完整的一行、错误的一行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求分析结果状态机：用于标记请求报文解析的结果，并用于决定后续的报文解析和响应生成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求方法状态机：用于标记请求报文中的请求方法，该项目中只支持 GET&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partii整个项目的模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#partii整个项目的模型&#34;&gt;#&lt;/a&gt; PartⅡ：整个项目的模型&lt;/h2&gt;
&lt;h3 id=&#34;一-mywebserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-mywebserver&#34;&gt;#&lt;/a&gt; 一、mywebserver：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;并发模式：半同步 / 半反应堆模式 —— 我认为应该叫 “半同步 / 半模拟前摄器模式”&lt;/li&gt;
&lt;li&gt;事件处理（事件分发）模型：同步 IO 模拟的 Proactor 模型&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二-tinywebserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-tinywebserver&#34;&gt;#&lt;/a&gt; 二、Tinywebserver：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;并发模式：半同步 / 半反应堆模式、半同步 / 半模拟前摄器模式 都实现了（其实就是实现了下面的 Reactor 和模拟 Proactor）&lt;/li&gt;
&lt;li&gt;事件处理（事件分发）模型：同步 IO 模拟的 Proactor 模型、Reactor 模型 都实现了（通过 threadpool.h 中的 m_actor_model 变量实现选择用哪种模型，就是选择 read () 和 write () 在主线程完成还是工作线程完成而已）&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/11/02/%E9%97%BB%E8%AF%B4/%E7%88%B1%E6%AC%B2%E4%B9%8B%E6%AD%BB/</guid>
            <title>爱欲之死</title>
            <link>https://aristotlednzk.github.io.com/2022/11/02/%E9%97%BB%E8%AF%B4/%E7%88%B1%E6%AC%B2%E4%B9%8B%E6%AD%BB/</link>
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/categories/%E9%97%BB%E8%AF%B4/" />
            <category term="西哲" scheme="https://aristotlednzk.github.io.com/tags/%E8%A5%BF%E5%93%B2/" />
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" />
            <pubDate>Wed, 02 Nov 2022 22:07:23 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;reading中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reading中&#34;&gt;#&lt;/a&gt; Reading 中...&lt;/h3&gt;
&lt;p&gt;作者：韩炳哲    韩裔德国哲学家&lt;/p&gt;
&lt;p&gt;绩效社会、他者消失、否定性消失 balabala...&lt;/p&gt;
&lt;p&gt;还未看完，持续更新～&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/23/%E8%A8%80/%E4%BA%BA%E7%B1%BB%E5%BE%80%E4%BA%8B/</guid>
            <title>人类往事</title>
            <link>https://aristotlednzk.github.io.com/2022/10/23/%E8%A8%80/%E4%BA%BA%E7%B1%BB%E5%BE%80%E4%BA%8B/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="我的狂想曲" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/%E6%88%91%E7%9A%84%E7%8B%82%E6%83%B3%E6%9B%B2/" />
            <category term="我的小说" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/%E6%88%91%E7%9A%84%E7%8B%82%E6%83%B3%E6%9B%B2/%E6%88%91%E7%9A%84%E5%B0%8F%E8%AF%B4/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <category term="我的狂想曲" scheme="https://aristotlednzk.github.io.com/tags/%E6%88%91%E7%9A%84%E7%8B%82%E6%83%B3%E6%9B%B2/" />
            <category term="我的小说" scheme="https://aristotlednzk.github.io.com/tags/%E6%88%91%E7%9A%84%E5%B0%8F%E8%AF%B4/" />
            <pubDate>Sun, 23 Oct 2022 14:28:16 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;初章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初章&#34;&gt;#&lt;/a&gt; 初章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本篇为我个人原创小说的导言，小说标题也尚未确定，内容纯属个人胡思乱想，对现实生活略有参考但并无影射，写小说的初衷不能说是完全一时兴起，只能说是用于闲暇时光消遣。本人将不定期更新篇章，有生之年是否完结也是未知数，想看小说后续请前往本博客分类：言 - 我的狂想曲 - 我的小说。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;可预见的逻辑bug技术细节凌乱叙事请海涵。随时欢迎关于小说内容的任何方面探讨。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人类往事&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#人类往事&#34;&gt;#&lt;/a&gt; 人类往事&lt;/h3&gt;
&lt;p&gt;嗯哼～还没想好……&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/21/%E8%A8%80/%E4%B8%96%E7%95%8C%E3%82%A2%E3%83%B3%E3%83%89%E5%B4%87%E9%AB%98/</guid>
            <title>世界アンド崇高</title>
            <link>https://aristotlednzk.github.io.com/2022/10/21/%E8%A8%80/%E4%B8%96%E7%95%8C%E3%82%A2%E3%83%B3%E3%83%89%E5%B4%87%E9%AB%98/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <category term="随笔集" scheme="https://aristotlednzk.github.io.com/tags/%E9%9A%8F%E7%AC%94%E9%9B%86/" />
            <pubDate>Fri, 21 Oct 2022 20:02:05 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;那些错过的篇章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#那些错过的篇章&#34;&gt;#&lt;/a&gt; 那些错过的篇章&lt;/h2&gt;
&lt;p&gt;这两天补完了剑风传奇和孤高之人，优秀作品的闪光点是纯粹的&lt;/p&gt;
&lt;p&gt;ああ 蒙昧の 蒙昧の&lt;/p&gt;
&lt;p&gt;枷に「保護」さえ写し見せ&lt;/p&gt;
&lt;p&gt;灰舞え 灰舞え 灰舞えよ ああ&lt;/p&gt;
&lt;p&gt;ああ 在るは難き唯一の出自を&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/21/%E8%A8%80/%E4%B8%96%E7%95%8C%E3%82%A2%E3%83%B3%E3%83%89%E5%B4%87%E9%AB%98/%E5%89%91%E9%A3%8E1.jpg&#34; class=&#34;&#34; title=&#34;剑风1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/21/%E8%A8%80/%E4%B8%96%E7%95%8C%E3%82%A2%E3%83%B3%E3%83%89%E5%B4%87%E9%AB%98/%E5%89%91%E9%A3%8E.jpg&#34; class=&#34;&#34; title=&#34;剑风1&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;见山即见崇高&lt;/p&gt;
&lt;p&gt;K2 东壁独攀者&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/21/%E8%A8%80/%E4%B8%96%E7%95%8C%E3%82%A2%E3%83%B3%E3%83%89%E5%B4%87%E9%AB%98/%E5%AD%A4%E9%AB%98%E4%B9%8B%E4%BA%BA.jpg&#34; class=&#34;&#34; title=&#34;孤高之人&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/19/philosophy/%E4%BA%BA%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%9A%84%E9%BB%98%E4%BC%9A%E7%BB%B4%E5%BA%A6/</guid>
            <title>人类知识的默会维度</title>
            <link>https://aristotlednzk.github.io.com/2022/10/19/philosophy/%E4%BA%BA%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%9A%84%E9%BB%98%E4%BC%9A%E7%BB%B4%E5%BA%A6/</link>
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/categories/philosophy/" />
            <category term="西哲" scheme="https://aristotlednzk.github.io.com/categories/philosophy/%E8%A5%BF%E5%93%B2/" />
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/tags/%E5%93%B2%E5%AD%A6%E7%A4%BE%E7%A7%91/" />
            <category term="西哲" scheme="https://aristotlednzk.github.io.com/tags/%E8%A5%BF%E5%93%B2/" />
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" />
            <pubDate>Wed, 19 Oct 2022 10:28:56 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;大学阅读笔记收官第一篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大学阅读笔记收官第一篇&#34;&gt;#&lt;/a&gt; 大学阅读笔记收官 —— 第一篇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默会知识论启程读本&lt;/p&gt;
&lt;p&gt;欢迎书友评论&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/19/philosophy/%E4%BA%BA%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%9A%84%E9%BB%98%E4%BC%9A%E7%BB%B4%E5%BA%A6/5.png&#34; class=&#34;&#34; width=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/19/philosophy/%E4%BA%BA%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%9A%84%E9%BB%98%E4%BC%9A%E7%BB%B4%E5%BA%A6/25.png&#34; class=&#34;&#34; width=&#34;25&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/18/%E8%A8%80/%E5%8F%B0%E9%A3%8E%E4%B8%8E%E7%A7%8B/</guid>
            <title>台风与秋</title>
            <link>https://aristotlednzk.github.io.com/2022/10/18/%E8%A8%80/%E5%8F%B0%E9%A3%8E%E4%B8%8E%E7%A7%8B/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <category term="随笔集" scheme="https://aristotlednzk.github.io.com/tags/%E9%9A%8F%E7%AC%94%E9%9B%86/" />
            <pubDate>Tue, 18 Oct 2022 19:00:56 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;深圳の秋&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深圳の秋&#34;&gt;#&lt;/a&gt; 深圳の秋&lt;/h3&gt;
&lt;p&gt;三点一线的路上：&lt;br /&gt;
浮现出蚀之刻、真理与斗争的画面……&lt;/p&gt;
&lt;p&gt;食堂：&lt;br /&gt;
每次咬合齿肉镶嵌的冲击&lt;br /&gt;
思考，进食动作带来的快感……&lt;/p&gt;
&lt;p&gt;寒雨台风林海声：&lt;br /&gt;
来自它的呼唤&lt;br /&gt;
与世俱灭的斗志不允许你回顾从前……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;远行即远征&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/</guid>
            <title>Linux网络编程：socket、IO复用、epoll</title>
            <link>https://aristotlednzk.github.io.com/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="Linux高性能服务器编程" scheme="https://aristotlednzk.github.io.com/categories/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="webserver" scheme="https://aristotlednzk.github.io.com/tags/webserver/" />
            <category term="Linux网络编程：socket、IO复用、epoll" scheme="https://aristotlednzk.github.io.com/tags/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/" />
            <pubDate>Sat, 15 Oct 2022 17:10:54 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前置知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置知识&#34;&gt;#&lt;/a&gt; 前置知识：&lt;/h3&gt;
&lt;p&gt;Linux 系统 API 特点：如果调用失败一般返回 - 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;errno&lt;/strong&gt;：属于 Linux 系统函数库，库里面的一个全局变量，记录的是最近的错误号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;perror (const char *s): 用于打印 errno 对应的错误描述 所需头文件 stdio.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;close (): 关闭一个文件描述符，文件描述符可以重用 所需头文件 unistd.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;int open(const char *pathname,int flags);&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;功能：用于打开一个已经存在的文件 第一个参数：要打开的文件路径 第二个参数：权限 (三者互斥)：O_RDONLY 只读     O_WRONLY 只写     O_RDWR 可读可写 返回值：成功则返回新的文件描述符，如果产生错误则返回 - 1，设置 errno 包含三个头文件：sys/types.h    sys/stat.h     fcntl.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;int open(const char *pathname,int flags，mode);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;socket地址api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket地址api&#34;&gt;#&lt;/a&gt; socket 地址 API&lt;/h2&gt;
&lt;p&gt;字节序问题：CPU 累加器一次装载 4 个字节，那么 4 个字节在内存中排列的顺序将影响它被累加器装载成的整数的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机字节序 &amp;amp; 网络字节序：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大端字节序：&lt;strong&gt;一个整数的高位字节存储在内存的低位地址&lt;/strong&gt;，低位字节（0-7bit）存储在内存高位地址， 称为&lt;strong&gt;网络字节序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小端字节序相反→现代多采用：称为&lt;strong&gt;主机字节序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用socket地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用socket地址&#34;&gt;#&lt;/a&gt; 通用 socket 地址：&lt;/h3&gt;
&lt;p&gt;AF_前缀表示地址族， PF_前缀表示协议族。&lt;/p&gt;
&lt;p&gt;unsigned short int→两个字节&lt;/p&gt;
&lt;p&gt;旧版：&lt;/p&gt;
&lt;p&gt;sa_family_t sa_family;//sa_family_t 地址族类型 char sa_data [14];// 只有 14 个字节&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/image.png&#34; class=&#34;&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;专用socket地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#专用socket地址&#34;&gt;#&lt;/a&gt; 专用 socket 地址&lt;/h3&gt;
&lt;p&gt;在设置和获取 IP 地址和端口号的上海更方便&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 协议族 sockaddr_in 和 sockaddr_in6 两个专用 socket 地址结构体，分别用 IP v4 和 IP v6 所有 socket 编程接口使用的地址参数类型都是&lt;strong&gt; sockaddr&lt;/strong&gt;→专用 socket 地址类型的遍历实际使用需要转换为通用 socket 地址类型 sockaddr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/2.png&#34; class=&#34;&#34; width=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;sockaddr_in 每段都划分好了相应成员，最终转换为 sockaddr 指针即可&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// TCP/IP 协议族有 sockaddr_in 和 sockaddr_in6 两个专用的 socket 地址结构体，它们分别用于 IPv4 和 IPv6：
#include &amp;lt;netinet/in.h&amp;gt;
struct sockaddr_in&amp;#123;
sa_family_t sin_family; /* _*SOCKADDR_COMMON(sin*) */
in_port_t sin_port; /* Port number. */
struct in_addr sin_addr; /* Internet address. */
/* Pad to size of `struct sockaddr&#39;. */
unsigned char sin_zero[sizeof (struct sockaddr) - __SOCKADDR_COMMON_SIZE - sizeof (in_port_t) - sizeof (struct in_addr)];
&amp;#125;;
struct in_addr&amp;#123;
in_addr_t s_addr;
&amp;#125;;
struct sockaddr_in6&amp;#123;
sa_family_t sin6_family;
in_port_t sin6_port; /* Transport layer port # */
uint32_t sin6_flowinfo; /* IPv6 flow information */
struct in6_addr sin6_addr; /* IPv6 address */
uint32_t sin6_scope_id; /* IPv6 scope-id */
&amp;#125;;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef uint16_t in_port_t;
typedef uint32_t in_addr_t;
#define __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ip地址转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip地址转换&#34;&gt;#&lt;/a&gt; IP 地址转换&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串 ip - 整数和主机 - 网络字节序的转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常，人们习惯用可读性好的&lt;strong&gt;字符串来表示 IP 地址&lt;/strong&gt;，比如用点分十进制字符串表示 IPv4 地址，以及用十六进制字符串表示 IPv6 地址。但编程中我们需要先把它们转化为整数（二进制数）方能使用。而记录日志时则相反，我们要把整数表示的 IP 地址转化为可读的字符串。下面 3 个函数可用于用&lt;strong&gt;点分十进制字符串表示的 IPv4 地址和用网络字节序整数表示的 IPv4 地址&lt;/strong&gt;之间的转换：&lt;/p&gt;
&lt;p&gt;只适用于 IP v4：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;
in_addr_t inet_addr(const char *cp);//该函数返回值类型为in_addr_t=uint32_t=unsigned int类型，参数为字符常量 
int inet_aton(const char *cp, struct in_addr *inp);//将点分十进制地址转换为网络字节序地址
char *inet_ntoa(struct in_addr in);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;inet_addr（）将一个&lt;strong&gt;点分十进制的 IP 字符串&lt;/strong&gt;转换成一个网络字节序的长整数型数 (u_long 类型) inet_aton () 函数将将点分十进制地址转换为二进制的网络字节序地址，结 ** 果地址保存在结构体类型为 in_addr 的 inp 中，** 该结构体第一个成员为 uint32_t 类型（unsigned int 类型）的 in_addr_t。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;返回值：1 表示转换成功，0 表示失败有错误号 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同时适用于 IP v4 和 IP v6：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;
// **p:点分十进制的IP字符串**，n:表示network，网络字节序的整数
int inet_pton(int af, const char *src, void *dst);
af:地址族： AF_INET AF_INET6
src:需要转换的点分十进制的IP字符串
dst:转换后的结果保存在这个里面  
// 将网络字节序的整数，转换成点分十进制的IP地址字符串
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);
af:地址族： AF_INET AF_INET6
src: 要转换的ip的整数的地址
dst: 转换成IP地址字符串保存的地方
size：第三个参数的大小（数组的大小）
**返回值：返回转换后的数据的地址（字符串），和 dst 是一样的**
/*
#include &amp;lt;arpa/inet.h&amp;gt;
// p:点分十进制的IP字符串，n:表示network，网络字节序的整数
int inet_pton(int af, const char *src, void *dst);
af:地址族： AF_INET  AF_INET6
src:需要转换的点分十进制的IP字符串
dst:转换后的结果保存在这个里面
// 将网络字节序的整数，转换成点分十进制的IP地址字符串
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);
af:地址族： AF_INET  AF_INET6
src: 要转换的ip的整数的地址
dst: 转换成IP地址字符串保存的地方
size：第三个参数的大小（数组的大小）
返回值：返回转换后的数据的地址（字符串），和 dst 是一样的
*/
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
int main() &amp;#123;
// 创建一个ip字符串,点分十进制的IP地址字符串
char buf[] = &amp;quot;192.168.1.4&amp;quot;;**//第二个参数类型为字符数组**
unsigned int num = 0;**//第三个参数的类型为无符号整型的地址---注意传入地址加&amp;amp;**
// 将点分十进制的IP字符串转换成网络字节序的整数
inet_pton(AF_INET, buf, &amp;amp;num);
unsigned char * p = (unsigned char *)&amp;amp;num;
//把四个字节分别打印出来：每次+1=字节+1
printf(&amp;quot;%d %d %d %d\n&amp;quot;, *p, *(p+1), *(p+2), *(p+3));
// 将网络字节序的IP整数转换成点分十进制的IP字符串
char ip[16] = &amp;quot;&amp;quot;;
const char * str =  inet_ntop(AF_INET, &amp;amp;num, ip, 16);
printf(&amp;quot;str : %s\n&amp;quot;, str);
printf(&amp;quot;ip : %s\n&amp;quot;, ip);
printf(&amp;quot;%d\n&amp;quot;, ip == str);
return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;解析 unsigned char * p = (unsigned char *)#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;二.(unsigned char *)&amp;amp;a 运算顺序 1. 先取 a 的地址 2. 将 &amp;amp; a 强制类型转化为 unsigned char * 类型，也就是指向 a 的地址 3. 取出 unsigned char * 指针的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;套接字函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字函数&#34;&gt;#&lt;/a&gt; 套接字函数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt; // 包含了这个头文件，上面两个就可以省略
int socket(int domain, int type, int protocol);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：创建一个套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;domain: 协议族&lt;/p&gt;
&lt;p&gt;AF_INET : ipv4&lt;/p&gt;
&lt;p&gt;AF_INET6 : ipv6&lt;/p&gt;
&lt;p&gt;AF_UNIX, AF_LOCAL : &lt;strong&gt;本地套接字通信&lt;/strong&gt;（进程间通信）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type: 通信过程中使用的协议类型&lt;/p&gt;
&lt;p&gt;SOCK_STREAM : 流式协议&lt;/p&gt;
&lt;p&gt;SOCK_DGRAM : 报式协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protocol : 具体的一个协议。一般写 0，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOCK_STREAM : 流式协议默认使用 TCP&lt;/li&gt;
&lt;li&gt;SOCK_DGRAM : 报式协议默认使用 UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功：&lt;strong&gt;返回文件描述符&lt;/strong&gt;，操作的就是内核缓冲区。&lt;/li&gt;
&lt;li&gt;失败：-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); // socket命名
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;功能：绑定，将 fd 和本地的 IP + 端口进行绑定&lt;/li&gt;
&lt;li&gt;参数：
&lt;ul&gt;
&lt;li&gt;sockfd : 通过 socket 函数得到的文件描述符&lt;/li&gt;
&lt;li&gt;addr 😗* 需要绑定的 socket 地址，这个地址封装了 ip 和端口号的信息 **&lt;/li&gt;
&lt;li&gt;addrlen : 第二个参数结构体占的内存大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int listen(int sockfd, int backlog); // /proc/sys/net/core/somaxconn
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;功能：监听这个 socket 上的连接&lt;/li&gt;
&lt;li&gt;参数：
&lt;ul&gt;
&lt;li&gt;sockfd : 通过 socket () 函数得到的文件描述符&lt;/li&gt;
&lt;li&gt;backlog : 未连接的和已经连接的和的最大值， 5 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：listen 成功返回 0，失败返回 - 1 并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;功能：&lt;strong&gt;接收客户端连接，默认是一个阻塞的函数，阻塞等待客户端连接&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;参数：
&lt;ul&gt;
&lt;li&gt;sockfd : &lt;strong&gt;用于监听的文件描述符&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;addr : &lt;strong&gt;传出参数，记录了连接成功后客户端的地址信息&lt;/strong&gt;（ip，port）&lt;/li&gt;
&lt;li&gt;addrlen : 指定第二个参数的对应的内存大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ul&gt;
&lt;li&gt;成功 ：用于通信的文件描述符&lt;/li&gt;
&lt;li&gt;-1 ： 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;功能： 客户端连接服务器&lt;/li&gt;
&lt;li&gt;参数：
&lt;ul&gt;
&lt;li&gt;sockfd : &lt;strong&gt;用于通信的文件描述符&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;addr : 客户端要连接的服务器的地址信息&lt;/li&gt;
&lt;li&gt;addrlen : 第二个参数的内存大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：成功 0， 失败 -1&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;ssize_t write( int fd, const void *buf, size_t count); // 写数据
ssize_t read(int fd, void *buf, size_t count); // 读数据
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;fd：文件描述符 buf：读取数据存放的地方，数组的地址→传出参数 count：指定数组的大小 需要包含的头文件 unistd.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;read 函数返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;0 实际读到的字节数 = 0 已经读到结尾（对端已经关闭断开连接）&lt;br /&gt;
-1 需要进一步判断 errno 的值 errno = EAGAIN or EWOULDBLOCK 设置了非阻塞方式读，并且没有数据到达 errno = EINTR 慢速系统调用被中断 errno = ECONNRESET 说明收到 RST 标志，连接被重置。需要 close errno = “其他” 异常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;ssize_t 类型通常用于文件操作的 write、read 函数，用于表示可以被执行 read 和 write 操作的数据块的大小，其在头文件 unistd.h 中的定义如下，被 typedef 定义为__ssize_t 类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实 ssize_t 是 signed size_t 类型，其中 size_t 类型是在标准 C 语言库中进行定义的&lt;/li&gt;
&lt;li&gt;size_t 其本质是为了方便代码在不同的系统上移植而定义的，在 32 位的 Linux 中 size_t 为 unsigned int 类型即为 32 位无符号整数，在 64 位的 Linux 中其为 unsigned long 即为 64 位无符号整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;以下内容源自linux高性能服务器编程unix网络编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以下内容源自linux高性能服务器编程unix网络编程&#34;&gt;#&lt;/a&gt; 以下内容源自 Linux 高性能服务器编程 / UNIX 网络编程&lt;/h1&gt;
&lt;p&gt;参考 Linux 多进程开发：进程：通信&lt;/p&gt;
&lt;h2 id=&#34;客户端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端&#34;&gt;#&lt;/a&gt; 客户端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket&#34;&gt;#&lt;/a&gt; 创建 socket&lt;/h3&gt;
&lt;h3 id=&#34;连接函数connect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接函数connect&#34;&gt;#&lt;/a&gt; 连接函数 connect&lt;/h3&gt;
&lt;p&gt;TCP 客户通过 connect 函数来建立与 TCP 服务器的连接：&lt;/p&gt;
&lt;p&gt;int connect (int sockfd, const struct sockaddr *servaddr,socklen_t addrlen); 返回：成功则为 0，若出错则为 - 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释： sockfd 是由 socket 数返回的套接字描述符 第 2 个、第 3 个参数分别是一个指向套接字地址结构的指针和该结构的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户在调用函数 onnect 前不必非得调用 bind 函数， 因为如果需要的话，内核会确定源 IP 地址，并选择 个临时端口作为源端口。TCP 套接字调用 connect 函数会激发 TCP 三次握手，仅在连接成功或出错时返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect 函数建立导致客户端套接字从 CLOSED 状态转为→SYN_SENT 状态&lt;/li&gt;
&lt;li&gt;若 connect 失败则该套接字不再可用，必须关闭，不能对该套接字再次调用 connect 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端&#34;&gt;#&lt;/a&gt; 服务端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket可读写控制关闭的文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket可读写控制关闭的文件描述符&#34;&gt;#&lt;/a&gt; 创建 socket：可读写控制关闭的文件描述符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;int socket( int domain,int type,int protocol)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;domain 参数告诉系统使用哪个底层协议簇，TCP/IP 使用 PF_INET（IPV4）&lt;/li&gt;
&lt;li&gt;type 指定服务类型：主要包括 SOCK_STREAM（流服务）和 SOCK_UGRAM（数据报服务）。对 TCP/IP 协议族而言，&lt;strong&gt;SOCK_STREAM*&lt;em&gt;*&lt;em&gt; 表示传输层使用 TCP 协议，*&lt;/em&gt;**SOCK_DGRAM**&lt;/em&gt;* 表示传输层使用 UDP 协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;protocol 参数是在前两个参数构成的协议集合下，再选择一个具体的协议，不过这个值通常是唯一的（由前两个参数完全决定），&lt;strong&gt;几乎在所有情况下都设置为 0，表示使用默认协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用成功返回一个&lt;strong&gt; socket 文件描述符（小的非负整数值）=sockfd&lt;/strong&gt;，失败返回 - 1 并设置 errno&lt;/p&gt;
&lt;h3 id=&#34;命名socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名socket&#34;&gt;#&lt;/a&gt; 命名 socket&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建 socket 时，我们给它指定了地址族，但并未指定具体用哪个地址 给 socket 命名：将一个 socket 与 socket 地址绑定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端采用匿名方式 —— 使用操作系统自动分配的 socket 地址：把 一个本地协议地址赋给 一个套接字 系统调用函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int bind(int sockfd,const struct sockaddr* my_addr,socklen_t addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bind 将 my_addr 所指向的 socket 地址分配给未命名的 sockfd 文件描述符，addrlen 参数指出该 socket 地址的长度。&lt;/li&gt;
&lt;li&gt;bind 成功则返回 0，失败返回 - 1 并设置 errno 包括以下两种&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EACCES: 被绑定的地址是受保护的地址 EADDRINUSE: 被绑定的地址正在使用中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;可以将 sizeof (addr_in) 传入第三个 参数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sizeof` 是 `C/C++` 中的一个操作符（operator），返回一个对象或者类型所占的内存字节数。其返回值类型为 `size_t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sizeof (type_name);  //sizeof (类型);&lt;br /&gt;
sizeof (object);   // 或 sizeof object 都属于 sizeof 对象；&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上述两个函数都需要: include &amp;lt;sys/types.h&amp;gt; include&amp;lt;sys/socket.h&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;监听socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监听socket&#34;&gt;#&lt;/a&gt; 监听 socket&lt;/h3&gt;
&lt;p&gt;socket 被命名后需要使用系统调用创建一个监听队列来存放待处理的客户连接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int listen( int sockfd,int backlog);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;listen 函数仅由 TCP 服务器调用，并做如下两件事：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;listen 函数创建一个套接字时，他被假设为一个主动套接字。listen 函数把 1 个未连接的套接字转换成 1 个被动套接字，指示内核接受指向套接字的连接请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数规定了内核应该为相应套接字排队的最大连接个数。 内核为每个给定的监听套接字维护两个队列：&lt;/p&gt;
&lt;p&gt;（1）未完成连接队列：每个 SYN 分节对应队列中的一项，套接字正处于 SYN_RCVD 状态&lt;/p&gt;
&lt;p&gt;（2）已完成连接队列：每个已完成三次握手的客户对应队列中的一项，套接字处于 ESTABLISHED 状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 每当来自客户的 SYN 到达，&lt;strong&gt;TCP 在未完成连接队列中创建一个新项&lt;/strong&gt;，然后服务器响应 SYN 第二个分节，并捎带对客户的 SYN 的 ACK。该项一直保留在未完成连接队列中，直到三次握手第三个分节到达或该项超时为止。如果三次握手正常，该项则&lt;strong&gt;从未完成连接队列转移到已完成连接队列的队尾&lt;/strong&gt;。 2. 当进程调用 accept 函数时，已完成连接队列中的队头项将返回给进程，如果该队列为空那么进程将被投入睡眠，直到 TCP 在该队列中放入一项才唤醒它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数指定被监听的 socket。&lt;/li&gt;
&lt;li&gt;backlog 参数提示内核&lt;strong&gt;监听队列的最大长度&lt;/strong&gt;→监听队列长度如果超过 backlog，服务器将不手里新的客户连接，客户端将收到 ECONNREFUSED 错误信息，以前表示已连接队列 + 半连接队列之和&lt;/li&gt;
&lt;li&gt;listen 成功返回 0，失败返回 - 1 并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接受连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接受连接&#34;&gt;#&lt;/a&gt; 接受连接&lt;/h3&gt;
&lt;p&gt;accept 函数由 TCP 服务器调用，用于&lt;strong&gt;从已完成连接队列队头返回下一个已完成连接&lt;/strong&gt;。&lt;strong&gt;从 listen 监听队列中接受一个连接&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int accept(int sockfd,struct sockaddr *addr,socklen_t *addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数是执行过 listen 系统调用的监听 socket 套接字描述符&lt;/li&gt;
&lt;li&gt;addr 参数获取被接受连接的远端 socket 地址&lt;/li&gt;
&lt;li&gt;远端 socket 地址结构长度由 * addrlen 参数所引用的整数值设置，返回时，该整数值为该套接字地址结构内的确切字节数&lt;/li&gt;
&lt;li&gt;accept 成功时，&lt;strong&gt;那么其返回值是由 内核自动 生成的 1 个套接字全新描述符&lt;/strong&gt; = 称为&lt;strong&gt;已连接套接字描述符&lt;/strong&gt;，该 socket 唯一地表示了被接受的这个连接。失败则返回 - 1 并设置 errno。如果&lt;strong&gt;已完成连接队列为空，那么进程被投入睡眠&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器可以通过该 socket 来与被接受连接对应的客户端通信&lt;/p&gt;
&lt;p&gt;已连接套接字每次在循环中关闭，但监听套接字在服务器的整个有效期内都保持开放&lt;/p&gt;
&lt;p&gt;而现在由于考虑到 syn 攻击，backlog 参数的含义改为了已连接队列之和，去除了半连接队列之和了。&lt;/p&gt;
&lt;p&gt;举一个例子，在 socket 编程当中，如果我们在服务端不用 accept 函数，listen 函数的第二个参数设置为 5，那么这个时候，可以成功连接的客户端就是最多可以成功连入 5 个，每连入一个，队列的项数就会加一 (减一的话就是用 accept 函数去取出来)，所以当项数达到 5 时，客户端自然就会连不上了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意本函数最多返回三个值：分别对应函数三个参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新套接字描述符 / 出错指示整数&lt;/li&gt;
&lt;li&gt;客户进程的协议地址→addr&lt;/li&gt;
&lt;li&gt;客户进程的协议地址大小→addrlen&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;socket状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket状态&#34;&gt;#&lt;/a&gt; socket 状态&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;调用 socket 函数创建了一个套接字以后，改套接字就对应的和相应的输出缓冲区和输入缓冲区建立了联系，此时改套接字的状态正处于 CLOSED (观察 TCP 状态转换图即可)&lt;/li&gt;
&lt;li&gt;当我们调用 listen 函数以后，改套接字的状态就变成了 LISTEN 监听状态，此时，处于等待客户端连入的状态。&lt;/li&gt;
&lt;li&gt;对于一个调用 listen 进行监听的套接字’操作系统会为其维护 2 个队列：未完成连接队列和已完成连接队列。 （1）未完成连接队列中的连接 当客户端发送 TCP 连接三次握手的第 1 次（即 SYN 包）时，服务器端会在未完成连接队列中创建一个与该 SYN 包对应的项，可以把该项看成一个半连接（因为连接尚未建立）该半连接的状态会从 LISTEN 变成 SYNRCVD 同时向客户端返回第 2 次握手的包。 （SYN’ACK）而此时服务器正在等待完成第 3 次握手 （2）已完成连接队列中的连接 3 次握手完成后该连接就变成 ESTABLISHED 状态，每个已经完成 3 次握手的客户端连接（完整说法应该是 “服务器端的与客户端对应的 socket 连接”）都放在这个队列中作为一项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;从上图可以看到客户端发送的三次握手从第 1 个 SYN 包到 ** &lt;code&gt;在三次握手完成之前&lt;/code&gt; &lt;strong&gt;连接都会在未完成连接队列中；直到&lt;/strong&gt; &lt;code&gt;在三次握手完成后&lt;/code&gt;  ** 该连接就从未完成连接队列转移到已完成连接队列&lt;/p&gt;
&lt;p&gt;而 listen 函数” 曾经 “的含义为这两个队列的和不超过 backlog，实际上由于操作系统的原因可能会比这个值稍微多一些。&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;web服务器端通过socket监听来自用户的请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器端通过socket监听来自用户的请求&#34;&gt;#&lt;/a&gt; Web 服务器端通过 &lt;code&gt;socket&lt;/code&gt;  监听来自用户的请求。&lt;/h3&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#include &amp;lt;sys/socket.h&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#include &amp;lt;netinet/in.h&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/* 创建监听socket文件描述符 */  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int listenfd = socket(PF_INET, SOCK_STREAM, 0);  /* 创建监听socket的TCP/IP的IPV4 socket地址 struct sockaddr_in address;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bzero(&amp;amp;address, sizeof(address));  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address.sin_family = AF_INET;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address.sin_addr.s_addr = htonl(INADDR_ANY);  /* INADDR_ANY：将套接字绑定到所有可用的接口   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address.sin_port = htons(port);  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int flag = 1;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/* SO_REUSEADDR 允许端口被重复使用 */  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag));  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/* 绑定socket和它的地址 */  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address));   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/* 创建监听队列以存放待处理的客户连接，在这些客户连接被accept()之前 */  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ret = listen(listenfd, 5);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;代码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码分析&#34;&gt;#&lt;/a&gt; 代码分析：&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;创建监听 socket 的 TCP/IP 的 IPV4 socket 地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;struct sockaddr_in address;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;bzero 函数是 c++ string.h 中的函数 *。* 功能描述：置字节字符串前 n 个字节为零且包括‘\0’。 原型:extern void bzero (void *s, int n); 参数说明:s 要置零的数据的起始地址；n 要置零的数据字节个数。 用法:#include &amp;lt;string.h&amp;gt; 功能:&lt;strong&gt; 置字节字符串 s 的前 n 个字节为零且包括‘\0’&lt;/strong&gt;。 说明:bzero 无返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bzero(&amp;amp;address, sizeof(address));&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建套接字时，用该字段指定地址族，对于 TCP/IP 协议的，必须设置为 AF_INET。变量 address 是一个结构体，其中成员变量 sin_family 是&lt;strong&gt;地址族类型变量&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_family = AF_INET;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;sin_addr 是套接字中的 IP 地址，sin_addr 的类型是联合，因此可以通过三种不同的方式访问它：作为 s_un_b（四个 1 字节整数）、s_un_w（两个 2 字节整数）或作为 s_addr（一个 4 字节整数）。INADDR_ANY：将套接字绑定到所有可用的接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络编程_常用的基本函数介绍&lt;/strong&gt; ——htonl、ntohl、htons、ntohs htonl 函数：将主机的 unsigned long 值转换成网络字节顺序（32 位）（一般主机跟网络上传输的字节顺序是不通的，分大小端），函数返回一个网络字节顺序的数字。 ntohl 函数：将网络字节顺序（32 位）转为主机字节&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;htons 是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_port = htons(port);&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SO_REUSEADDR 允许端口被重复使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag));&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;setsockopt 函数解析：&lt;/p&gt;
&lt;p&gt;SO_REUSEADDR 参数，打开或关闭地址复用功能。当 option_value 不等于 0 时，打开，否则，关闭。它实际所做的工作是置 sock-&amp;gt;sk-&amp;gt;sk_reuse 为 1 或 0。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#include &amp;lt;sys/socket.h&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int setsockopt(int sockfd, int level, int optname,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;const void *optval, socklen_t optlen);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;(1) int sockfd: 很简单，套接字描述符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;(2) int level: 选项定义的层次；目前仅支持SOL_SOCKET和IPPROTO_TCP层次，若要在套接字级别上设置选项，就必须把level设置为 SOL_SOCKET&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;(3) int optname: 指定准备设置的选项，option_name可以有哪些取值，这取决于level&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;(4) const void *optval: 指针，指向存放选项值的缓冲区&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;(5) socklen_t optlen: optval缓冲区的长度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;绑定 socket 和它的地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address));&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建监听队列以存放待处理的客户连接，在这些客户连接被 accept () 之前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ret = listen(listenfd, 5);&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;assert (ret≠-1) 函数的作用是现计算表达式 expression ，如果其值为假（即为 0），那么它先向 stderr 打印一条出错信息，然后通过调用 abort 来终止程序运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书本 95 页服务器程序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const char* ip=argv[1]; int port =atoi(argv[2]); int backlog =atoi(argv[3]); int inet_pton(int AF_INET, ip ,&amp;amp;address.sin_addr);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要以下包： include &amp;lt;sys/types.h&amp;gt;&lt;br /&gt;
include &amp;lt;sys/socket.h&amp;gt;&lt;br /&gt;
include &amp;lt;arpa/inet.h&amp;gt;&lt;/p&gt;
&lt;p&gt;解释：接收 IP 地址、端口还、backlog 值。调用 &lt;code&gt;inet_pton&lt;/code&gt;  函数：可以在将 IP 地址在 “点分十进制” 和 “整数” 之间转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int inet_pton(int af, const char *src, void &lt;em&gt;dst);&lt;br /&gt;
 这个函数转换字符串到网络地址，第一个参数 af 是地址族，转换后存在 dst 中&lt;br /&gt;
 inet_pton 是 inet_addr 的扩展，支持的多地址族有下列：&lt;br /&gt;
af = AF_INET&lt;br /&gt;
src 为指向字符型的地址，即 ASCII 的地址的首地址（ddd.ddd.ddd.ddd 格式的），函数将该地址&lt;br /&gt;
转换为&lt;strong&gt; in_addr&lt;/strong&gt; 的结构体，并复制在&lt;/em&gt; dst 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;af =AF_INET6&lt;br /&gt;
src 为指向 IPV6 的地址，函数将该地址转换为&lt;strong&gt; in6_addr&lt;/strong&gt; 的结构体，并复制在 * dst 中如果函数出错将返回一个负值，并将 errno 设置为 EAFNOSUPPORT，如果参数 af 指定的地址族和 src 格式不对，函数将返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;多线程实现并发服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程实现并发服务器&#34;&gt;#&lt;/a&gt; 多线程实现并发服务器&lt;/h2&gt;
&lt;p&gt;参考：Linux 多线程开发&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户区中堆是共享，每个线程对应一个栈区 —— 不共享&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;tcp状态转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp状态转换&#34;&gt;#&lt;/a&gt; TCP 状态转换&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/image-16684837417685.png&#34; class=&#34;&#34; title=&#34;image-16684837417685&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/image-16684837417686.png&#34; class=&#34;&#34; title=&#34;image-16684837417686&#34;&gt;&lt;/p&gt;
&lt;p&gt;（红色实现可以视为客户端发送请求，绿色虚线视为服务器，黑色是一些异常）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么在服务端要分两次发送 ACK 和 FIN，不一次性发送 —— 为什么第二第三次挥手不合并？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;因为客户端发送 FIN 后，服务端再发送 ACK 表示同意客户端断开连接，但服务端可能还需要发送数据给客户端，因此可以在服务端发送完数据后再发送 FIN 给客户端，表示服务端断开连接。&lt;/li&gt;
&lt;li&gt;三次握手时可以一次性发送：因为建立连接是双方互相的通信，而四次挥手是单方面的意愿&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么连接的主动关闭方必须处于 TIME_WAIT 状态并持续 2MSL 时间？&lt;em&gt;MSL 指一个片段在网络中最大的存活时间，2MSL 就是&lt;/em&gt;&lt;em&gt;&lt;strong&gt;一个发送和一个回复所需的最大时间&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;确保安全性：如果服务端没有接收到客户端最后发送的 ACK，那么能够让 TCP 连接的主动关闭方在它发送的 ACK 丢失的情况下重新发送最终的 ACK，直到确认服务端收到为止。&lt;/li&gt;
&lt;li&gt;主动关闭方重新发送的最终 ACK 并不是因为被动关闭方重传了 ACK（它们并不消耗序列号，被动关闭方也不会重传），而&lt;strong&gt;是因为被动关闭方重传了它的 FIN&lt;/strong&gt;。事实上，&lt;strong&gt;被动关闭方总是重传 FIN 直到它收到一个最终的 ACK。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2MSL（Maximum Segment Lifetime），主动断开连接的一方，最后进入一个 TIME_WAIT 状态，这个状态会持续: 2msl。msl: 官方建议: 2 分钟，实际是 30s&lt;/p&gt;
&lt;h2 id=&#34;半关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半关闭&#34;&gt;#&lt;/a&gt; 半关闭&lt;/h2&gt;
&lt;p&gt;半关闭状态：FIN_WAIT_1 不能发送数据（不包括协议 ACK 确认），但可以接收数据&lt;/p&gt;
&lt;p&gt;当 TCP 连接中 A 向 B 发送 FIN 请求关闭，另一端 B 回应 ACK 之后（A 端进入 FIN_WAIT_2 状态），并没有立即发送 FIN 给 A，A 方处于半连接状态（半开关），此时 A 可以接收 B 发送的数据，但是 A 已经不能再向 B 发送数据。从程序的角度，可以&lt;strong&gt;使用 API 来控制实现半连接状态：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;
int shutdown(int sockfd, int how);
sockfd: 需要关闭的socket的描述符
how: 允许为shutdown操作选择以下几种方式:
    SHUT_RD(0)： 关闭sockfd上的读功能，此选项将不允许sockfd进行读操作。该套接字不再接收数据，任何当前在套接字接受缓冲区的数据将被无声的丢弃掉。
    SHUT_WR(1): 关闭sockfd的写功能，此选项将不允许sockfd进行写操作。进程不能在对此套接字发出写操作。
    SHUT_RDWR(2):关闭sockfd的读写功能。相当于调用shutdown两次：首先是以SHUT_RD,然后以SHUT_WR。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 close 中止一个连接，但它只是减少描述符的引用计数，并不直接关闭连接，只有当描述符的引用计数为 0 时才关闭连接。&lt;strong&gt;shutdown *&lt;em&gt;** 不考虑描述符的引用计数，直接关闭描述符 **&lt;/em&gt;*。也可选择中止一个方向的连接，只中止读或只中止写&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;多进程中，创建的子进程和父进程共享文件描述符表，创建一个子进程引用计数加一&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 如果有多个进程共享一个套接字，close 每被调用一次，计数减 1 ，直到计数为 0 时，也就是所用进程都调用了 close，套接字将被释放。 在多进程中如果一个进程调用了 shutdown (sfd, SHUT_RDWR) 后，其它的进程将无法通过该文件描述符 sfd 进行通信。但如果一个进程 close (sfd) 将不会影响到其它进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;端口复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口复用&#34;&gt;#&lt;/a&gt; 端口复用&lt;/h2&gt;
&lt;p&gt;首先有个问题：通信双方有一方先断开连接，比如服务端先断开连接，那么处于 FIN_WAIT_2，客户端处于 CLOSE_WAIT，而客户端也断开连接，那么服务端处于 TIME_WAIT，&lt;strong&gt;此时服务端需要等待 2msl 时间才能释放它所占用的端口号&lt;/strong&gt;，期间如果重新启动服务器./server 那么会一直显示： bind: Address already in use&lt;/p&gt;
&lt;p&gt;如果希望服务器主动结束后能立刻运行，那么需要端口复用！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tcp 协议中 FIN_WAIT2 到 Time_wait 的状态是有时间的，如果超过这个时间，服务端内核就会直接结束，所以如果服务端在 FIN_WAIT_2 状态一定时间后会自动结束进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/image-16684837417687.png&#34; class=&#34;&#34; title=&#34;image-16684837417687&#34;&gt;&lt;/p&gt;
&lt;p&gt;当客户端也断开后（给服务端发送了 FIN），服务端进入 TIME_WAIT&lt;/p&gt;
&lt;p&gt;端口复用最常用的用途是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止服务器重启时之前绑定的端口还未释放&lt;/li&gt;
&lt;li&gt;程序突然退出而系统没有释放端口&lt;/li&gt;
&lt;li&gt;还能设置套接字的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;recv函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#recv函数&#34;&gt;#&lt;/a&gt; recv 函数&lt;/h4&gt;
&lt;p&gt;**int recv( SOCKET s,   char FAR *buf,   int len,   int flags   );  **&lt;/p&gt;
&lt;p&gt;不论是客户还是服务器应用程序都用 recv 函数从 TCP 连接的另一端接收数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该函数的第一个参数指定接收端套接字描述符；&lt;/li&gt;
&lt;li&gt;第二个参数指明一个缓冲区，该缓冲区用来存放 recv 函数接收到的数据；&lt;/li&gt;
&lt;li&gt;第三个参数指明 buf 的长度；&lt;/li&gt;
&lt;li&gt;第四个参数一般置 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这 里只描述同步 Socket 的 recv 函数的执行流程： 当应用程序调用 recv 函数时，recv 先等待 s 的发送缓冲中的数据被协议传送完毕，如果协议在传送 s 的发送缓冲中的数据时出现网络错误 ，那么 recv 函数返回 SOCKET_ERROR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 s 的发送缓冲中没有数 据或者数据被协议成功发送完毕后，recv 先检查套接字 s 的接收缓冲区，如果 s 接收缓冲区中没有数据或者协议正在接收数据，那么 recv 就一直等待，只到 协议把数据接收完毕。当协议把数据接收完毕，recv 函数就把 s 的接收缓冲中的数据 copy 到 buf 中（注意协议接收到的数据可能大于 buf 的长度，所以 在这种情况下要调用几次 recv 函数才能把 s 的接收缓冲中的数据 copy 完。recv 函数仅仅是 copy 数据，真正的接收数据是协议来完成的），&lt;strong&gt;recv 函数返回其实际 copy 的字节数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果 recv 在 copy 时出错，那么它返回 SOCKET_ERROR；如果 recv 函数在等待协议接收数据时网络中断 了，那么它返回 0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
// 设置套接字的属性（不仅仅能设置端口复用）
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
参数（在UNP（Unix网络编程）书籍中使用）：
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sockfd : 要操作的文件描述符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;level : 级别 - SOL_SOCKET (端口复用的级别)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optname : 选项的名称，&lt;/p&gt;
&lt;p&gt;端口复用都可以使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SO_REUSEADDR&lt;/li&gt;
&lt;li&gt;SO_REUSEPORT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optval : 端口复用的值（整型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 : 可以复用&lt;/li&gt;
&lt;li&gt;0 : 不可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optlen : optval 参数的大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;端口复用，设置的时机是&lt;/strong&gt; ** 在服务器绑定端口之前 ****。 **setsockopt (); bind ();&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;常看网络相关信息的命令
netstat
参数：
-a 所有的socket
-p 显示正在使用socket的程序的名称
-n 直接使用IP地址，而不通过域名服务器
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;0.0.0.0ip 绑定了 9999 端口号，server 是应用程序的名称&lt;/p&gt;
&lt;h2 id=&#34;io多路复用io多路转接面试必问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io多路复用io多路转接面试必问&#34;&gt;#&lt;/a&gt; I/O 多路复用（I/O 多路转接）面试必问&lt;/h2&gt;
&lt;h3 id=&#34;select-poll-和-epoll要手动写出来知道原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select-poll-和-epoll要手动写出来知道原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;select、poll 和 epoll&lt;/strong&gt; 要手动写出来，知道原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I/O 多路复用使得程序能同时监听多个文件描述符，能够提高程序的性能&lt;/strong&gt;，Linux 下实现 I/O 多路复用的系统调用主要有 &lt;strong&gt;select、poll 和 epoll&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;之前的做法是一个一个文件描述符去遍历，无法同时监听&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输入输出对应的是程序和内存： 输入：程序 / 文件→内存 输出：内存→文件&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阻塞等待 (（阻塞 IO 模型即 BIO 模型）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;每有一个客户端连接进来，就创建一个线程去读取接收客户端数据，而主线程不受影响&lt;/p&gt;
&lt;h3 id=&#34;非阻塞忙轮询非阻塞模型即nio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非阻塞忙轮询非阻塞模型即nio&#34;&gt;#&lt;/a&gt; 非阻塞，忙轮询（非阻塞模型即 NIO）&lt;/h3&gt;
&lt;p&gt;可以设置 read 不阻塞，此时有数据就读，没数据就返回一个值继续往下执行，但需要不断循环判断是否有数据进来 &lt;img data-src=&#34;/2022/10/15/cpp/%E9%A1%B9%E7%9B%AE/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9Asocket%E3%80%81IO%E5%A4%8D%E7%94%A8%E3%80%81epoll/ock.png&#34; class=&#34;&#34; title=&#34;ock&#34;&gt;&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;当有客户端连接进来，accept 就将该 cfd 添加到一个表里面；然后再逐个判断每个文件描述符 cfd 是否有数据通信，当有数据通信就调用 read/recv 读取，没有就继续往下循环。&lt;/p&gt;
&lt;p&gt;当客户端数量巨大时逐个遍历是否有数据写入&lt;/p&gt;
&lt;p&gt;IO 多路转接&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;现在将所有客户端的文件描述符 cfd 统一交给内核，内核去检测再返回，因此只调用了一次就查出是哪个&lt;/p&gt;
&lt;h2 id=&#34;select-api介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select-api介绍&#34;&gt;#&lt;/a&gt; select API 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主旨思想： 1. 首先要构造一个关于文件描述符的列表，将要监听的文件描述符添加到该列表中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;调用一个系统函数（即 select），监听该列表中的文件描述符，直到这些描述符中的一个或者多个进行 I/O 操作时，该函数才返回。 a. 这个函数是阻塞 b. 函数对文件描述符的检测的操作是由内核完成的 3. 在返回时，它会告诉进程有多少（哪些）描述符要进行 I/O 操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// sizeof(fd_set) = 128个字节 =1024位，每个标志位保存一个文件描述符
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/select.h&amp;gt;
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nfds : 委托内核检测的&lt;strong&gt;最大文件描述符的值 + 1&lt;/strong&gt;→为了能够遍历到最大的文件描述符，类似： for (int i=0;i&amp;lt;n+1;i++)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;readfds : 要检测的文件描述符的读的集合，委托内核检测哪些文件描述符的读的属性。&lt;/p&gt;
&lt;p&gt;检测读缓冲区有没有数据&lt;/p&gt;
&lt;p&gt;。没有数据标志位置 0，有数据置为 1. 因此最后返回的是标志位为 1 的文件描述符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般检测读操作&lt;/li&gt;
&lt;li&gt;对应的是对方发送过来的数据，因为读是被动的接收数据，检测的就是读缓冲区
&lt;ul&gt;
&lt;li&gt;是一个传入传出参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;writefds : 要检测的文件描述符的写的集合，委托内核检测哪些文件描述符的写的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;委托内核检测写缓冲区是不是还可以写数据（不满的就可以写），满了标志位置 0，不满置 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exceptfds : 检测发生异常的文件描述符的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout : 设置的超时时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct timeval &amp;#123;
    long tv_sec; /* seconds */
    long tv_usec; /* microseconds */
&amp;#125;;
    - NULL : 永久阻塞，直到检测到了文件描述符有变化
    - tv_sec = 0 tv_usec = 0， 不阻塞
    - tv_sec &amp;gt; 0 tv_usec &amp;gt; 0， 阻塞对应的时间
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回值 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-1 : 失败&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;0 (n) : 检测的集合中有 n 个文件描述符发生了变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 将参数文件描述符fd对应的标志位设置为0（clear）
void FD_CLR(int fd, fd_set *set);
// 判断fd对应的标志位是0还是1， 返回值 ： fd对应的标志位的值，如果是0返回0， 是1返回1
int FD_ISSET(int fd, fd_set *set);
// 将参数文件描述符fd 对应的标志位，设置为1
void FD_SET(int fd, fd_set *set);
// fd_set一共有1024 bit, 全部初始化为0
void FD_ZERO(fd_set *set);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1. 要检测读缓冲区，首先建立一个 fd_set，存放每个文件描述符读缓冲区的标志位。每个比特位代表一个文件描述符 （注意前三个是被占用的！）&lt;/p&gt;
&lt;p&gt;2. 然后将要检测的文件描述符标志位置 1, 以上都是在用户态中进行&lt;/p&gt;
&lt;p&gt;3. 之后调用 select，将 fd_set 拷贝到内核态检测有哪些位是有数据→置 1，没有数据的→置 0，再将结构 fd_set 返回到用户态，用户只需要一次遍历用户态中的 fd_set 就能知道有多少文件描述符有数据&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;h2 id=&#34;poll-api介绍及代码编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#poll-api介绍及代码编写&#34;&gt;#&lt;/a&gt; poll API 介绍及代码编写&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;核心：将主动询问内核转变为等待内核通知&lt;/strong&gt;，从主动轮询→被动通知 &lt;strong&gt;一次系统调用 select/poll 就可以实现管理多个 client 事件（读写 accept 等）&lt;/strong&gt;，降低非阻塞 IO 频繁无效系统调用问题&lt;/p&gt;
&lt;p&gt;select () 函数缺点：&lt;strong&gt;内核态中依然要遍历所有文件描述符&lt;/strong&gt;，每次调用需要拷贝全量描述符到内核态&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;POLL&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;poll.h&amp;gt;
struct pollfd &amp;#123;
    int fd; /* 委托内核检测的文件描述符 */
    short events; /* 委托内核检测文件描述符的什么事件 */
    short revents; /* 文件描述符实际发生的事件 */
&amp;#125;;
struct pollfd myfd;
   myfd.fd = 5;
   myfd.events = POLLIN | POLLOUT;  同时检测两个事件：同时委托内核进行读写操作
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fds : 是一个 struct pollfd 结构体数组，这是一个需要检测的文件描述符的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nfds : 这个是第一个参数数组中最后一个有效元素的下标 + 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout : 阻塞时长&lt;/p&gt;
&lt;p&gt;0 : 不阻塞&lt;/p&gt;
&lt;p&gt;-1 : 阻塞，当检测到需要检测的文件描述符有变化，解除阻塞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0 : 阻塞的时长&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;-1 : 失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0（n） : 成功，n 表示检测到集合中有 n 个文件描述符发生变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;poll 数组如果已满，没有可用的位置存放新连接 accept 进来的文件描述符 cfd，那么就等待下一次处理。注意新连接的 cfd 不会丢弃，在 TCP 缓冲区中，等到 poll 数组中有可用的就可以继续连接了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果有数据传入，则调用 read 返回 len，len=0 说明读取完毕，先 close 关闭该文件描述符，再将该结构体的文件描述符置为 - 1，fd [i].fd=-1&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;h2 id=&#34;epoll-api-介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epoll-api-介绍&#34;&gt;#&lt;/a&gt; epoll API 介绍&lt;/h2&gt;
&lt;p&gt;改进：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先调用 epoll_create 在 *&lt;em&gt;** 内核区创建 epoll 实例 **&lt;/em&gt;*—— 结构体数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;struct rb_root rbr;// 存放文件描述符，底层是红黑树 struct list_head rdlist;// 检测到发生改变的（有数据传入的）文件描述符，底层双链表&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/epoll.h&amp;gt;&lt;/p&gt;
&lt;p&gt;//epoll_create 创建一个新的 epoll 实例，返回指向该实例的描述符 epollfd 用来调用所有 epoll 相关接口。在内核中创建了一个数据，这个数据中有两个比较重要的数据，一个是需要检测的文件描述符的信息（红黑树），还有一个是&lt;strong&gt;就绪列表&lt;/strong&gt;，存放检测到数据发生改变的文件描述符信息（双向链表）。&lt;/p&gt;
&lt;p&gt;当 epollfd 不再使用时，需要调用 close () 关闭，当指向 epoll 的文件描述符关闭后内核会摧毁 epoll 实例并释放相关资源。&lt;/p&gt;
&lt;p&gt;epoll_ctl: 将哪个客户端 fd 的哪些事件 event 交给哪个 epoll (epollfd) 来管理（增删改）&lt;/p&gt;
&lt;p&gt;int epoll_create(int size);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;size : 目前没有意义了。随便写一个数，必须大于 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;-1 : 失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0 : 文件描述符，指向 epoll 实例的描述符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;typedef union epoll_data &amp;#123;
    void *ptr;
    int fd;
    uint32_t u32;
    uint64_t u64;
&amp;#125; epoll_data_t;
struct epoll_event &amp;#123;
    uint32_t events; /* Epoll events */
    epoll_data_t data; /* User data variable */
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常见的 Epoll 检测事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EPOLLIN&lt;/li&gt;
&lt;li&gt;EPOLLOUT&lt;/li&gt;
&lt;li&gt;EPOLLERR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;// 对 epoll 实例进行管理：添加文件描述符信息，删除信息，修改信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;epfd : &lt;strong&gt;epoll 实例对应的文件描述符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;op : 要进行什么操作&lt;/p&gt;
&lt;p&gt;EPOLL_CTL_ADD: 添加&lt;/p&gt;
&lt;p&gt;EPOLL_CTL_MOD: 修改&lt;/p&gt;
&lt;p&gt;EPOLL_CTL_DEL: 删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fd : &lt;strong&gt;要检测的文件描述符&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;event : 检测文件描述符什么事情&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;// 检测函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数：
&lt;ul&gt;
&lt;li&gt;epfd : epoll 实例对应的文件描述符&lt;/li&gt;
&lt;li&gt;events : &lt;strong&gt;传出参数，保存了发送了变化的文件描述符的信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;maxevents : 第二个参数结构体数组的大小&lt;/li&gt;
&lt;li&gt;timeout : 阻塞时间
&lt;ul&gt;
&lt;li&gt;0 : 不阻塞&lt;/li&gt;
&lt;li&gt;-1 : 阻塞，直到检测到 fd 数据发生变化，解除阻塞&lt;/li&gt;
&lt;li&gt;0 : 阻塞的时长（毫秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;返回值：只返回发生变化的文件描述符到用户区
&lt;ul&gt;
&lt;li&gt;成功，返回发送变化的文件描述符的个数 &amp;gt; 0&lt;/li&gt;
&lt;li&gt;失败 -1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题：在最开始调用 epoll_ctl 把监听的文件描述符放进红黑树的时候传入了 &amp;amp; epev，也就是 epev 的指针，为什么后面传入新的文件描述符的时候可&lt;strong&gt;以重用这个 epev&lt;/strong&gt; 呢，这样重用 epev 的话前面传入的监听描述符不就被改动了嘛？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;epoll_ctl 会在 epoll fd 红黑树中重新添加一个节点，而不是覆盖 lfd 的节点，然后新添加的节点会关联这个 event。&lt;br /&gt;
至于每次重用 event，而不会影响之前的已经在 rb tree 中传入的节点，应该是拷贝了 event 的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;epoll的工作模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#epoll的工作模式&#34;&gt;#&lt;/a&gt; Epoll 的工作模式&lt;/h3&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LT 模式：水平触发（缺省工作方式）&lt;/p&gt;
&lt;p&gt;a. 用户不读数据，数据一直在缓冲区，epoll 会一直通知&lt;/p&gt;
&lt;p&gt;b. 用户只读一部分数据，epoll 会通知&lt;/p&gt;
&lt;p&gt;c. 缓冲区数据读完了，不通知&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只要监听的文件描述符缓冲区中有数据，就会触发 epoll_wait 有返回值，内核就会通知你这个文件描述符是就绪的，这是默认的 epoll_wait 的方式。 同时支持阻塞和非阻塞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ET 模式：边沿触发 —— 效率高：减少 epoll 事件被重复触发的次数&lt;/p&gt;
&lt;p&gt;a. 用户不读数据，数据一直在缓冲区，epoll 下次检测不通知&lt;/p&gt;
&lt;p&gt;b. 用户只读一部分数据，epoll 不通知&lt;/p&gt;
&lt;p&gt;c. 缓冲区数据读完了，不通知&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 只有监听的文件描述符的读 / 写事件发生，才会触发 epoll_wait 有返回值；比如：当 fd 文件描述符缓冲区来了 8 字节数据，内核会通知一次，你只读两个字节，内核不会通知你缓冲区还有数据（文件描述符就绪），直到你读完所有缓冲区数据，下次数据来了内核才会通知您 &lt;strong&gt;2. 只支持非阻塞&lt;/strong&gt; —— 因为该模式要求最好当内核通知触发时一次性读取完所有缓冲区数据，那么就需要在&lt;strong&gt; while 循环&lt;/strong&gt;中不断 read 读取数据，而 read 就得设置成非阻塞，否则就会卡在那。&lt;strong&gt;必须使用非阻塞套接字&lt;/strong&gt;，避免由于一个文件描述符的阻塞读 / 写把处理多个文件描述符任务饿死&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct epoll_event &amp;#123;
    uint32_t events; /* Epoll events */
    epoll_data_t data; /* User data variable */
&amp;#125;;
常见的Epoll检测事件：
    EPOLLET             边沿触发（在accept后设置event）
    EPOLLIN
    EPOLLOUT
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EPOLLONESHOT：即使可以使用 ET 模式，&lt;strong&gt;一个 socket 上的某个事件还是可能被触发多次&lt;/strong&gt;。这在并发程序中就会引起一个 问题。比如一个线程在读取完某个 socket 上的数据后开始处理这些数据，而在数据的处理过程中该 socket 上又有新数据可读（EPOLLIN 再次被触发），此时另外一个线程被唤醒来读取这些新的数据。于 是就出现了两个线程同时操作一个 socket 的局面。&lt;strong&gt;一个 socket 连接在任一时刻都只被一个线程处理，可 以使用 epoll 的 EPOLLONESHOT 事件实现&lt;/strong&gt;。 对于注册了 EPOLLONESHOT 事件的文件描述符，&lt;strong&gt;操作系统最多触发其上注册的一个可读、可写或者异 常事件，且只触发一次，除非我们使用 epoll_ctl 函数重置该文件描述符上注册的 EPOLLONESHOT 事 件&lt;/strong&gt;。这样，当一个线程在处理某个 socket 时，其他线程是不可能有机会操作该 socket 的。但反过来思考，注册了 EPOLLONESHOT 事件的 socket 一旦被某个线程处理完毕， 该线程就应该立即重置这个 socket 上的 EPOLLONESHOT 事件，以确保这个 socket 下一次可读时，其 EPOLLIN 事件能被触发，进 而让其他工作线程有机会继续处理这个 socket。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;epoll 更在细致的执行流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建内核事件表（epoll_create）。这里主要是向内核申请创建一个 fd 的文件描述符作为内核事件表（&lt;strong&gt;B + 树结构的文件&lt;/strong&gt;，没有数量限制），这个描述符用来保存应用进程需要监控哪些 fd 和对应类型的事件。 （简单理解&lt;strong&gt;内核申请一个 B + 树来监听事件&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;添加或移出监控的 fd 和事件类型（epoll_ctl）。调用此方法可以是向内核的内核事件表 动态的添加和移出 fd 和对应事件类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;epoll_wait 绑定回调事件&lt;/strong&gt;：&lt;strong&gt;内核向事件表的 fd 绑定一个回调函数&lt;/strong&gt;。当监控的&lt;strong&gt; fd 活跃&lt;/strong&gt;时，会调用 callback 函数&lt;strong&gt;把事件加到一个活跃事件队列&lt;/strong&gt;里；最后在 epoll_wait 返回的时候内核会把&lt;strong&gt;活跃事件队列里的 fd 和事件类型返回给应用进程&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后，从 epoll 整体思路上来看，采用&lt;strong&gt;事先就在内核创建一个事件监听表&lt;/strong&gt;，后面只需要往里面添加移出对应事件，因为本身事件表就在内核空间，所以就避免了向 select、poll 一样每次都要把自己需要监听的事件列表传输过去，然后又传回来，这也就避免了事件信息需要在用户空间和内核空间相互拷贝的问题。&lt;/li&gt;
&lt;li&gt;然后 epoll 并不是像 select 一样去遍历事件列表，然后逐个轮询的监控 fd 的事件状态，而是&lt;strong&gt;事先就建立了 fd 与之对应的回调函数&lt;/strong&gt;，当事件激活后主动回调 callback 函数，这也就避免了遍历事件列表的这个操作，所以 epoll 并不会像 select 和 poll 一样随着监控的 fd 变多而效率降低，这种事件机制也是 epoll 要比 select 和 poll 高效的主要原因。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/15/bug/</guid>
            <title>bug</title>
            <link>https://aristotlednzk.github.io.com/2022/10/15/bug/</link>
            <category term="bug" scheme="https://aristotlednzk.github.io.com/categories/bug/" />
            <category term="bug" scheme="https://aristotlednzk.github.io.com/tags/bug/" />
            <pubDate>Sat, 15 Oct 2022 10:23:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bug&#34;&gt;#&lt;/a&gt; bug&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/14/GAN%E8%AF%BE%E9%A2%98/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/</guid>
            <title>相机手眼标定</title>
            <link>https://aristotlednzk.github.io.com/2022/10/14/GAN%E8%AF%BE%E9%A2%98/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/</link>
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/" />
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/tags/GAN%E8%AF%BE%E9%A2%98/" />
            <pubDate>Fri, 14 Oct 2022 16:29:02 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-眼在手上的手眼标定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-眼在手上的手眼标定&#34;&gt;#&lt;/a&gt; 1、眼在手上的手眼标定&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/dc166d3e745d411b8deff1c07d6bca08.png&#34; alt=&#34;眼在手上的手眼标定&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基础坐标系（用 base 表示） 是机器臂的基底坐标系，末端坐标系（用 end 表示） 是机器臂的末端坐标系， 相机坐标系（用 cam 表示） 是固定在机器臂上面的相机自身坐标系，标定物坐标系（用 cal 表示）是标定板所在的坐标系。任意移动两次机器臂，由于标定板和机器臂的基底是不动的，因此对于某个世界点，其在 base 坐标系和 cal 坐标系下的坐标值不变，在 end 坐标系和 cam 坐标系下的坐标值随着机器臂的运动而改变。根据这一关系，可以求解出 end 坐标系和 cam 坐标系之间的转换矩阵。&lt;/p&gt;
&lt;hr /&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</guid>
            <title>生成对抗网络</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</link>
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/" />
            <category term="生成对抗网络" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/" />
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/tags/GAN%E8%AF%BE%E9%A2%98/" />
            <pubDate>Wed, 12 Oct 2022 21:34:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2k2WXVRZkcyTkUxaGJienRpUkJMWGU=&#34;&gt;GAN 开山之作论文&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8yNjczNTkzMy9hcnRpY2xlL2RldGFpbHMvMTA4OTI1MjMy&#34;&gt;https://blog.csdn.net/weixin_26735933/article/details/108925232&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzg1MjEzODM=&#34;&gt;https://zhuanlan.zhihu.com/p/378521383&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GAN 架构包含两个子模式，分别称为&lt;strong&gt; Generator (G) 和&lt;/strong&gt; Discriminator (D) ，它们相互竞争，目的是通过训练过程达到 Nash 平衡。 生成器学习将潜在空间 (例如，噪声〜N &lt;em&gt;(0,1)&lt;/em&gt; ) 映射到在其上分发给定数据样本的数据空间，鉴别器评估生成器完成的映射。 生成器的主要作用是生成模仿训练数据集的合成数据，以使鉴别器无法将合成数据与真实数据区分开。&lt;/p&gt;
&lt;p&gt;生成器的输入是随机噪声矢量_x&#39;_ (通常是均匀或正态分布)。 噪声向量通过 Generator 映射到新的数据空间，以获得伪样本_G (x&#39;)_ ，它是多维向量。 鉴别器是一个二进制分类器，它吸收了生成的数据集和训练的数据集，并学习将它们分类为假的和真实的。** 当判别器无法确定数据来自真实数据集还是生成器时，便会达到 GAN 模型的最佳状态 **&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN.png&#34; class=&#34;&#34; title=&#34;GAN&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;可解释的生成对抗网络infogan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可解释的生成对抗网络infogan&#34;&gt;#&lt;/a&gt; 可解释的生成对抗网络：InfoGAN&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTk0NTE2NA==&#34;&gt;https://zhuanlan.zhihu.com/p/55945164&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDA5NjM4MQ==&#34;&gt;生成对抗网络 (GAN) 背后的数学理论&lt;/span&gt; 提到，generator 和 discriminator 的对抗学习，它的目标其实是得到一个与 real data 分布一致的 fake data 分布。&lt;/p&gt;
&lt;p&gt;但是由于 generator 的输入是一个&lt;strong&gt;连续的噪声信号&lt;/strong&gt;，并且&lt;strong&gt;没有任何约束&lt;/strong&gt;，导致 GAN 将 z 的具体维度与 output 的语义特征对应起来，可解释性很差。&lt;/p&gt;
&lt;p&gt;它的原理很简单，在 info GAN 里面，把输入向量 z 分成两部分，c 和 z&#39;。c 可以理解为可解释的隐变量，而 z 可以理解为不可压缩的噪声。希望通过约束 c 与 output 的关系，&lt;strong&gt;使得隐变量 c 的维度对应 output 的语义特征&lt;/strong&gt;，以手写数字为例，比如笔画粗细，倾斜度等。&lt;/p&gt;
&lt;p&gt;为了引入 c，作者&lt;strong&gt;通过互信息的方式来对 c 进行约束&lt;/strong&gt;，也可以理解成自编码的过程。具体的操作是，generator 的 output，经过一个分类器，看是否能够得到 c。其实可以看成一个 anto-encoder 的反过程。其余的 discriminator 与常规的 GAN 是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic1.zhimg.com/80/v2-b85a31bbe8ed2b42a3ad11a707720674_720w.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图片来自李宏毅老师生成对抗网络视频 https://www.youtube.com/watch?v=DMA4MrNieWo&amp;amp;list=PLJV_el3uVTsMq6JEFPW35BCiOQTsoqwNw&amp;amp;index=5&lt;/p&gt;
&lt;p&gt;在实际过程中，classifier 和 discriminator 会共享参数，只有最后一层是不一样的，classifier 输出的是一个 vector, discriminator 输出的是一个标量。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;第一章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章&#34;&gt;#&lt;/a&gt; 第一章：&lt;/h2&gt;
&lt;p&gt;生成器的优点在于生成很容易，但只学习了真实样本的表象，只学到了 component 和 component 像素和像素之间的相似度，而没有学到图像和图像的关联。可以用生成器取代下面方程，产生负样本，产生 x~&lt;/p&gt;
&lt;p&gt;以往是通过高斯混合模型定义 PG 然后用最大似然估计算出最优分布 PG 下的参数 sita，但这个模型可能更复杂，不用高斯…… 又难以计算。而现在用生成器找到一个分布，也就是用生成器可以生成一个很复杂的分布 PG。&lt;strong&gt;生成器 G 意图让生成的样本 PG 和真实样本 Pdata 之间的散度越小越好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN1.png&#34; class=&#34;&#34; title=&#34;GAN1&#34;&gt;PG 可以通过生成器的向量中生成，一张张图片，Pdata 可以通过真实数据集采样得到 那么如何通过生成器计算 PG 和 Pdata 的散度呢&lt;/p&gt;
&lt;p&gt;判别器优点在于能够学到整个图像的关联，但很难生成图像，需要解 x~=arg max D (x）方程&lt;/p&gt;
&lt;p&gt;1. 如何训练判别器 D 呢，首先固定 G，寻找让 max V (G,D) 的 D,。对每一个 x，都可以找一个不同的 D 让式子最大&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN2.png&#34; class=&#34;&#34; title=&#34;GAN2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;生成对抗网络 / GAN3.png&amp;quot; alt=&amp;quot;GAN3&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;生成对抗网络 / GAN4.png&amp;quot; alt=&amp;quot;GAN4&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;第一步：固定 G，寻找 D，让 V 函数 max&lt;br /&gt;
 第二步：在寻找到的 D 基础上固定不动，寻找让 maxV 最小的 G&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN5.png&#34; class=&#34;&#34; title=&#34;GAN5&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第四章基础理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章基础理论&#34;&gt;#&lt;/a&gt; 第四章：基础理论&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN6.png&#34; class=&#34;&#34; title=&#34;GAN6&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先给定 G，找到 D&lt;em&gt; 并求出 V 对 sitaG 的梯度，用于更新 sitaG 找一个 D&lt;/em&gt; 从而 maxV 的过程就是找到 Pdata 和 PG 之间的 JS 散度 V (G1,D1*) 的过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN7.png&#34; class=&#34;&#34; title=&#34;GAN7&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键是：&lt;strong&gt;当更新 G0 后函数 V 可能会变化&lt;/strong&gt;，而此时的 D*（使 V 最大的横坐标位置）可能就变了，再用之前的 D * 训练就不靠谱。因此只能每次更新 G 一点点，假设每次更新后函数变化很小和之前是类似的，因此不太可能出现右图情况。 &lt;strong&gt;因此生成器 G 不能训练太多，通常只更新一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN8.png&#34; class=&#34;&#34; title=&#34;GAN8&#34;&gt;&lt;/p&gt;
&lt;p&gt;期望 E 计算：实际上只能通过离散叠加求均值的方法来计算 V，实际上是从 Pdata 和 PG 中采样出一堆 x 来代替期望 E，训练一个二分类分类器→最小化交叉熵 = maxV&lt;/p&gt;
&lt;p&gt;训练判别器的目的是：为了评估 JS 散度 从 Pdata 中采用出一堆 x 作为正样本，从 PG 中采样出一堆 x 作为负样本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN9.png&#34; class=&#34;&#34; title=&#34;GAN9&#34;&gt;&lt;/p&gt;
&lt;p&gt;每轮训练迭代过程：&lt;/p&gt;
&lt;p&gt;1. 根据 Pdata（x）中采样 m 个 x，从先验分布中采样 m 个噪声向量 z→输入生成器→得到 m 个生成样本，更新判别器参数 sitad 从而→maxV&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;训练判别器目的&lt;/strong&gt;：为了估计 JS 散度才训练判别器，而用于估计 JS 散度的最优判别器的目标函数 V 是最大的，为了使其最大必定需要多轮重复迭代训练→直到收敛→&lt;strong&gt;可以更新 k 次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 训练生成器目的：** 为了最小化 JS 散度，而由于生成器每次训练会导致目标函数变化，&lt;strong&gt;因此每次只训练更新一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN10.png&#34; class=&#34;&#34; title=&#34;GAN10&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fgan框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fgan框架&#34;&gt;#&lt;/a&gt; fGAN 框架&lt;/h2&gt;
&lt;p&gt;用不同 f - 散度量生成样本和真实样本的差距 p (x) 和 q（x）分别代表从 x 从 p 分布和从 q 分布采样出来的几率 p 和 q 之间的散度：&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;info-ganvae-gan-bigan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#info-ganvae-gan-bigan&#34;&gt;#&lt;/a&gt; Info GAN,VAE GAN, BiGAN&lt;/h2&gt;
&lt;p&gt;编码器和解码器输入输出不相连，判别器输入 z 和图像，判断是来自编码器还是解码器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN11.png&#34; class=&#34;&#34; title=&#34;GAN11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN12.png&#34; class=&#34;&#34; title=&#34;GAN12&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/philosophy/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/</guid>
            <title>现象学/胡塞尔</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/philosophy/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/</link>
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/categories/philosophy/" />
            <category term="西哲" scheme="https://aristotlednzk.github.io.com/categories/philosophy/%E8%A5%BF%E5%93%B2/" />
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/tags/%E5%93%B2%E5%AD%A6%E7%A4%BE%E7%A7%91/" />
            <pubDate>Wed, 12 Oct 2022 21:29:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;现象学胡塞尔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现象学胡塞尔&#34;&gt;#&lt;/a&gt; 现象学 —— 胡塞尔&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzdjWFlOenFDSHY2eGdHR3hHcTc0aVI=&#34;&gt;事物的本质及认识&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;胡塞尔的现象学关注的是 “认识如何可能”&lt;strong&gt;（认识的过程）的问题，是对认识本身的批判，这是反对以往的科学仅仅关注 “认识的对象” 而并不关注&lt;/strong&gt;认识本身 ** 提出的。&lt;/p&gt;
&lt;p&gt;胡塞尔的核心命题就在解释：&lt;strong&gt;认识如何可能，或我们认识是否能与内在事物一致的问题&lt;/strong&gt;（我们能不能清除一切对实存的主观设定，而完全客观地看待事物本身）。&lt;/p&gt;
&lt;p&gt;在胡塞尔那里，&lt;strong&gt;被给予性&lt;/strong&gt;意味着 ：一个东西 “没有表述其他什么”“没有超越自身去意指什么” 它所展示的东西完全都是自身被给予的东西，胡塞尔认为人的 “思维” 就是这样一种东西，而以往的所有科学研究中，研究者都是带有主观设定和滤镜去看的，因此所有的物在科学研究那里都无法具有 “绝对的被给予性”，都是不可靠的。&lt;/p&gt;
&lt;p&gt;在胡塞尔那里，“意向性” 作为现象学的 “不可或缺的起点概念和基本概念” 标志着所有意识的本己特性，即：所有意识都是 “关于某物的意识” 并且作为这样一种意识而可以得到直接的指明和描述。关于某物的意识是指在广义上的意指行为与被意指之物本身之间可贯通的相互关系。&lt;/p&gt;
&lt;p&gt;对 “意向性” 之把握的惟一途径在胡塞尔看来是本质直观的反思：“在意向性被反思揭示并因此而自身成为课题之前，它始终是隐蔽着的”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/</guid>
            <title>远行者开篇</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <pubDate>Wed, 12 Oct 2022 16:52:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;初衷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初衷&#34;&gt;#&lt;/a&gt; 初衷&lt;/h2&gt;
&lt;p&gt;抱着将博客作为云笔记软件来用的想法，历时两天才醒悟，还是继续当个牌面吧……&lt;/p&gt;
&lt;h3 id=&#34;后续&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续&#34;&gt;#&lt;/a&gt; 后续&lt;/h3&gt;
&lt;p&gt;Maybe 日后还有别的用途？比如不定期更新个人读书笔记、随想录之类……&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/</guid>
            <title>亲密关系</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/</link>
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/categories/%E9%97%BB%E8%AF%B4/" />
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" />
            <pubDate>Tue, 11 Oct 2022 19:30:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;亲密关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#亲密关系&#34;&gt;#&lt;/a&gt; 亲密关系&lt;/h1&gt;
&lt;p&gt;练习：写下初遇时在伴侣身上发现的所有优点和相处至今的优点，另一张纸上写现在在对方身上看到的缺点，第一张表上列的每一项得十分，第二章表上列的扣十分&lt;/p&gt;
&lt;p&gt;1、最初被某人吸引通常是由于情绪上的需求，这些需求来源于孩提时代未被满足的需要。孩童时期的主要需求：寻求归属感 —— 证明自己具有特殊价值 ——“想要变得特别”&lt;br /&gt;
 期待一个能无视我们所有缺点并且对自己的需求极大的人。&lt;/p&gt;
&lt;p&gt;2、制造梦想的机器：从童年时期就开始绘制能满足自己一切期待的理想对象，随着年龄增长，期望越来越高&lt;br /&gt;
 3、如果在现实中寻觅不到就开始在相处中对她未满足自己需求的方面进行改造&lt;/p&gt;
&lt;h2 id=&#34;月晕期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#月晕期&#34;&gt;#&lt;/a&gt; 月晕期&lt;/h2&gt;
&lt;h3 id=&#34;通往地狱之路是用期望铺成的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通往地狱之路是用期望铺成的&#34;&gt;#&lt;/a&gt; 通往地狱之路，是用期望铺成的&lt;/h3&gt;
&lt;p&gt;期待与要求分为明说和暗示，在需求得到满足前我们不愿意去爱。&lt;/p&gt;
&lt;p&gt;然而我的期望让我不能得到安抚，期望的目的是要让需求得到满足，但与此同时必然会出现两件事：&lt;br /&gt;
（1）我们内心缺乏爱，如果我们需要 sth，是因为我们没有&lt;br /&gt;
（2）如果没有 sb 满足我们的需求，我们会觉得世界上没有足够的爱 —— 希望从他人身上得到爱只会让 “无人爱我” 的想法更牢不可破&lt;/p&gt;
&lt;p&gt;因此期望是愤恨的前兆&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;       在对亲密关系不满意时问问自己，此时希望从伴侣身上得到的是什么？本质上是情绪上的事物，表面上看来则是实质的需求。&lt;/p&gt;
&lt;p&gt;例：约好七点见面，但她八点才来，我不高兴但&lt;strong&gt;真正原因不是她迟到而是她让我觉得自己不够特别&lt;/strong&gt; —— 我希望她让我觉得自己很重要，重要到她应该愿意为了我而守时&lt;/p&gt;
&lt;p&gt;了解自己期望背后的需求，我们通常只是希望伴侣做或说一些事，但却不会意识到我们希望他们这么做其实是满足自己某些情绪上的需求 —— 我们希望曲儿我们值得被爱&lt;/p&gt;
&lt;p&gt;想象力、意向和直觉&lt;/p&gt;
&lt;p&gt;灵魂思考的方式 —— 直觉&lt;/p&gt;
&lt;p&gt;当找到自己真正的情绪需求后再问自己：我愿不愿意放弃这项期望呢 —— 我愿不愿意寻求自己内在的力量来满足我的所有需求呢？&lt;/p&gt;
&lt;p&gt;如果答案是肯定的，那么&lt;strong&gt;直觉会告诉你该如何放手了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你有精神上的信仰，那么不妨把需求交给内心中高层次的力量&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;如果决定放手那么如何满足需求呢事实是我们并不需要自己认为需要的东西&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果决定放手那么如何满足需求呢事实是我们并不需要自己认为需要的东西&#34;&gt;#&lt;/a&gt; 如果决定放手，那么如何满足需求呢？
—— 事实是，我们并不需要自己认为需要的东西&lt;/h3&gt;
&lt;p&gt;学会放手和接纳，明白自己原本就是一个完整的个体，所需的一切都存在于你的内心&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;幻灭期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#幻灭期&#34;&gt;#&lt;/a&gt; 幻灭期&lt;/h2&gt;
&lt;p&gt;随着愤恨的到来，标志着进入第二阶段 —— 幻灭&lt;/p&gt;
&lt;p&gt;幻灭带来偏差行为：&lt;br /&gt;
引起注意、权力斗争：满足孩子的两大需求&lt;br /&gt;
报复心理、自我放逐：当孩子觉得需求永远不会被满足时被深刻的沮丧痛苦驱使做出毁灭性行为&lt;/p&gt;
&lt;p&gt;       远离造成痛苦的人并不会让痛苦消失，伴侣只是让我发觉到痛苦的存在。唤醒过去的伤痛，想要疗伤的企图往往导致亲密关系危机，和伴侣吵架只是为了不去感受旧痛，而伴侣所做的仅仅是让旧痛浮上意识表层。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;信念想法的果实&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信念想法的果实&#34;&gt;#&lt;/a&gt; 信念：想法的果实&lt;/h2&gt;
&lt;p&gt;种下想法，就得到行动。种下行动，就得到习惯。&lt;br /&gt;
种下习惯，就得到人格。种下人格，就得到命运。&lt;/p&gt;
&lt;p&gt;过去的创伤并不会随时间逝去，每个自我局限的信念都来自过去的创伤、痛苦的经验。所有未愈合伤口的信念都是自我局限的，&lt;/p&gt;
&lt;p&gt;——&lt;strong&gt; 如果离开家的时候，你并不感到平静，那么你其实并没有离开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;亲密关系中蕴含着治好旧伤的机会。而大多数情况是双方都试图控制对方的行为，借以控制过去的创伤。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB-16660629207261.png&#34; class=&#34;&#34; title=&#34;亲密关系&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/philosophy/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</guid>
            <title>王阳明心学</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/philosophy/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</link>
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/categories/philosophy/" />
            <category term="中哲" scheme="https://aristotlednzk.github.io.com/categories/philosophy/%E4%B8%AD%E5%93%B2/" />
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/tags/%E5%93%B2%E5%AD%A6%E7%A4%BE%E7%A7%91/" />
            <pubDate>Tue, 11 Oct 2022 19:29:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;王阳明心学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#王阳明心学&#34;&gt;#&lt;/a&gt; 王阳明心学&lt;/h1&gt;
&lt;p&gt;一、人具有无限心&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人作为时间性存在，总是以筹划尚不存在的未来的形式活在当下 —— 证明了人心的无限性 —— 能超越现实；因而烦恼从中来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关键在于安顿无限心。&lt;/p&gt;
&lt;p&gt;在官场上，中国政治的传统模式一天不变，中南海和秦城监狱之间就一步之遥。高官俸禄之有限，&lt;strong&gt;而无限心无法安顿在有限的事物上，因为现实世界的事物无一不是有限的。因此无限心只能安顿在超越现实的世界中（出世 —— 从现实世界的利害中超拔出来），而无法安顿在现实世界中&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;儒家：无所为而为。如果从未出世，那么做事总是有所为而为，做事都有目标目的，始终把自己做的事情看作是达到另外一个目的手段。&lt;br /&gt;
无所为而为 —— 这件事本应当做，它就是自己的价值 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;道家：无为而无不为。不以人为的方式做事。人 + 为 = 伪 = 造作，生非贵之所能存，身非爱之所能厚，遇矛盾先将属于自己的&lt;strong&gt;人为因素去除&lt;/strong&gt;，在最终还是不得不去处理时再去做，时机恰到好处，方法顺应天道。最好的人生就是没有目标的人生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;佛家：无心而为。每个人做什么自有来历 —— 业力。&lt;strong&gt;做事就是消业，不求结果，最好没有结果，若有结果则旧业未消又增新业。但凡事都有结果，力求结果与己无关。&lt;/strong&gt; 认真做事，但对结果漠不关心 ——&lt;strong&gt; 除心不除事&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;业力：每个人都生来带着业力&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;人并非拥有选择自己拥有某种愿望的能力，只是拥有选择实现愿望的道路的能力，什么愿望来到我们心里并不是我们的自由，愿望就这么来了……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西方哲学 —— 自身问题：关于世界的客观知识的前提基础是什么，获得客观可靠有效知识的方法是什么&lt;/li&gt;
&lt;li&gt;中国哲学 —— 人生问题；佛学中国化（两汉之际）禅宗，儒道佛合流 (两宋时期)—— 王阳明心学&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;一体之仁，当我们对鸟兽虫鱼的哀鸣生出恻隐之心，当我们与鸟兽虫鱼连为一体，人心感通宇宙万物，中国宇宙观。心之理 —— 不是心外之理，真理不要到心外去寻求 —— 万物皆备于我，反身而成，乐莫大焉。上乘孟子 “学问之道无他，求其放心而已”，学问 —— 已经被亡失的心重新召回。&lt;/p&gt;
&lt;p&gt;《金刚经》核心思想 ——&lt;strong&gt; 因无所住而生其心&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛学中国化：禅宗 16 字法门：教外别传，不立文字，直指人心，见性成佛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不求出离生死之苦海，自性若迷。&lt;/li&gt;
&lt;li&gt;不睹众相常观金体。&lt;/li&gt;
&lt;li&gt;六色 —— 眼耳鼻舌身意 —— 着相；观金体本身 —— 不住相。&lt;/li&gt;
&lt;li&gt;佛法在世间，不离世间觉。离世觅菩提，恰如求兔角。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt; &amp;lt;img src=https://tva3.sinaimg.cn/large/0071tL0Nly8h760vrtpq6j30u00u0myt.jpg width=60%/&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/computer-science/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/</guid>
            <title>转码之路</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/computer-science/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/</link>
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/categories/computer-science/" />
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/tags/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/" />
            <pubDate>Tue, 11 Oct 2022 19:26:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;转码之路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转码之路&#34;&gt;#&lt;/a&gt; 转码之路&lt;/h1&gt;
&lt;p&gt;鱼皮学习路线&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbGl5dXBpL2NvZGUtcm9hZG1hcC9ibG9iL21haW4vZG9jcy9yb2FkbWFwL0phdmElRTUlQUQlQTYlRTQlQjklQTAlRTglQjclQUYlRTclQkElQkYubWQjaHR0cHM6Ly9naXRlZS5jb20vbGluaz90YXJnZXQ9aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2ludGVsbGlnZW50VGVzdA==&#34;&gt; https://gitee.com/liyupi/code-roadmap/blob/main/docs/roadmap/Java 学习路线.md#https://gitee.com/link?target=https%3A%2F%2Fwww.nowcoder.com%2FintelligentTest&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;API 在线文档&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2FwaWRvY3MvYXBpZG9jP2FwaT1qZGtfN3U0&#34;&gt; https://tool.oschina.net/apidocs/apidoc?api=jdk_7u4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzN4QjlGQkZMVmhkMWk2dWNmZ3NIR0I=&#34;&gt;面经资料&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzJMTGpnZGdjM25pZ1l4WnFSakhRRUU=&#34;&gt;岗位分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3dkakU3WEdRNzhmTURUZnFTTXpTU0M=&#34;&gt;简历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2NhelNUZm1iTkgxTjE0OThUM1dmUUc=&#34;&gt;后端指导大纲&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzJQOUVTVFRxdUhpOUhtdTFVQVpVVlI=&#34;&gt;GIT&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2dvSzl5Rnlud29lOWlQdU43aWVETlU=&#34;&gt;Linux&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3I0NGFVUWlkUkVtUEFxTU14QWhHdUY=&#34;&gt;C++&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzRHRlhoMW95N2pyblhMMW1vclhyN28=&#34;&gt;力扣刷题笔记&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2plYmJYOG9uZG1VRUtqaWlRd01rOTY=&#34;&gt;JAVA 基础笔记&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzRzYkt1TmtRc0NyVkY5Z0tESkMyaFg=&#34;&gt;MySQL（DB）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2VXZ0F6OTdEaTdjZHZpcThtU1o3cXM=&#34;&gt;JVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2oyeVF6QVlHSjk2SHlWa3JHZ25GTFY=&#34;&gt;JUC 并发编程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2UyUzNHZjZ4VkJtS3p3VVk3N2tqUnc=&#34;&gt;三件套&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3FMRHRaMXlBOUZhV3g4dkQxcVlBN1c=&#34;&gt;排序算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzlFaFl6RnF5V1hZY0Ryc2VtdjhidTE=&#34;&gt;Spring 框架&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzYyWlI1bTJBVER6OFoyUXdTN21rTTE=&#34;&gt;Redis&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzlDWUFFell4RXY3bzdoUnoxWHN3Q0E=&#34;&gt;Docker&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2p5VkdDdGZSYzRDeTFmaVlVWW1CdUI=&#34;&gt;Acwing 算法基础课&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5CWolai%5C%E7%AC%94%E8%AE%B0%5C%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF%5Cimage%5Cimage_v6vkTMI4J5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;java学习路线一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java学习路线一&#34;&gt;#&lt;/a&gt; Java 学习路线一&lt;/h2&gt;
&lt;p&gt;牛客链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2Rpc2N1c3MvNDY0NzUwP3R5cGU9cG9zdCZhbXA7b3JkZXI9cmVjYWxsJmFtcDtwb3M9JmFtcDtwYWdlPTEmYW1wO25jVHJhY2VJZD0mYW1wO2NoYW5uZWw9LTEmYW1wO3NvdXJjZV9pZD1zZWFyY2hfcG9zdF9uY3RyYWNrJmFtcDtnaW9faWQ9QjcyMkIxMkMyODNEN0MwRDAxQzFCRDUxNTY5QTU2OTYtMTY1Nzg3Mzk3MDUwNA==&#34;&gt;https://www.nowcoder.com/discuss/464750?type=post&amp;amp;order=recall&amp;amp;pos=&amp;amp;page=1&amp;amp;ncTraceId=&amp;amp;channel=-1&amp;amp;source_id=search_post_nctrack&amp;amp;gio_id=B722B12C283D7C0D01C1BD51569A5696-1657873970504&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;1 JVM&lt;/p&gt;
&lt;p&gt;内存模型、垃圾收集&lt;a href=&#34;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&#34; title=&#34;算法&#34;&gt;算法&lt;/a&gt;与垃圾收集器、内存溢出与内存泄漏是重点，JVM 调优也学一下；&lt;/p&gt;
&lt;p&gt;2 spring&lt;/p&gt;
&lt;p&gt;3 springmvc&lt;/p&gt;
&lt;p&gt;4 mybatis&lt;/p&gt;
&lt;p&gt;5 springboot&lt;/p&gt;
&lt;p&gt;框架不但要会用，也要能清晰原理比如自动配置的原理；&lt;/p&gt;
&lt;p&gt;6 多线程 同步 并发等（这很重要）&lt;/p&gt;
&lt;p&gt;生产者消费者模式代码、synchronized、lock、各种锁机制和锁升级；&lt;/p&gt;
&lt;p&gt;7 一些常见的数据结构与&lt;a href=&#34;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&#34; title=&#34;算法&#34;&gt;算法&lt;/a&gt;的底层 比如 Hash 、ConcurrentHashMap、LinkedHashMap、LRU (LRU 要会自己敲底层实现，其实跟 LinkedHashMap 差不多)；&lt;/p&gt;
&lt;p&gt;8 设计模式&lt;/p&gt;
&lt;p&gt;关于设计模式我并没有单独拎出来学习，而是在学框架的时候用到了什么就补充了一下。&lt;/p&gt;
&lt;p&gt;比如学到 bean 的作用范围的时候补充学习了一下单例模式；&lt;/p&gt;
&lt;p&gt;学 IOC 的时候补充学习了一下工厂模式；&lt;/p&gt;
&lt;p&gt;学 AOP 的时候补充学习了代理模式；&lt;/p&gt;
&lt;p&gt;学习 Redistemplate 的时候补充学习了模板模式；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强化阶段：（强化阶段学的还不太好，会在毕业前进行再强化）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 &lt;a href=&#34;/jump/super-jump/word?word=redis&#34; title=&#34;redis&#34;&gt;redis&lt;/a&gt;（很重要，务必要熟练掌握，好像每次面试都被问到了）&lt;/p&gt;
&lt;p&gt;热 key 和大 key 问题、击穿、穿透、雪崩、数据类型底层、RDB&amp;amp;AOF、实现消息中间件（发布者订阅者模式）、过期与淘汰策略。&lt;/p&gt;
&lt;p&gt;2 分布式（主要学的分布式锁 分布式事务）&lt;/p&gt;
&lt;p&gt;3 微服务&lt;/p&gt;
&lt;p&gt;4 消息中间件（我努力加强）&lt;/p&gt;
&lt;h2 id=&#34;学习路线3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习路线3&#34;&gt;#&lt;/a&gt; 学习路线 3&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2FvbGVpQ29kaW5nL3AvNjE3MDU1NS5odG1s&#34;&gt;https://www.cnblogs.com/caoleiCoding/p/6170555.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;经验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经验&#34;&gt;#&lt;/a&gt; 经验&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142%5Ev35%5Eexperiment_2_v1&amp;amp;utm_term=%E5%B0%9A%E7%A1%85%E8%B0%B7MySQL&amp;amp;spm=1018.2226.3001.4187&#34; title=&#34;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142^v35^experiment_2_v1&amp;amp;utm_term=尚硅谷MySQL&amp;amp;spm=1018.2226.3001.4187&#34;&gt;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142&lt;sup&gt;v35&lt;/sup&gt;experiment_2_v1&amp;amp;utm_term = 尚硅谷 MySQL&amp;amp;spm=1018.2226.3001.4187&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5CWolai%5C%E7%AC%94%E8%AE%B0%5C%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF%5Cimage%5Cimage_A80nTpU_Sw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2NIeEJMSENtS253ZFJSM0J0MTFWNFU=&#34;&gt;IDEA 架构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3FNeFRSVDdIYmQ3NndzNUxXQlhYYzU=&#34;&gt;配置环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3hnRjVVclpTNzdFRHJMcGhrQWFMMlE=&#34;&gt;设计模式&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;神的博客笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#神的博客笔记&#34;&gt;#&lt;/a&gt; 神的博客笔记：&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sdnh1ZXlhbmcudmlwL3RhZ3MvSnVjLw==&#34;&gt;https://lvxueyang.vip/tags/Juc/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueXVxdWUuY29tL2Z1eXVzYWthaW9yaS95YmMyZzg/dGhlbWU9bGlnaHQ=&#34;&gt;https://www.yuque.com/fuyusakaiori/ybc2g8?theme=light&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzU0N2JKYzNwallzWmlDR21pcG5GOGE=&#34;&gt;英文储备&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
