<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>远行者回忆录——人类往事</subtitle>
        <icon>https://aristotlednzk.github.io.com/images/favicon.ico</icon>
        <link>https://aristotlednzk.github.io.com</link>
        <author>
          <name>Sean Barrett</name>
        </author>
        <description>思及我域</description>
        <language>zh-CN</language>
        <pubDate>Tue, 18 Oct 2022 19:00:56 +0800</pubDate>
        <lastBuildDate>Tue, 18 Oct 2022 19:00:56 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/18/%E8%A8%80/%E5%8F%B0%E9%A3%8E%E4%B8%8E%E7%A7%8B/</guid>
            <title>台风与秋</title>
            <link>https://aristotlednzk.github.io.com/2022/10/18/%E8%A8%80/%E5%8F%B0%E9%A3%8E%E4%B8%8E%E7%A7%8B/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <category term="随笔集" scheme="https://aristotlednzk.github.io.com/tags/%E9%9A%8F%E7%AC%94%E9%9B%86/" />
            <pubDate>Tue, 18 Oct 2022 19:00:56 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;深圳の秋&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深圳の秋&#34;&gt;#&lt;/a&gt; 深圳の秋&lt;/h3&gt;
&lt;p&gt;三点一线的路上：&lt;br /&gt;
浮现出蚀之刻、真理与斗争的画面……&lt;/p&gt;
&lt;p&gt;食堂：&lt;br /&gt;
每次咬合齿肉镶嵌的冲击&lt;br /&gt;
思考，进食动作带来的快感……&lt;/p&gt;
&lt;p&gt;寒雨台风林海声：&lt;br /&gt;
来自它的呼唤&lt;br /&gt;
与世俱灭的斗志不允许你回顾从前……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;远行即远征&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/15/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B-socket%E7%AF%87/</guid>
            <title>Linux高性能服务器编程/socket篇</title>
            <link>https://aristotlednzk.github.io.com/2022/10/15/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B-socket%E7%AF%87/</link>
            <category term="C++" scheme="https://aristotlednzk.github.io.com/categories/cpp/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/" />
            <category term="webserver" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/webserver/" />
            <category term="socket篇" scheme="https://aristotlednzk.github.io.com/categories/cpp/%E9%A1%B9%E7%9B%AE/webserver/socket%E7%AF%87/" />
            <category term="C++" scheme="https://aristotlednzk.github.io.com/tags/C/" />
            <category term="webserver" scheme="https://aristotlednzk.github.io.com/tags/webserver/" />
            <category term="socket篇" scheme="https://aristotlednzk.github.io.com/tags/socket%E7%AF%87/" />
            <category term="项目" scheme="https://aristotlednzk.github.io.com/tags/%E9%A1%B9%E7%9B%AE/" />
            <pubDate>Sat, 15 Oct 2022 17:10:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;socket地址api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket地址api&#34;&gt;#&lt;/a&gt; socket 地址 API&lt;/h2&gt;
&lt;p&gt;字节序问题：CPU 累加器一次装载 4 个字节，那么 4 个字节在内存中排列的顺序将影响它被累加器装载成的整数的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机字节序 &amp;amp; 网络字节序：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大端字节序：一个整数的高位字节存储在内存的低位地址，低位字节（0-7bit）存储在内存高位地址， 称为&lt;strong&gt;网络字节序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小端字节序相反→现代多采用：称为&lt;strong&gt;主机字节序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用socket地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用socket地址&#34;&gt;#&lt;/a&gt; 通用 socket 地址：&lt;/h3&gt;
&lt;p&gt;AF_前缀表示地址族， PF_前缀表示协议族。&lt;/p&gt;
&lt;p&gt;unsigned short int→两个字节&lt;/p&gt;
&lt;p&gt;旧版：&lt;/p&gt;
&lt;p&gt;sa_family_t sa_family;//sa_family_t 地址族类型 char sa_data [14];// 只有 14 个字节&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B-socket%E7%AF%87/image.png&#34; class=&#34;&#34; title=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;专用socket地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#专用socket地址&#34;&gt;#&lt;/a&gt; 专用 socket 地址&lt;/h3&gt;
&lt;p&gt;在设置和获取 IP 地址和端口号的上海更方便&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 协议族 sockaddr_in 和 sockaddr_in6 两个专用 socket 地址结构体，分别用 IP v4 和 IP v6 所有 socket 编程接口使用的地址参数类型都是&lt;strong&gt; sockaddr&lt;/strong&gt;→专用 socket 地址类型的遍历实际使用需要转换为通用 socket 地址类型 sockaddr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/15/cpp/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B-socket%E7%AF%87/2.png&#34; class=&#34;&#34; width=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;sockaddr_in 每段都划分好了相应成员，最终转换为 sockaddr 指针即可&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// TCP/IP 协议族有 sockaddr_in 和 sockaddr_in6 两个专用的 socket 地址结构体，它们分别用于 IPv4 和 IPv6：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sockaddr_in&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;sa_family_t&lt;/span&gt; sin_family; &lt;span class=&#34;comment&#34;&gt;/* _*SOCKADDR_COMMON(sin*) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt; sin_port; &lt;span class=&#34;comment&#34;&gt;/* Port number. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in_addr&lt;/span&gt; sin_addr; &lt;span class=&#34;comment&#34;&gt;/* Internet address. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Pad to size of `struct sockaddr&amp;#x27;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; sin_zero[&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; sockaddr) - __SOCKADDR_COMMON_SIZE - &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt;) - &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in_addr&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt; s_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sockaddr_in6&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;sa_family_t&lt;/span&gt; sin6_family;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt; sin6_port; &lt;span class=&#34;comment&#34;&gt;/* Transport layer port # */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; sin6_flowinfo; &lt;span class=&#34;comment&#34;&gt;/* IPv6 flow information */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in6_addr&lt;/span&gt; sin6_addr; &lt;span class=&#34;comment&#34;&gt;/* IPv6 address */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; sin6_scope_id; &lt;span class=&#34;comment&#34;&gt;/* IPv6 scope-id */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ip地址转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip地址转换&#34;&gt;#&lt;/a&gt; IP 地址转换&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串 ip - 整数和主机 - 网络字节序的转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常，人们习惯用可读性好的&lt;strong&gt;字符串来表示 IP 地址&lt;/strong&gt;，比如用点分十进制字符串表示 IPv4 地址，以及用十六进制字符串表示 IPv6 地址。但编程中我们需要先把它们转化为整数（二进制数）方能使用。而记录日志时则相反，我们要把整数表示的 IP 地址转化为可读的字符串。下面 3 个函数可用于用&lt;strong&gt;点分十进制字符串表示的 IPv4 地址和用网络字节序整数表示的 IPv4 地址&lt;/strong&gt;之间的转换：&lt;/p&gt;
&lt;p&gt;只适用于 IP v4：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_addr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cp)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//该函数返回值类型为in_addr_t=uint32_t=unsigned int类型，参数为字符常量 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_aton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cp, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr *inp)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//将点分十进制地址转换为网络字节序地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr in)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;inet_aton () 函数将将点分十进制地址转换为二进制的网络字节序地址，结 ** 果地址保存在结构体类型为 in_addr 的 inp 中，** 该结构体第一个成员为 uint32_t 类型（unsigned int 类型）的 in_addr_t。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回值：1 表示转换成功，0 表示失败有错误号 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同时适用于 IP v4 和 IP v6：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// **p:点分十进制的IP字符串**，n:表示network，网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_pton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; af, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *src, &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *dst)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;af:地址族： AF_INET AF_INET6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src:需要转换的点分十进制的IP字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst:转换后的结果保存在这个里面  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的整数，转换成点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;inet_ntop&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; af, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *src, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *dst, &lt;span class=&#34;type&#34;&gt;socklen_t&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;af:地址族： AF_INET AF_INET6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src: 要转换的ip的整数的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst: 转换成IP地址字符串保存的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;size：第三个参数的大小（数组的大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**返回值：返回转换后的数据的地址（字符串），和 dst 是一样的**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// p:点分十进制的IP字符串，n:表示network，网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;int inet_pton(int af, const char *src, void *dst);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;af:地址族： AF_INET  AF_INET6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;src:需要转换的点分十进制的IP字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;dst:转换后的结果保存在这个里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的整数，转换成点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;af:地址族： AF_INET  AF_INET6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;src: 要转换的ip的整数的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;dst: 转换成IP地址字符串保存的地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;size：第三个参数的大小（数组的大小）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;返回值：返回转换后的数据的地址（字符串），和 dst 是一样的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一个ip字符串,点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.4&amp;quot;&lt;/span&gt;;**&lt;span class=&#34;comment&#34;&gt;//第二个参数类型为字符数组**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;**&lt;span class=&#34;comment&#34;&gt;//第三个参数的类型为无符号整型的地址---注意传入地址加&amp;amp;**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将点分十进制的IP字符串转换成网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;inet_pton&lt;/span&gt;(AF_INET, buf, &amp;amp;num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * p = (&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&amp;amp;num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//把四个字节分别打印出来：每次+1=字节+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d %d %d %d\n&amp;quot;&lt;/span&gt;, *p, *(p+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), *(p+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), *(p+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的IP整数转换成点分十进制的IP字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; ip[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * str =  &lt;span class=&#34;built_in&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &amp;amp;num, ip, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;str : %s\n&amp;quot;&lt;/span&gt;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ip : %s\n&amp;quot;&lt;/span&gt;, ip);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, ip == str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解析 unsigned char * p = (unsigned char *)#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;二.(unsigned char *)&amp;amp;a 运算顺序 1. 先取 a 的地址 2. 将 &amp;amp; a 强制类型转化为 unsigned char * 类型，也就是指向 a 的地址 3. 取出 unsigned char * 指针的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;客户端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端&#34;&gt;#&lt;/a&gt; 客户端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket&#34;&gt;#&lt;/a&gt; 创建 socket&lt;/h3&gt;
&lt;h3 id=&#34;连接函数connect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接函数connect&#34;&gt;#&lt;/a&gt; 连接函数 connect&lt;/h3&gt;
&lt;p&gt;TCP 客户通过 connect 函数来建立与 TCP 服务器的连接：&lt;/p&gt;
&lt;p&gt;int connect (int sockfd, const struct sockaddr *servaddr,socklen_t addrlen); 返回：成功则为 0，若出错则为 - 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释： sockfd 是由 socket 数返回的套接字描述符 第 2 个、第 3 个参数分别是一个指向套接字地址结构的指针和该结构的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户在调用函数 onnect 前不必非得调用 bind 函数， 因为如果需要的话，内核会确定源 IP 地址，并选择 个临时端口作为源端口。TCP 套接字调用 connect 函数会激发 TCP 三次握手，仅在连接成功或出错时返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect 函数建立导致客户端套接字从 CLOSED 状态转为→SYN_SENT 状态&lt;/li&gt;
&lt;li&gt;若 connect 失败则该套接字不再可用，必须关闭，不能对该套接字再次调用 connect 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端&#34;&gt;#&lt;/a&gt; 服务端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket可读写控制关闭的文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket可读写控制关闭的文件描述符&#34;&gt;#&lt;/a&gt; 创建 socket：可读写控制关闭的文件描述符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;int socket( int domain,int type,int protocol)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;domain 参数告诉系统使用哪个底层协议簇，TCP/IP 使用 PF_INET（IPV4）&lt;/li&gt;
&lt;li&gt;type 指定服务类型：主要包括 SOCK_STREAM（流服务）和 SOCK_UGRAM（数据报服务）。对 TCP/IP 协议族而言，&lt;strong&gt;SOCK_STREAM*&lt;em&gt;*&lt;em&gt; 表示传输层使用 TCP 协议，*&lt;/em&gt;**SOCK_DGRAM**&lt;/em&gt;* 表示传输层使用 UDP 协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;protocol 参数是在前两个参数构成的协议集合下，再选择一个具体的协议，不过这个值通常是唯一的（由前两个参数完全决定），&lt;strong&gt;几乎在所有情况下都设置为 0，表示使用默认协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用成功返回一个&lt;strong&gt; socket 文件描述符（小的非负整数值）=sockfd&lt;/strong&gt;，失败返回 - 1 并设置 errno&lt;/p&gt;
&lt;h3 id=&#34;命名socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名socket&#34;&gt;#&lt;/a&gt; 命名 socket&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建 socket 时，我们给它指定了地址族，但并未指定具体用哪个地址 给 socket 命名：将一个 socket 与 socket 地址绑定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端采用匿名方式 —— 使用操作系统自动分配的 socket 地址：把 一个本地协议地址赋给 一个套接字 系统调用函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int bind(int sockfd,const struct sockaddr* my_addr,socklen_t addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bind 将 my_addr 所指向的 socket 地址分配给未命名的 sockfd 文件描述符，addrlen 参数指出该 socket 地址的长度。&lt;/li&gt;
&lt;li&gt;bind 成功则返回 0，失败返回 - 1 并设置 errno 包括以下两种&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EACCES: 被绑定的地址是受保护的地址 EADDRINUSE: 被绑定的地址正在使用中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;上述两个函数都需要: include &amp;lt;sys/types.h&amp;gt; include&amp;lt;sys/socket.h&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;监听socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监听socket&#34;&gt;#&lt;/a&gt; 监听 socket&lt;/h3&gt;
&lt;p&gt;socket 被命名后需要使用系统调用创建一个监听队列来存放待处理的客户连接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int listen( int sockfd,int backlog);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;listen 函数仅由 TCP 服务器调用，并做如下两件事：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;listen 函数创建一个套接字时，他被假设为一个主动套接字。listen 函数把 1 个未连接的套接字转换成 1 个被动套接字，指示内核接受指向套接字的连接请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数规定了内核应该为相应套接字排队的最大连接个数。 内核为每个给定的监听套接字维护两个队列：&lt;/p&gt;
&lt;p&gt;（1）未完成连接队列：每个 SYN 分节对应队列中的一项，套接字正处于 SYN_RCVD 状态&lt;/p&gt;
&lt;p&gt;（2）已完成连接队列：每个已完成三次握手的客户对应队列中的一项，套接字处于 ESTABLISHED 状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 每当来自客户的 SYN 到达，&lt;strong&gt;TCP 在未完成连接队列中创建一个新项&lt;/strong&gt;，然后服务器响应 SYN 第二个分节，并捎带对客户的 SYN 的 ACK。该项一直保留在未完成连接队列中，直到三次握手第三个分节到达或该项超时为止。如果三次握手正常，该项则&lt;strong&gt;从未完成连接队列转移到已完成连接队列的队尾&lt;/strong&gt;。 2. 当进程调用 accept 函数时，已完成连接队列中的队头项将返回给进程，如果该队列为空那么进程将被投入睡眠，直到 TCP 在该队列中放入一项才唤醒它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数指定被监听的 socket。&lt;/li&gt;
&lt;li&gt;backlog 参数提示内核&lt;strong&gt;监听队列的最大长度&lt;/strong&gt;→监听队列长度如果超过 backlog，服务器将不手里新的客户连接，客户端将收到 ECONNREFUSED 错误信息，以前表示已连接队列 + 半连接队列之和&lt;/li&gt;
&lt;li&gt;listen 成功返回 0，失败返回 - 1 并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接受连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接受连接&#34;&gt;#&lt;/a&gt; 接受连接&lt;/h3&gt;
&lt;p&gt;accept 函数由 TCP 服务器调用，用于&lt;strong&gt;从已完成连接队列队头返回下一个已完成连接&lt;/strong&gt;。&lt;strong&gt;从 listen 监听队列中接受一个连接&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int accept(int sockfd,struct sockaddr *addr,socklen_t *addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数是执行过 listen 系统调用的监听 socket 套接字描述符&lt;/li&gt;
&lt;li&gt;addr 参数获取被接受连接的远端 socket 地址&lt;/li&gt;
&lt;li&gt;远端 socket 地址结构长度由 * addrlen 参数所引用的整数值设置，返回时，该整数值为该套接字地址结构内的确切字节数&lt;/li&gt;
&lt;li&gt;accept 成功时，&lt;strong&gt;那么其返回值是由 内核自动 生成的 1 个套接字全新描述符&lt;/strong&gt; = 称为&lt;strong&gt;已连接套接字描述符&lt;/strong&gt;，该 socket 唯一地表示了被接受的这个连接。失败则返回 - 1 并设置 errno。如果&lt;strong&gt;已完成连接队列为空，那么进程被投入睡眠&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器可以通过该 socket 来与被接受连接对应的客户端通信&lt;/p&gt;
&lt;p&gt;已连接套接字每次在循环中关闭，但监听套接字在服务器的整个有效期内都保持开放&lt;/p&gt;
&lt;p&gt;而现在由于考虑到 syn 攻击，backlog 参数的含义改为了已连接队列之和，去除了半连接队列之和了。&lt;/p&gt;
&lt;p&gt;举一个例子，在 socket 编程当中，如果我们在服务端不用 accept 函数，listen 函数的第二个参数设置为 5，那么这个时候，可以成功连接的客户端就是最多可以成功连入 5 个，每连入一个，队列的项数就会加一 (减一的话就是用 accept 函数去取出来)，所以当项数达到 5 时，客户端自然就会连不上了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意本函数最多返回三个值：分别对应函数三个参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新套接字描述符 / 出错指示整数&lt;/li&gt;
&lt;li&gt;客户进程的协议地址→addr&lt;/li&gt;
&lt;li&gt;客户进程的协议地址大小→addrlen&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;socket状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket状态&#34;&gt;#&lt;/a&gt; socket 状态&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;调用 socket 函数创建了一个套接字以后，改套接字就对应的和相应的输出缓冲区和输入缓冲区建立了联系，此时改套接字的状态正处于 CLOSED (观察 TCP 状态转换图即可)&lt;/li&gt;
&lt;li&gt;当我们调用 listen 函数以后，改套接字的状态就变成了 LISTEN 监听状态，此时，处于等待客户端连入的状态。&lt;/li&gt;
&lt;li&gt;对于一个调用 listen 进行监听的套接字’操作系统会为其维护 2 个队列：未完成连接队列和已完成连接队列。 （1）未完成连接队列中的连接 当客户端发送 TCP 连接三次握手的第 1 次（即 SYN 包）时，服务器端会在未完成连接队列中创建一个与该 SYN 包对应的项，可以把该项看成一个半连接（因为连接尚未建立）该半连接的状态会从 LISTEN 变成 SYNRCVD 同时向客户端返回第 2 次握手的包。 （SYN’ACK）而此时服务器正在等待完成第 3 次握手 （2）已完成连接队列中的连接 3 次握手完成后该连接就变成 ESTABLISHED 状态，每个已经完成 3 次握手的客户端连接（完整说法应该是 “服务器端的与客户端对应的 socket 连接”）都放在这个队列中作为一项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;p&gt;从上图可以看到客户端发送的三次握手从第 1 个 SYN 包到 ** &lt;code&gt;在三次握手完成之前&lt;/code&gt; &lt;strong&gt;连接都会在未完成连接队列中；直到&lt;/strong&gt; &lt;code&gt;在三次握手完成后&lt;/code&gt;  ** 该连接就从未完成连接队列转移到已完成连接队列&lt;/p&gt;
&lt;p&gt;而 listen 函数” 曾经 “的含义为这两个队列的和不超过 backlog，实际上由于操作系统的原因可能会比这个值稍微多一些。&lt;/p&gt;
&lt;p&gt;.png)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;web服务器端通过socket监听来自用户的请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器端通过socket监听来自用户的请求&#34;&gt;#&lt;/a&gt; Web 服务器端通过 &lt;code&gt;socket&lt;/code&gt;  监听来自用户的请求。&lt;/h3&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;netinet/in.h&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 创建监听socket文件描述符 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int listenfd = socket(PF_INET, SOCK_STREAM, 0);  /* 创建监听socket的TCP/IP的IPV4 socket地址 struct sockaddr_in address;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bzero(&amp;amp;address, sizeof(address));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_family = AF_INET;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_addr.s_addr = htonl(INADDR_ANY);  /* INADDR_ANY：将套接字绑定到所有可用的接口   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_port = htons(port);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int flag = 1;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* SO_REUSEADDR 允许端口被重复使用 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 绑定socket和它的地址 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address));   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 创建监听队列以存放待处理的客户连接，在这些客户连接被accept()之前 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = listen(listenfd, 5);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;socket地址api-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket地址api-2&#34;&gt;#&lt;/a&gt; socket 地址 API&lt;/h2&gt;
&lt;p&gt;字节序问题：CPU 累加器一次装载 4 个字节，那么 4 个字节在内存中排列的顺序将影响它被累加器装载成的整数的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机字节序 &amp;amp; 网络字节序：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大端字节序：一个整数的高位字节存储在内存的低位地址，低位字节（0-7bit）存储在内存高位地址， 称为&lt;strong&gt;网络字节序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小端字节序相反→现代多采用：称为&lt;strong&gt;主机字节序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用socket地址-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用socket地址-2&#34;&gt;#&lt;/a&gt; 通用 socket 地址：&lt;/h3&gt;
&lt;p&gt;AF_前缀表示地址族， PF_前缀表示协议族。&lt;/p&gt;
&lt;p&gt;unsigned short int→两个字节&lt;/p&gt;
&lt;p&gt;旧版：&lt;/p&gt;
&lt;p&gt;sa_family_t sa_family;//sa_family_t 地址族类型 char sa_data [14];// 只有 14 个字节&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://secure2.wostatic.cn/static/dfP7RxWzf4y8aiBahHyH12/image.png?auth_key=1666010881-5NyLdPgeb9rE9kwMY2Z14s-0-891086026d7c8c06143c74068d657cf8&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;专用socket地址-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#专用socket地址-2&#34;&gt;#&lt;/a&gt; 专用 socket 地址&lt;/h3&gt;
&lt;p&gt;在设置和获取 IP 地址和端口号的上海更方便&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP 协议族 sockaddr_in 和 sockaddr_in6 两个专用 socket 地址结构体，分别用 IP v4 和 IP v6 所有 socket 编程接口使用的地址参数类型都是&lt;strong&gt; sockaddr&lt;/strong&gt;→专用 socket 地址类型的遍历实际使用需要转换为通用 socket 地址类型 sockaddr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://secure2.wostatic.cn/static/djAWWc7hgyd3z2mnr1eDKR/image.png?auth_key=1666010881-pTjjt6Mh9CnSSy3qRy4KtL-0-e1f69507121dc930038b3763e106cf87&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;sockaddr_in 每段都划分好了相应成员，最终转换为 sockaddr 指针即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://secure2.wostatic.cn/static/44FGUzSnKCjwezuYfJSs81/image.png?auth_key=1666010295-xySFijxdtPd8hVsX8eYmhP-0-dbc78ed3e6fe6b117e175bdabe37da65&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// TCP/IP 协议族有 sockaddr_in 和 sockaddr_in6 两个专用的 socket 地址结构体，它们分别用于 IPv4 和 IPv6：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sockaddr_in&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;sa_family_t&lt;/span&gt; sin_family; &lt;span class=&#34;comment&#34;&gt;/* _*SOCKADDR_COMMON(sin*) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt; sin_port; &lt;span class=&#34;comment&#34;&gt;/* Port number. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in_addr&lt;/span&gt; sin_addr; &lt;span class=&#34;comment&#34;&gt;/* Internet address. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Pad to size of `struct sockaddr&amp;#x27;. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; sin_zero[&lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; sockaddr) - __SOCKADDR_COMMON_SIZE - &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt;) - &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr)];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in_addr&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt; s_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;sockaddr_in6&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;sa_family_t&lt;/span&gt; sin6_family;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt; sin6_port; &lt;span class=&#34;comment&#34;&gt;/* Transport layer port # */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; sin6_flowinfo; &lt;span class=&#34;comment&#34;&gt;/* IPv6 flow information */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;in6_addr&lt;/span&gt; sin6_addr; &lt;span class=&#34;comment&#34;&gt;/* IPv6 address */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; sin6_scope_id; &lt;span class=&#34;comment&#34;&gt;/* IPv6 scope-id */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;in_port_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ip地址转换-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip地址转换-2&#34;&gt;#&lt;/a&gt; IP 地址转换&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串 ip - 整数和主机 - 网络字节序的转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常，人们习惯用可读性好的&lt;strong&gt;字符串来表示 IP 地址&lt;/strong&gt;，比如用点分十进制字符串表示 IPv4 地址，以及用十六进制字符串表示 IPv6 地址。但编程中我们需要先把它们转化为整数（二进制数）方能使用。而记录日志时则相反，我们要把整数表示的 IP 地址转化为可读的字符串。下面 3 个函数可用于用&lt;strong&gt;点分十进制字符串表示的 IPv4 地址和用网络字节序整数表示的 IPv4 地址&lt;/strong&gt;之间的转换：&lt;/p&gt;
&lt;p&gt;只适用于 IP v4：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;in_addr_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_addr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cp)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//该函数返回值类型为in_addr_t=uint32_t=unsigned int类型，参数为字符常量 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_aton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *cp, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr *inp)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//将点分十进制地址转换为网络字节序地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; in_addr in)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;inet_aton () 函数将将点分十进制地址转换为二进制的网络字节序地址，结 ** 果地址保存在结构体类型为 in_addr 的 inp 中，** 该结构体第一个成员为 uint32_t 类型（unsigned int 类型）的 in_addr_t。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回值：1 表示转换成功，0 表示失败有错误号 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同时适用于 IP v4 和 IP v6：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// **p:点分十进制的IP字符串**，n:表示network，网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inet_pton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; af, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *src, &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *dst)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;af:地址族： AF_INET AF_INET6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src:需要转换的点分十进制的IP字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst:转换后的结果保存在这个里面  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的整数，转换成点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;inet_ntop&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; af, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *src, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *dst, &lt;span class=&#34;type&#34;&gt;socklen_t&lt;/span&gt; size)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;af:地址族： AF_INET AF_INET6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;src: 要转换的ip的整数的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dst: 转换成IP地址字符串保存的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;size：第三个参数的大小（数组的大小）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**返回值：返回转换后的数据的地址（字符串），和 dst 是一样的**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// p:点分十进制的IP字符串，n:表示network，网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;int inet_pton(int af, const char *src, void *dst);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;af:地址族： AF_INET  AF_INET6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;src:需要转换的点分十进制的IP字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;dst:转换后的结果保存在这个里面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的整数，转换成点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;af:地址族： AF_INET  AF_INET6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;src: 要转换的ip的整数的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;dst: 转换成IP地址字符串保存的地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;size：第三个参数的大小（数组的大小）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;返回值：返回转换后的数据的地址（字符串），和 dst 是一样的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一个ip字符串,点分十进制的IP地址字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;192.168.1.4&amp;quot;&lt;/span&gt;;**&lt;span class=&#34;comment&#34;&gt;//第二个参数类型为字符数组**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;**&lt;span class=&#34;comment&#34;&gt;//第三个参数的类型为无符号整型的地址---注意传入地址加&amp;amp;**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将点分十进制的IP字符串转换成网络字节序的整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;inet_pton&lt;/span&gt;(AF_INET, buf, &amp;amp;num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * p = (&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&amp;amp;num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//把四个字节分别打印出来：每次+1=字节+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d %d %d %d\n&amp;quot;&lt;/span&gt;, *p, *(p+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), *(p+&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), *(p+&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将网络字节序的IP整数转换成点分十进制的IP字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; ip[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * str =  &lt;span class=&#34;built_in&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &amp;amp;num, ip, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;str : %s\n&amp;quot;&lt;/span&gt;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ip : %s\n&amp;quot;&lt;/span&gt;, ip);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, ip == str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解析 unsigned char * p = (unsigned char *)#&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;二.(unsigned char *)&amp;amp;a 运算顺序 1. 先取 a 的地址 2. 将 &amp;amp; a 强制类型转化为 unsigned char * 类型，也就是指向 a 的地址 3. 取出 unsigned char * 指针的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;客户端-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端-2&#34;&gt;#&lt;/a&gt; 客户端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket-2&#34;&gt;#&lt;/a&gt; 创建 socket&lt;/h3&gt;
&lt;h3 id=&#34;连接函数connect-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接函数connect-2&#34;&gt;#&lt;/a&gt; 连接函数 connect&lt;/h3&gt;
&lt;p&gt;TCP 客户通过 connect 函数来建立与 TCP 服务器的连接：&lt;/p&gt;
&lt;p&gt;int connect (int sockfd, const struct sockaddr *servaddr,socklen_t addrlen); 返回：成功则为 0，若出错则为 - 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释： sockfd 是由 socket 数返回的套接字描述符 第 2 个、第 3 个参数分别是一个指向套接字地址结构的指针和该结构的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户在调用函数 onnect 前不必非得调用 bind 函数， 因为如果需要的话，内核会确定源 IP 地址，并选择 个临时端口作为源端口。TCP 套接字调用 connect 函数会激发 TCP 三次握手，仅在连接成功或出错时返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect 函数建立导致客户端套接字从 CLOSED 状态转为→SYN_SENT 状态&lt;/li&gt;
&lt;li&gt;若 connect 失败则该套接字不再可用，必须关闭，不能对该套接字再次调用 connect 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务端-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端-2&#34;&gt;#&lt;/a&gt; 服务端&lt;/h2&gt;
&lt;h3 id=&#34;创建socket可读写控制关闭的文件描述符-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建socket可读写控制关闭的文件描述符-2&#34;&gt;#&lt;/a&gt; 创建 socket：可读写控制关闭的文件描述符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;int socket( int domain,int type,int protocol)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;domain 参数告诉系统使用哪个底层协议簇，TCP/IP 使用 PF_INET（IPV4）&lt;/li&gt;
&lt;li&gt;type 指定服务类型：主要包括 SOCK_STREAM（流服务）和 SOCK_UGRAM（数据报服务）。对 TCP/IP 协议族而言，&lt;strong&gt;SOCK_STREAM*&lt;em&gt;*&lt;em&gt; 表示传输层使用 TCP 协议，*&lt;/em&gt;**SOCK_DGRAM**&lt;/em&gt;* 表示传输层使用 UDP 协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;protocol 参数是在前两个参数构成的协议集合下，再选择一个具体的协议，不过这个值通常是唯一的（由前两个参数完全决定），&lt;strong&gt;几乎在所有情况下都设置为 0，表示使用默认协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用成功返回一个&lt;strong&gt; socket 文件描述符（小的非负整数值）=sockfd&lt;/strong&gt;，失败返回 - 1 并设置 errno&lt;/p&gt;
&lt;h3 id=&#34;命名socket-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名socket-2&#34;&gt;#&lt;/a&gt; 命名 socket&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建 socket 时，我们给它指定了地址族，但并未指定具体用哪个地址 给 socket 命名：将一个 socket 与 socket 地址绑定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端采用匿名方式 —— 使用操作系统自动分配的 socket 地址：把 一个本地协议地址赋给 一个套接字 系统调用函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int bind(int sockfd,const struct sockaddr* my_addr,socklen_t addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bind 将 my_addr 所指向的 socket 地址分配给未命名的 sockfd 文件描述符，addrlen 参数指出该 socket 地址的长度。&lt;/li&gt;
&lt;li&gt;bind 成功则返回 0，失败返回 - 1 并设置 errno 包括以下两种&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EACCES: 被绑定的地址是受保护的地址 EADDRINUSE: 被绑定的地址正在使用中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;上述两个函数都需要: include &amp;lt;sys/types.h&amp;gt; include&amp;lt;sys/socket.h&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;监听socket-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监听socket-2&#34;&gt;#&lt;/a&gt; 监听 socket&lt;/h3&gt;
&lt;p&gt;socket 被命名后需要使用系统调用创建一个监听队列来存放待处理的客户连接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int listen( int sockfd,int backlog);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;listen 函数仅由 TCP 服务器调用，并做如下两件事：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;listen 函数创建一个套接字时，他被假设为一个主动套接字。listen 函数把 1 个未连接的套接字转换成 1 个被动套接字，指示内核接受指向套接字的连接请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数规定了内核应该为相应套接字排队的最大连接个数。 内核为每个给定的监听套接字维护两个队列：&lt;/p&gt;
&lt;p&gt;（1）未完成连接队列：每个 SYN 分节对应队列中的一项，套接字正处于 SYN_RCVD 状态&lt;/p&gt;
&lt;p&gt;（2）已完成连接队列：每个已完成三次握手的客户对应队列中的一项，套接字处于 ESTABLISHED 状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 每当来自客户的 SYN 到达，&lt;strong&gt;TCP 在未完成连接队列中创建一个新项&lt;/strong&gt;，然后服务器响应 SYN 第二个分节，并捎带对客户的 SYN 的 ACK。该项一直保留在未完成连接队列中，直到三次握手第三个分节到达或该项超时为止。如果三次握手正常，该项则&lt;strong&gt;从未完成连接队列转移到已完成连接队列的队尾&lt;/strong&gt;。 2. 当进程调用 accept 函数时，已完成连接队列中的队头项将返回给进程，如果该队列为空那么进程将被投入睡眠，直到 TCP 在该队列中放入一项才唤醒它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数指定被监听的 socket。&lt;/li&gt;
&lt;li&gt;backlog 参数提示内核&lt;strong&gt;监听队列的最大长度&lt;/strong&gt;→监听队列长度如果超过 backlog，服务器将不手里新的客户连接，客户端将收到 ECONNREFUSED 错误信息，以前表示已连接队列 + 半连接队列之和&lt;/li&gt;
&lt;li&gt;listen 成功返回 0，失败返回 - 1 并设置 errno&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接受连接-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接受连接-2&#34;&gt;#&lt;/a&gt; 接受连接&lt;/h3&gt;
&lt;p&gt;accept 函数由 TCP 服务器调用，用于&lt;strong&gt;从已完成连接队列队头返回下一个已完成连接&lt;/strong&gt;。&lt;strong&gt;从 listen 监听队列中接受一个连接&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int accept(int sockfd,struct sockaddr *addr,socklen_t *addrlen);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;sockfd 参数是执行过 listen 系统调用的监听 socket 套接字描述符&lt;/li&gt;
&lt;li&gt;addr 参数获取被接受连接的远端 socket 地址&lt;/li&gt;
&lt;li&gt;远端 socket 地址结构长度由 * addrlen 参数所引用的整数值设置，返回时，该整数值为该套接字地址结构内的确切字节数&lt;/li&gt;
&lt;li&gt;accept 成功时，&lt;strong&gt;那么其返回值是由 内核自动 生成的 1 个套接字全新描述符&lt;/strong&gt; = 称为&lt;strong&gt;已连接套接字描述符&lt;/strong&gt;，该 socket 唯一地表示了被接受的这个连接。失败则返回 - 1 并设置 errno。如果&lt;strong&gt;已完成连接队列为空，那么进程被投入睡眠&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器可以通过该 socket 来与被接受连接对应的客户端通信&lt;/p&gt;
&lt;p&gt;已连接套接字每次在循环中关闭，但监听套接字在服务器的整个有效期内都保持开放&lt;/p&gt;
&lt;p&gt;而现在由于考虑到 syn 攻击，backlog 参数的含义改为了已连接队列之和，去除了半连接队列之和了。&lt;/p&gt;
&lt;p&gt;举一个例子，在 socket 编程当中，如果我们在服务端不用 accept 函数，listen 函数的第二个参数设置为 5，那么这个时候，可以成功连接的客户端就是最多可以成功连入 5 个，每连入一个，队列的项数就会加一 (减一的话就是用 accept 函数去取出来)，所以当项数达到 5 时，客户端自然就会连不上了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意本函数最多返回三个值：分别对应函数三个参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新套接字描述符 / 出错指示整数&lt;/li&gt;
&lt;li&gt;客户进程的协议地址→addr&lt;/li&gt;
&lt;li&gt;客户进程的协议地址大小→addrlen&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;socket状态-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket状态-2&#34;&gt;#&lt;/a&gt; socket 状态&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;调用 socket 函数创建了一个套接字以后，改套接字就对应的和相应的输出缓冲区和输入缓冲区建立了联系，此时改套接字的状态正处于 CLOSED (观察 TCP 状态转换图即可)&lt;/li&gt;
&lt;li&gt;当我们调用 listen 函数以后，改套接字的状态就变成了 LISTEN 监听状态，此时，处于等待客户端连入的状态。&lt;/li&gt;
&lt;li&gt;对于一个调用 listen 进行监听的套接字’操作系统会为其维护 2 个队列：未完成连接队列和已完成连接队列。 （1）未完成连接队列中的连接 当客户端发送 TCP 连接三次握手的第 1 次（即 SYN 包）时，服务器端会在未完成连接队列中创建一个与该 SYN 包对应的项，可以把该项看成一个半连接（因为连接尚未建立）该半连接的状态会从 LISTEN 变成 SYNRCVD 同时向客户端返回第 2 次握手的包。 （SYN’ACK）而此时服务器正在等待完成第 3 次握手 （2）已完成连接队列中的连接 3 次握手完成后该连接就变成 ESTABLISHED 状态，每个已经完成 3 次握手的客户端连接（完整说法应该是 “服务器端的与客户端对应的 socket 连接”）都放在这个队列中作为一项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://secure2.wostatic.cn/static/vANfFTAXHhHvVDuagV2asC/image.png?auth_key=1666010295-j9CJUp62MYQtLR66bvB2sX-0-0b4a0c62fa3e70425cc25f1bef39075f&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看到客户端发送的三次握手从第 1 个 SYN 包到 ** &lt;code&gt;在三次握手完成之前&lt;/code&gt; &lt;strong&gt;连接都会在未完成连接队列中；直到&lt;/strong&gt; &lt;code&gt;在三次握手完成后&lt;/code&gt;  ** 该连接就从未完成连接队列转移到已完成连接队列&lt;/p&gt;
&lt;p&gt;而 listen 函数” 曾经 “的含义为这两个队列的和不超过 backlog，实际上由于操作系统的原因可能会比这个值稍微多一些。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://secure2.wostatic.cn/static/iWdAkGDbYNKunBwu4tCBtK/image.png?auth_key=1666010295-7vaEh1tqwyg6EqczVCfUwN-0-33d62467e9259f4777479767653b2518&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;web服务器端通过socket监听来自用户的请求-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器端通过socket监听来自用户的请求-2&#34;&gt;#&lt;/a&gt; Web 服务器端通过 &lt;code&gt;socket&lt;/code&gt;  监听来自用户的请求。&lt;/h3&gt;
&lt;p&gt;源代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;netinet/in.h&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 创建监听socket文件描述符 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int listenfd = socket(PF_INET, SOCK_STREAM, 0);  /* 创建监听socket的TCP/IP的IPV4 socket地址 struct sockaddr_in address;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bzero(&amp;amp;address, sizeof(address));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_family = AF_INET;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_addr.s_addr = htonl(INADDR_ANY);  /* INADDR_ANY：将套接字绑定到所有可用的接口   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;address.sin_port = htons(port);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int flag = 1;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* SO_REUSEADDR 允许端口被重复使用 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 绑定socket和它的地址 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address));   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 创建监听队列以存放待处理的客户连接，在这些客户连接被accept()之前 */  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = listen(listenfd, 5);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码分析&#34;&gt;#&lt;/a&gt; 代码分析：&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;创建监听 socket 的 TCP/IP 的 IPV4 socket 地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;struct sockaddr_in address;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;bzero 函数是 c++ string.h 中的函数 *。* 功能描述：置字节字符串前 n 个字节为零且包括‘\0’。 原型:extern void bzero (void *s, int n); 参数说明:s 要置零的数据的起始地址；n 要置零的数据字节个数。 用法:#include &amp;lt;string.h&amp;gt; 功能:&lt;strong&gt; 置字节字符串 s 的前 n 个字节为零且包括‘\0’&lt;/strong&gt;。 说明:bzero 无返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bzero(&amp;amp;address, sizeof(address));&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建套接字时，用该字段指定地址家族，对于 TCP/IP 协议的，必须设置为 AF_INET。变量 address 是一个结构体，其中成员变量 sin_family 是&lt;strong&gt;地址族类型变量&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_family = AF_INET;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;sin_addr 是套接字中的 IP 地址，sin_addr 的类型是联合，因此可以通过三种不同的方式访问它：作为 s_un_b（四个 1 字节整数）、s_un_w（两个 2 字节整数）或作为 s_addr（一个 4 字节整数）。INADDR_ANY：将套接字绑定到所有可用的接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络编程_常用的基本函数介绍&lt;/strong&gt; ——htonl、ntohl、htons、ntohs htonl 函数：将主机的 unsigned long 值转换成网络字节顺序（32 位）（一般主机跟网络上传输的字节顺序是不通的，分大小端），函数返回一个网络字节顺序的数字。 ntohl 函数：将网络字节顺序（32 位）转为主机字节&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_addr.s_addr = htonl(INADDR_ANY);&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;htons 是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;address.sin_port = htons(port);&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SO_REUSEADDR 允许端口被重复使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag));&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;setsockopt 函数解析：&lt;/p&gt;
&lt;p&gt;SO_REUSEADDR 参数，打开或关闭地址复用功能。当 option_value 不等于 0 时，打开，否则，关闭。它实际所做的工作是置 sock-&amp;gt;sk-&amp;gt;sk_reuse 为 1 或 0。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int setsockopt(int sockfd, int level, int optname,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const void *optval, socklen_t optlen);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;参数说明：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(1) int sockfd: 很简单，套接字描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(2) int level: 选项定义的层次；目前仅支持SOL_SOCKET和IPPROTO_TCP层次，若要在套接字级别上设置选项，就必须把level设置为 SOL_SOCKET&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(3) int optname: 指定准备设置的选项，option_name可以有哪些取值，这取决于level&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(4) const void *optval: 指针，指向存放选项值的缓冲区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(5) socklen_t optlen: optval缓冲区的长度&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绑定 socket 和它的地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address));&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建监听队列以存放待处理的客户连接，在这些客户连接被 accept () 之前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ret = listen(listenfd, 5);&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;assert (ret≠-1) 函数的作用是现计算表达式 expression ，如果其值为假（即为 0），那么它先向 stderr 打印一条出错信息，然后通过调用 abort 来终止程序运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书本 95 页服务器程序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const char* ip=argv[1]; int port =atoi(argv[2]); int backlog =atoi(argv[3]); int inet_pton(int AF_INET, ip ,&amp;amp;address.sin_addr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要以下包： include &amp;lt;sys/types.h&amp;gt;&lt;br /&gt;
include &amp;lt;sys/socket.h&amp;gt;&lt;br /&gt;
include &amp;lt;arpa/inet.h&amp;gt;&lt;/p&gt;
&lt;p&gt;解释：接收 IP 地址、端口还、backlog 值。调用 &lt;code&gt;inet_pton&lt;/code&gt;  函数：可以在将 IP 地址在 “点分十进制” 和 “整数” 之间转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int inet_pton(int af, const char *src, void &lt;em&gt;dst);&lt;br /&gt;
 这个函数转换字符串到网络地址，第一个参数 af 是地址族，转换后存在 dst 中&lt;br /&gt;
 inet_pton 是 inet_addr 的扩展，支持的多地址族有下列：&lt;br /&gt;
af = AF_INET&lt;br /&gt;
src 为指向字符型的地址，即 ASCII 的地址的首地址（ddd.ddd.ddd.ddd 格式的），函数将该地址&lt;br /&gt;
转换为&lt;strong&gt; in_addr&lt;/strong&gt; 的结构体，并复制在&lt;/em&gt; dst 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;af =AF_INET6&lt;br /&gt;
src 为指向 IPV6 的地址，函数将该地址转换为&lt;strong&gt; in6_addr&lt;/strong&gt; 的结构体，并复制在 * dst 中如果函数出错将返回一个负值，并将 errno 设置为 EAFNOSUPPORT，如果参数 af 指定的地址族和 src 格式不对，函数将返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/15/bug/</guid>
            <title>bug</title>
            <link>https://aristotlednzk.github.io.com/2022/10/15/bug/</link>
            <category term="bug" scheme="https://aristotlednzk.github.io.com/categories/bug/" />
            <category term="bug" scheme="https://aristotlednzk.github.io.com/tags/bug/" />
            <pubDate>Sat, 15 Oct 2022 10:23:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bug&#34;&gt;#&lt;/a&gt; bug&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/14/GAN%E8%AF%BE%E9%A2%98/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/</guid>
            <title>相机手眼标定</title>
            <link>https://aristotlednzk.github.io.com/2022/10/14/GAN%E8%AF%BE%E9%A2%98/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/%E7%9B%B8%E6%9C%BA%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A/</link>
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/" />
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/tags/GAN%E8%AF%BE%E9%A2%98/" />
            <pubDate>Fri, 14 Oct 2022 16:29:02 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-眼在手上的手眼标定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-眼在手上的手眼标定&#34;&gt;#&lt;/a&gt; 1、眼在手上的手眼标定&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/dc166d3e745d411b8deff1c07d6bca08.png&#34; alt=&#34;眼在手上的手眼标定&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基础坐标系（用 base 表示） 是机器臂的基底坐标系，末端坐标系（用 end 表示） 是机器臂的末端坐标系， 相机坐标系（用 cam 表示） 是固定在机器臂上面的相机自身坐标系，标定物坐标系（用 cal 表示）是标定板所在的坐标系。任意移动两次机器臂，由于标定板和机器臂的基底是不动的，因此对于某个世界点，其在 base 坐标系和 cal 坐标系下的坐标值不变，在 end 坐标系和 cam 坐标系下的坐标值随着机器臂的运动而改变。根据这一关系，可以求解出 end 坐标系和 cam 坐标系之间的转换矩阵。&lt;/p&gt;
&lt;hr /&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</guid>
            <title>生成对抗网络</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</link>
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/" />
            <category term="生成对抗网络" scheme="https://aristotlednzk.github.io.com/categories/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/" />
            <category term="GAN课题" scheme="https://aristotlednzk.github.io.com/tags/GAN%E8%AF%BE%E9%A2%98/" />
            <pubDate>Wed, 12 Oct 2022 21:34:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2k2WXVRZkcyTkUxaGJienRpUkJMWGU=&#34;&gt;GAN 开山之作论文&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8yNjczNTkzMy9hcnRpY2xlL2RldGFpbHMvMTA4OTI1MjMy&#34;&gt;https://blog.csdn.net/weixin_26735933/article/details/108925232&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzg1MjEzODM=&#34;&gt;https://zhuanlan.zhihu.com/p/378521383&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GAN 架构包含两个子模式，分别称为&lt;strong&gt; Generator (G) 和&lt;/strong&gt; Discriminator (D) ，它们相互竞争，目的是通过训练过程达到 Nash 平衡。 生成器学习将潜在空间 (例如，噪声〜N &lt;em&gt;(0,1)&lt;/em&gt; ) 映射到在其上分发给定数据样本的数据空间，鉴别器评估生成器完成的映射。 生成器的主要作用是生成模仿训练数据集的合成数据，以使鉴别器无法将合成数据与真实数据区分开。&lt;/p&gt;
&lt;p&gt;生成器的输入是随机噪声矢量_x&#39;_ (通常是均匀或正态分布)。 噪声向量通过 Generator 映射到新的数据空间，以获得伪样本_G (x&#39;)_ ，它是多维向量。 鉴别器是一个二进制分类器，它吸收了生成的数据集和训练的数据集，并学习将它们分类为假的和真实的。** 当判别器无法确定数据来自真实数据集还是生成器时，便会达到 GAN 模型的最佳状态 **&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN.png&#34; class=&#34;&#34; title=&#34;GAN&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;可解释的生成对抗网络infogan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可解释的生成对抗网络infogan&#34;&gt;#&lt;/a&gt; 可解释的生成对抗网络：InfoGAN&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTk0NTE2NA==&#34;&gt;https://zhuanlan.zhihu.com/p/55945164&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDA5NjM4MQ==&#34;&gt;生成对抗网络 (GAN) 背后的数学理论&lt;/span&gt; 提到，generator 和 discriminator 的对抗学习，它的目标其实是得到一个与 real data 分布一致的 fake data 分布。&lt;/p&gt;
&lt;p&gt;但是由于 generator 的输入是一个&lt;strong&gt;连续的噪声信号&lt;/strong&gt;，并且&lt;strong&gt;没有任何约束&lt;/strong&gt;，导致 GAN 将 z 的具体维度与 output 的语义特征对应起来，可解释性很差。&lt;/p&gt;
&lt;p&gt;它的原理很简单，在 info GAN 里面，把输入向量 z 分成两部分，c 和 z&#39;。c 可以理解为可解释的隐变量，而 z 可以理解为不可压缩的噪声。希望通过约束 c 与 output 的关系，&lt;strong&gt;使得隐变量 c 的维度对应 output 的语义特征&lt;/strong&gt;，以手写数字为例，比如笔画粗细，倾斜度等。&lt;/p&gt;
&lt;p&gt;为了引入 c，作者&lt;strong&gt;通过互信息的方式来对 c 进行约束&lt;/strong&gt;，也可以理解成自编码的过程。具体的操作是，generator 的 output，经过一个分类器，看是否能够得到 c。其实可以看成一个 anto-encoder 的反过程。其余的 discriminator 与常规的 GAN 是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic1.zhimg.com/80/v2-b85a31bbe8ed2b42a3ad11a707720674_720w.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图片来自李宏毅老师生成对抗网络视频 https://www.youtube.com/watch?v=DMA4MrNieWo&amp;amp;list=PLJV_el3uVTsMq6JEFPW35BCiOQTsoqwNw&amp;amp;index=5&lt;/p&gt;
&lt;p&gt;在实际过程中，classifier 和 discriminator 会共享参数，只有最后一层是不一样的，classifier 输出的是一个 vector, discriminator 输出的是一个标量。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;第一章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章&#34;&gt;#&lt;/a&gt; 第一章：&lt;/h2&gt;
&lt;p&gt;生成器的优点在于生成很容易，但只学习了真实样本的表象，只学到了 component 和 component 像素和像素之间的相似度，而没有学到图像和图像的关联。可以用生成器取代下面方程，产生负样本，产生 x~&lt;/p&gt;
&lt;p&gt;以往是通过高斯混合模型定义 PG 然后用最大似然估计算出最优分布 PG 下的参数 sita，但这个模型可能更复杂，不用高斯…… 又难以计算。而现在用生成器找到一个分布，也就是用生成器可以生成一个很复杂的分布 PG。&lt;strong&gt;生成器 G 意图让生成的样本 PG 和真实样本 Pdata 之间的散度越小越好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN1.png&#34; class=&#34;&#34; title=&#34;GAN1&#34;&gt;PG 可以通过生成器的向量中生成，一张张图片，Pdata 可以通过真实数据集采样得到 那么如何通过生成器计算 PG 和 Pdata 的散度呢&lt;/p&gt;
&lt;p&gt;判别器优点在于能够学到整个图像的关联，但很难生成图像，需要解 x~=arg max D (x）方程&lt;/p&gt;
&lt;p&gt;1. 如何训练判别器 D 呢，首先固定 G，寻找让 max V (G,D) 的 D,。对每一个 x，都可以找一个不同的 D 让式子最大&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN2.png&#34; class=&#34;&#34; title=&#34;GAN2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;生成对抗网络 / GAN3.png&amp;quot; alt=&amp;quot;GAN3&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;生成对抗网络 / GAN4.png&amp;quot; alt=&amp;quot;GAN4&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;第一步：固定 G，寻找 D，让 V 函数 max&lt;br /&gt;
 第二步：在寻找到的 D 基础上固定不动，寻找让 maxV 最小的 G&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN5.png&#34; class=&#34;&#34; title=&#34;GAN5&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第四章基础理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章基础理论&#34;&gt;#&lt;/a&gt; 第四章：基础理论&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN6.png&#34; class=&#34;&#34; title=&#34;GAN6&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先给定 G，找到 D&lt;em&gt; 并求出 V 对 sitaG 的梯度，用于更新 sitaG 找一个 D&lt;/em&gt; 从而 maxV 的过程就是找到 Pdata 和 PG 之间的 JS 散度 V (G1,D1*) 的过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN7.png&#34; class=&#34;&#34; title=&#34;GAN7&#34;&gt;&lt;/p&gt;
&lt;p&gt;关键是：&lt;strong&gt;当更新 G0 后函数 V 可能会变化&lt;/strong&gt;，而此时的 D*（使 V 最大的横坐标位置）可能就变了，再用之前的 D * 训练就不靠谱。因此只能每次更新 G 一点点，假设每次更新后函数变化很小和之前是类似的，因此不太可能出现右图情况。 &lt;strong&gt;因此生成器 G 不能训练太多，通常只更新一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN8.png&#34; class=&#34;&#34; title=&#34;GAN8&#34;&gt;&lt;/p&gt;
&lt;p&gt;期望 E 计算：实际上只能通过离散叠加求均值的方法来计算 V，实际上是从 Pdata 和 PG 中采样出一堆 x 来代替期望 E，训练一个二分类分类器→最小化交叉熵 = maxV&lt;/p&gt;
&lt;p&gt;训练判别器的目的是：为了评估 JS 散度 从 Pdata 中采用出一堆 x 作为正样本，从 PG 中采样出一堆 x 作为负样本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN9.png&#34; class=&#34;&#34; title=&#34;GAN9&#34;&gt;&lt;/p&gt;
&lt;p&gt;每轮训练迭代过程：&lt;/p&gt;
&lt;p&gt;1. 根据 Pdata（x）中采样 m 个 x，从先验分布中采样 m 个噪声向量 z→输入生成器→得到 m 个生成样本，更新判别器参数 sitad 从而→maxV&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;训练判别器目的&lt;/strong&gt;：为了估计 JS 散度才训练判别器，而用于估计 JS 散度的最优判别器的目标函数 V 是最大的，为了使其最大必定需要多轮重复迭代训练→直到收敛→&lt;strong&gt;可以更新 k 次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 训练生成器目的：** 为了最小化 JS 散度，而由于生成器每次训练会导致目标函数变化，&lt;strong&gt;因此每次只训练更新一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN10.png&#34; class=&#34;&#34; title=&#34;GAN10&#34;&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;fgan框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fgan框架&#34;&gt;#&lt;/a&gt; fGAN 框架&lt;/h2&gt;
&lt;p&gt;用不同 f - 散度量生成样本和真实样本的差距 p (x) 和 q（x）分别代表从 x 从 p 分布和从 q 分布采样出来的几率 p 和 q 之间的散度：&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;info-ganvae-gan-bigan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#info-ganvae-gan-bigan&#34;&gt;#&lt;/a&gt; Info GAN,VAE GAN, BiGAN&lt;/h2&gt;
&lt;p&gt;编码器和解码器输入输出不相连，判别器输入 z 和图像，判断是来自编码器还是解码器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN11.png&#34; class=&#34;&#34; title=&#34;GAN11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/12/GAN%E8%AF%BE%E9%A2%98/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/GAN12.png&#34; class=&#34;&#34; title=&#34;GAN12&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/philosophy/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/</guid>
            <title>现象学/胡塞尔</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/philosophy/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/%E7%8E%B0%E8%B1%A1%E5%AD%A6-%E8%83%A1%E5%A1%9E%E5%B0%94/</link>
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/categories/philosophy/" />
            <category term="西哲" scheme="https://aristotlednzk.github.io.com/categories/philosophy/%E8%A5%BF%E5%93%B2/" />
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/tags/%E5%93%B2%E5%AD%A6%E7%A4%BE%E7%A7%91/" />
            <pubDate>Wed, 12 Oct 2022 21:29:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;现象学胡塞尔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现象学胡塞尔&#34;&gt;#&lt;/a&gt; 现象学 —— 胡塞尔&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzdjWFlOenFDSHY2eGdHR3hHcTc0aVI=&#34;&gt;事物的本质及认识&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;胡塞尔的现象学关注的是 “认识如何可能”&lt;strong&gt;（认识的过程）的问题，是对认识本身的批判，这是反对以往的科学仅仅关注 “认识的对象” 而并不关注&lt;/strong&gt;认识本身 ** 提出的。&lt;/p&gt;
&lt;p&gt;胡塞尔的核心命题就在解释：&lt;strong&gt;认识如何可能，或我们认识是否能与内在事物一致的问题&lt;/strong&gt;（我们能不能清除一切对实存的主观设定，而完全客观地看待事物本身）。&lt;/p&gt;
&lt;p&gt;在胡塞尔那里，&lt;strong&gt;被给予性&lt;/strong&gt;意味着 ：一个东西 “没有表述其他什么”“没有超越自身去意指什么” 它所展示的东西完全都是自身被给予的东西，胡塞尔认为人的 “思维” 就是这样一种东西，而以往的所有科学研究中，研究者都是带有主观设定和滤镜去看的，因此所有的物在科学研究那里都无法具有 “绝对的被给予性”，都是不可靠的。&lt;/p&gt;
&lt;p&gt;在胡塞尔那里，“意向性” 作为现象学的 “不可或缺的起点概念和基本概念” 标志着所有意识的本己特性，即：所有意识都是 “关于某物的意识” 并且作为这样一种意识而可以得到直接的指明和描述。关于某物的意识是指在广义上的意指行为与被意指之物本身之间可贯通的相互关系。&lt;/p&gt;
&lt;p&gt;对 “意向性” 之把握的惟一途径在胡塞尔看来是本质直观的反思：“在意向性被反思揭示并因此而自身成为课题之前，它始终是隐蔽着的”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/12/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/</guid>
            <title>远行者开篇</title>
            <link>https://aristotlednzk.github.io.com/2022/10/12/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/%E8%BF%9C%E8%A1%8C%E8%80%85%E5%BC%80%E7%AF%87/</link>
            <category term="言" scheme="https://aristotlednzk.github.io.com/categories/%E8%A8%80/" />
            <category term="言" scheme="https://aristotlednzk.github.io.com/tags/%E8%A8%80/" />
            <pubDate>Wed, 12 Oct 2022 16:52:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;初衷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初衷&#34;&gt;#&lt;/a&gt; 初衷&lt;/h2&gt;
&lt;p&gt;抱着将博客作为云笔记软件来用的想法，历时两天才醒悟，还是继续当个牌面吧……&lt;/p&gt;
&lt;h3 id=&#34;后续&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续&#34;&gt;#&lt;/a&gt; 后续&lt;/h3&gt;
&lt;p&gt;Maybe 日后还有别的用途？比如不定期更新个人读书笔记、随想录之类……&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/</guid>
            <title>亲密关系</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/</link>
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/categories/%E9%97%BB%E8%AF%B4/" />
            <category term="阅读笔记" scheme="https://aristotlednzk.github.io.com/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/" />
            <pubDate>Tue, 11 Oct 2022 19:30:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;亲密关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#亲密关系&#34;&gt;#&lt;/a&gt; 亲密关系&lt;/h1&gt;
&lt;p&gt;练习：写下初遇时在伴侣身上发现的所有优点和相处至今的优点，另一张纸上写现在在对方身上看到的缺点，第一张表上列的每一项得十分，第二章表上列的扣十分&lt;/p&gt;
&lt;p&gt;1、最初被某人吸引通常是由于情绪上的需求，这些需求来源于孩提时代未被满足的需要。孩童时期的主要需求：寻求归属感 —— 证明自己具有特殊价值 ——“想要变得特别”&lt;br /&gt;
 期待一个能无视我们所有缺点并且对自己的需求极大的人。&lt;/p&gt;
&lt;p&gt;2、制造梦想的机器：从童年时期就开始绘制能满足自己一切期待的理想对象，随着年龄增长，期望越来越高&lt;br /&gt;
 3、如果在现实中寻觅不到就开始在相处中对她未满足自己需求的方面进行改造&lt;/p&gt;
&lt;h2 id=&#34;月晕期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#月晕期&#34;&gt;#&lt;/a&gt; 月晕期&lt;/h2&gt;
&lt;h3 id=&#34;通往地狱之路是用期望铺成的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通往地狱之路是用期望铺成的&#34;&gt;#&lt;/a&gt; 通往地狱之路，是用期望铺成的&lt;/h3&gt;
&lt;p&gt;期待与要求分为明说和暗示，在需求得到满足前我们不愿意去爱。&lt;/p&gt;
&lt;p&gt;然而我的期望让我不能得到安抚，期望的目的是要让需求得到满足，但与此同时必然会出现两件事：&lt;br /&gt;
（1）我们内心缺乏爱，如果我们需要 sth，是因为我们没有&lt;br /&gt;
（2）如果没有 sb 满足我们的需求，我们会觉得世界上没有足够的爱 —— 希望从他人身上得到爱只会让 “无人爱我” 的想法更牢不可破&lt;/p&gt;
&lt;p&gt;因此期望是愤恨的前兆&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;       在对亲密关系不满意时问问自己，此时希望从伴侣身上得到的是什么？本质上是情绪上的事物，表面上看来则是实质的需求。&lt;/p&gt;
&lt;p&gt;例：约好七点见面，但她八点才来，我不高兴但&lt;strong&gt;真正原因不是她迟到而是她让我觉得自己不够特别&lt;/strong&gt; —— 我希望她让我觉得自己很重要，重要到她应该愿意为了我而守时&lt;/p&gt;
&lt;p&gt;了解自己期望背后的需求，我们通常只是希望伴侣做或说一些事，但却不会意识到我们希望他们这么做其实是满足自己某些情绪上的需求 —— 我们希望曲儿我们值得被爱&lt;/p&gt;
&lt;p&gt;想象力、意向和直觉&lt;/p&gt;
&lt;p&gt;灵魂思考的方式 —— 直觉&lt;/p&gt;
&lt;p&gt;当找到自己真正的情绪需求后再问自己：我愿不愿意放弃这项期望呢 —— 我愿不愿意寻求自己内在的力量来满足我的所有需求呢？&lt;/p&gt;
&lt;p&gt;如果答案是肯定的，那么&lt;strong&gt;直觉会告诉你该如何放手了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你有精神上的信仰，那么不妨把需求交给内心中高层次的力量&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;如果决定放手那么如何满足需求呢事实是我们并不需要自己认为需要的东西&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果决定放手那么如何满足需求呢事实是我们并不需要自己认为需要的东西&#34;&gt;#&lt;/a&gt; 如果决定放手，那么如何满足需求呢？
—— 事实是，我们并不需要自己认为需要的东西&lt;/h3&gt;
&lt;p&gt;学会放手和接纳，明白自己原本就是一个完整的个体，所需的一切都存在于你的内心&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;幻灭期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#幻灭期&#34;&gt;#&lt;/a&gt; 幻灭期&lt;/h2&gt;
&lt;p&gt;随着愤恨的到来，标志着进入第二阶段 —— 幻灭&lt;/p&gt;
&lt;p&gt;幻灭带来偏差行为：&lt;br /&gt;
引起注意、权力斗争：满足孩子的两大需求&lt;br /&gt;
报复心理、自我放逐：当孩子觉得需求永远不会被满足时被深刻的沮丧痛苦驱使做出毁灭性行为&lt;/p&gt;
&lt;p&gt;       远离造成痛苦的人并不会让痛苦消失，伴侣只是让我发觉到痛苦的存在。唤醒过去的伤痛，想要疗伤的企图往往导致亲密关系危机，和伴侣吵架只是为了不去感受旧痛，而伴侣所做的仅仅是让旧痛浮上意识表层。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;信念想法的果实&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信念想法的果实&#34;&gt;#&lt;/a&gt; 信念：想法的果实&lt;/h2&gt;
&lt;p&gt;种下想法，就得到行动。种下行动，就得到习惯。&lt;br /&gt;
种下习惯，就得到人格。种下人格，就得到命运。&lt;/p&gt;
&lt;p&gt;过去的创伤并不会随时间逝去，每个自我局限的信念都来自过去的创伤、痛苦的经验。所有未愈合伤口的信念都是自我局限的，&lt;/p&gt;
&lt;p&gt;——&lt;strong&gt; 如果离开家的时候，你并不感到平静，那么你其实并没有离开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;亲密关系中蕴含着治好旧伤的机会。而大多数情况是双方都试图控制对方的行为，借以控制过去的创伤。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/11/%E9%97%BB%E8%AF%B4/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB-16660629207261.png&#34; class=&#34;&#34; title=&#34;亲密关系&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/philosophy/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</guid>
            <title>王阳明心学</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/philosophy/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</link>
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/categories/philosophy/" />
            <category term="中哲" scheme="https://aristotlednzk.github.io.com/categories/philosophy/%E4%B8%AD%E5%93%B2/" />
            <category term="哲学社科" scheme="https://aristotlednzk.github.io.com/tags/%E5%93%B2%E5%AD%A6%E7%A4%BE%E7%A7%91/" />
            <pubDate>Tue, 11 Oct 2022 19:29:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;王阳明心学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#王阳明心学&#34;&gt;#&lt;/a&gt; 王阳明心学&lt;/h1&gt;
&lt;p&gt;一、人具有无限心&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人作为时间性存在，总是以筹划尚不存在的未来的形式活在当下 —— 证明了人心的无限性 —— 能超越现实；因而烦恼从中来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关键在于安顿无限心。&lt;/p&gt;
&lt;p&gt;在官场上，中国政治的传统模式一天不变，中南海和秦城监狱之间就一步之遥。高官俸禄之有限，&lt;strong&gt;而无限心无法安顿在有限的事物上，因为现实世界的事物无一不是有限的。因此无限心只能安顿在超越现实的世界中（出世 —— 从现实世界的利害中超拔出来），而无法安顿在现实世界中&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;儒家：无所为而为。如果从未出世，那么做事总是有所为而为，做事都有目标目的，始终把自己做的事情看作是达到另外一个目的手段。&lt;br /&gt;
无所为而为 —— 这件事本应当做，它就是自己的价值 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;道家：无为而无不为。不以人为的方式做事。人 + 为 = 伪 = 造作，生非贵之所能存，身非爱之所能厚，遇矛盾先将属于自己的&lt;strong&gt;人为因素去除&lt;/strong&gt;，在最终还是不得不去处理时再去做，时机恰到好处，方法顺应天道。最好的人生就是没有目标的人生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;佛家：无心而为。每个人做什么自有来历 —— 业力。&lt;strong&gt;做事就是消业，不求结果，最好没有结果，若有结果则旧业未消又增新业。但凡事都有结果，力求结果与己无关。&lt;/strong&gt; 认真做事，但对结果漠不关心 ——&lt;strong&gt; 除心不除事&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;业力：每个人都生来带着业力&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;人并非拥有选择自己拥有某种愿望的能力，只是拥有选择实现愿望的道路的能力，什么愿望来到我们心里并不是我们的自由，愿望就这么来了……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西方哲学 —— 自身问题：关于世界的客观知识的前提基础是什么，获得客观可靠有效知识的方法是什么&lt;/li&gt;
&lt;li&gt;中国哲学 —— 人生问题；佛学中国化（两汉之际）禅宗，儒道佛合流 (两宋时期)—— 王阳明心学&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;一体之仁，当我们对鸟兽虫鱼的哀鸣生出恻隐之心，当我们与鸟兽虫鱼连为一体，人心感通宇宙万物，中国宇宙观。心之理 —— 不是心外之理，真理不要到心外去寻求 —— 万物皆备于我，反身而成，乐莫大焉。上乘孟子 “学问之道无他，求其放心而已”，学问 —— 已经被亡失的心重新召回。&lt;/p&gt;
&lt;p&gt;《金刚经》核心思想 ——&lt;strong&gt; 因无所住而生其心&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛学中国化：禅宗 16 字法门：教外别传，不立文字，直指人心，见性成佛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不求出离生死之苦海，自性若迷。&lt;/li&gt;
&lt;li&gt;不睹众相常观金体。&lt;/li&gt;
&lt;li&gt;六色 —— 眼耳鼻舌身意 —— 着相；观金体本身 —— 不住相。&lt;/li&gt;
&lt;li&gt;佛法在世间，不离世间觉。离世觅菩提，恰如求兔角&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tva3.sinaimg.cn/large/0071tL0Nly8h760vrtpq6j30u00u0myt.jpg&#34; alt=&#34;彼岸花&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/11/computer-science/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/</guid>
            <title>转码之路</title>
            <link>https://aristotlednzk.github.io.com/2022/10/11/computer-science/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/</link>
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/categories/computer-science/" />
            <category term="转码之路" scheme="https://aristotlednzk.github.io.com/tags/%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF/" />
            <pubDate>Tue, 11 Oct 2022 19:26:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;转码之路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转码之路&#34;&gt;#&lt;/a&gt; 转码之路&lt;/h1&gt;
&lt;p&gt;鱼皮学习路线&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbGl5dXBpL2NvZGUtcm9hZG1hcC9ibG9iL21haW4vZG9jcy9yb2FkbWFwL0phdmElRTUlQUQlQTYlRTQlQjklQTAlRTglQjclQUYlRTclQkElQkYubWQjaHR0cHM6Ly9naXRlZS5jb20vbGluaz90YXJnZXQ9aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2ludGVsbGlnZW50VGVzdA==&#34;&gt; https://gitee.com/liyupi/code-roadmap/blob/main/docs/roadmap/Java 学习路线.md#https://gitee.com/link?target=https%3A%2F%2Fwww.nowcoder.com%2FintelligentTest&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;API 在线文档&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2FwaWRvY3MvYXBpZG9jP2FwaT1qZGtfN3U0&#34;&gt; https://tool.oschina.net/apidocs/apidoc?api=jdk_7u4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzN4QjlGQkZMVmhkMWk2dWNmZ3NIR0I=&#34;&gt;面经资料&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzJMTGpnZGdjM25pZ1l4WnFSakhRRUU=&#34;&gt;岗位分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3dkakU3WEdRNzhmTURUZnFTTXpTU0M=&#34;&gt;简历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2NhelNUZm1iTkgxTjE0OThUM1dmUUc=&#34;&gt;后端指导大纲&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzJQOUVTVFRxdUhpOUhtdTFVQVpVVlI=&#34;&gt;GIT&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2dvSzl5Rnlud29lOWlQdU43aWVETlU=&#34;&gt;Linux&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3I0NGFVUWlkUkVtUEFxTU14QWhHdUY=&#34;&gt;C++&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzRHRlhoMW95N2pyblhMMW1vclhyN28=&#34;&gt;力扣刷题笔记&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2plYmJYOG9uZG1VRUtqaWlRd01rOTY=&#34;&gt;JAVA 基础笔记&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzRzYkt1TmtRc0NyVkY5Z0tESkMyaFg=&#34;&gt;MySQL（DB）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2VXZ0F6OTdEaTdjZHZpcThtU1o3cXM=&#34;&gt;JVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2oyeVF6QVlHSjk2SHlWa3JHZ25GTFY=&#34;&gt;JUC 并发编程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2UyUzNHZjZ4VkJtS3p3VVk3N2tqUnc=&#34;&gt;三件套&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3FMRHRaMXlBOUZhV3g4dkQxcVlBN1c=&#34;&gt;排序算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzlFaFl6RnF5V1hZY0Ryc2VtdjhidTE=&#34;&gt;Spring 框架&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzYyWlI1bTJBVER6OFoyUXdTN21rTTE=&#34;&gt;Redis&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzlDWUFFell4RXY3bzdoUnoxWHN3Q0E=&#34;&gt;Docker&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2p5VkdDdGZSYzRDeTFmaVlVWW1CdUI=&#34;&gt;Acwing 算法基础课&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5CWolai%5C%E7%AC%94%E8%AE%B0%5C%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF%5Cimage%5Cimage_v6vkTMI4J5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;java学习路线一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java学习路线一&#34;&gt;#&lt;/a&gt; Java 学习路线一&lt;/h2&gt;
&lt;p&gt;牛客链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubm93Y29kZXIuY29tL2Rpc2N1c3MvNDY0NzUwP3R5cGU9cG9zdCZhbXA7b3JkZXI9cmVjYWxsJmFtcDtwb3M9JmFtcDtwYWdlPTEmYW1wO25jVHJhY2VJZD0mYW1wO2NoYW5uZWw9LTEmYW1wO3NvdXJjZV9pZD1zZWFyY2hfcG9zdF9uY3RyYWNrJmFtcDtnaW9faWQ9QjcyMkIxMkMyODNEN0MwRDAxQzFCRDUxNTY5QTU2OTYtMTY1Nzg3Mzk3MDUwNA==&#34;&gt;https://www.nowcoder.com/discuss/464750?type=post&amp;amp;order=recall&amp;amp;pos=&amp;amp;page=1&amp;amp;ncTraceId=&amp;amp;channel=-1&amp;amp;source_id=search_post_nctrack&amp;amp;gio_id=B722B12C283D7C0D01C1BD51569A5696-1657873970504&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;1 JVM&lt;/p&gt;
&lt;p&gt;内存模型、垃圾收集&lt;a href=&#34;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&#34; title=&#34;算法&#34;&gt;算法&lt;/a&gt;与垃圾收集器、内存溢出与内存泄漏是重点，JVM 调优也学一下；&lt;/p&gt;
&lt;p&gt;2 spring&lt;/p&gt;
&lt;p&gt;3 springmvc&lt;/p&gt;
&lt;p&gt;4 mybatis&lt;/p&gt;
&lt;p&gt;5 springboot&lt;/p&gt;
&lt;p&gt;框架不但要会用，也要能清晰原理比如自动配置的原理；&lt;/p&gt;
&lt;p&gt;6 多线程 同步 并发等（这很重要）&lt;/p&gt;
&lt;p&gt;生产者消费者模式代码、synchronized、lock、各种锁机制和锁升级；&lt;/p&gt;
&lt;p&gt;7 一些常见的数据结构与&lt;a href=&#34;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&#34; title=&#34;算法&#34;&gt;算法&lt;/a&gt;的底层 比如 Hash 、ConcurrentHashMap、LinkedHashMap、LRU (LRU 要会自己敲底层实现，其实跟 LinkedHashMap 差不多)；&lt;/p&gt;
&lt;p&gt;8 设计模式&lt;/p&gt;
&lt;p&gt;关于设计模式我并没有单独拎出来学习，而是在学框架的时候用到了什么就补充了一下。&lt;/p&gt;
&lt;p&gt;比如学到 bean 的作用范围的时候补充学习了一下单例模式；&lt;/p&gt;
&lt;p&gt;学 IOC 的时候补充学习了一下工厂模式；&lt;/p&gt;
&lt;p&gt;学 AOP 的时候补充学习了代理模式；&lt;/p&gt;
&lt;p&gt;学习 Redistemplate 的时候补充学习了模板模式；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强化阶段：（强化阶段学的还不太好，会在毕业前进行再强化）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 &lt;a href=&#34;/jump/super-jump/word?word=redis&#34; title=&#34;redis&#34;&gt;redis&lt;/a&gt;（很重要，务必要熟练掌握，好像每次面试都被问到了）&lt;/p&gt;
&lt;p&gt;热 key 和大 key 问题、击穿、穿透、雪崩、数据类型底层、RDB&amp;amp;AOF、实现消息中间件（发布者订阅者模式）、过期与淘汰策略。&lt;/p&gt;
&lt;p&gt;2 分布式（主要学的分布式锁 分布式事务）&lt;/p&gt;
&lt;p&gt;3 微服务&lt;/p&gt;
&lt;p&gt;4 消息中间件（我努力加强）&lt;/p&gt;
&lt;h2 id=&#34;学习路线3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习路线3&#34;&gt;#&lt;/a&gt; 学习路线 3&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2FvbGVpQ29kaW5nL3AvNjE3MDU1NS5odG1s&#34;&gt;https://www.cnblogs.com/caoleiCoding/p/6170555.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;经验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经验&#34;&gt;#&lt;/a&gt; 经验&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142%5Ev35%5Eexperiment_2_v1&amp;amp;utm_term=%E5%B0%9A%E7%A1%85%E8%B0%B7MySQL&amp;amp;spm=1018.2226.3001.4187&#34; title=&#34;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142^v35^experiment_2_v1&amp;amp;utm_term=尚硅谷MySQL&amp;amp;spm=1018.2226.3001.4187&#34;&gt;https://blog.csdn.net/v123411739/article/details/115498947?ops_request_misc=%7B%22request%5Fid%22%3A%22165910547516782388038827%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;amp;request_id=165910547516782388038827&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-4-115498947-null-null.142&lt;sup&gt;v35&lt;/sup&gt;experiment_2_v1&amp;amp;utm_term = 尚硅谷 MySQL&amp;amp;spm=1018.2226.3001.4187&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;D:%5CWolai%5C%E7%AC%94%E8%AE%B0%5C%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF%5Cimage%5Cimage_A80nTpU_Sw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL2NIeEJMSENtS253ZFJSM0J0MTFWNFU=&#34;&gt;IDEA 架构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3FNeFRSVDdIYmQ3NndzNUxXQlhYYzU=&#34;&gt;配置环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tL3hnRjVVclpTNzdFRHJMcGhrQWFMMlE=&#34;&gt;设计模式&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;神的博客笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#神的博客笔记&#34;&gt;#&lt;/a&gt; 神的博客笔记：&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sdnh1ZXlhbmcudmlwL3RhZ3MvSnVjLw==&#34;&gt;https://lvxueyang.vip/tags/Juc/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueXVxdWUuY29tL2Z1eXVzYWthaW9yaS95YmMyZzg/dGhlbWU9bGlnaHQ=&#34;&gt;https://www.yuque.com/fuyusakaiori/ybc2g8?theme=light&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud29sYWkuY29tLzU0N2JKYzNwallzWmlDR21pcG5GOGE=&#34;&gt;英文储备&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://aristotlednzk.github.io.com/2022/10/09/hello-world/</guid>
            <title>Hello World</title>
            <link>https://aristotlednzk.github.io.com/2022/10/09/hello-world/</link>
            <pubDate>Sun, 09 Oct 2022 20:55:06 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
